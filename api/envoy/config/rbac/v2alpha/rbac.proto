syntax = "proto3";

import "validate/validate.proto";
import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/route/route.proto";

package envoy.config.rbac.v2alpha;
option go_package = "v2alpha";

// Role Based Access Control (RBAC) provides service-level and method-level access control for a
// service. The RBAC engine authorizes a request by evaluating the request context (expressed in the
// form of :ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`) against
// the RBAC policies.
//
// RBAC policies are additive. The policies are examined in order. A request is allowed once a
// matching policy is found (suppose the `action` is ALLOW).
//
// Here is an example of RBAC configuration. It has two policies:
//
// * Service account "cluster.local/ns/default/sa/admin" has full access (empty permission entry
//   means full access) to the service.
//
// * Any user (empty principal entry means any user) can read ("GET") the service at paths with
//   prefix "/products" or suffix "/reviews" when request header "version" set to either "v1" or
//   "v2".
//
//  .. code-block:: yaml
//
//   action: ALLOW
//   policies:
//     "service-admin":
//       permissions:
//         - any: true
//       principals:
//         - authenticated: { name: "cluster.local/ns/default/sa/admin" }
//         - authenticated: { name: "cluster.local/ns/default/sa/superuser" }
//     "product-viewer":
//       permissions:
//           - and_rules:
//               rules:
//                 - header: { name: ":method", exact_match: "GET" }
//                 - header: { name: ":path", regex_match: "/products(/.*)?" }
//                 - or_rules:
//                     rules:
//                       - destination_port: 80
//                       - destination_port: 443
//       principals:
//         - any: true
//
message RBAC {
  // Should we do white-list or black-list style access control.
  enum Action {
    // The policies grant access to principals. The rest is denied. This is white-list style
    // access control. This is the default type.
    ALLOW = 0;

    // The policies deny access to principals. The rest is allowed. This is black-list style
    // access control.
    DENY = 1;
  }

  Action action = 1;

  // Maps from policy name to policy.
  map<string, Policy> policies = 2;
}

// Policy specifies a role and the principals that are assigned/denied the role.
message Policy {
  // Required. The set of permissions that define a role.
  repeated Permission permissions = 1 [(validate.rules).repeated .min_items = 1];

  // Required. List of principals that are assigned/denied the role based on “action”.
  repeated Principal principals = 2 [(validate.rules).repeated .min_items = 1];
}

// Permission defines a permission to access the service.
message Permission {

  message Set {
    repeated Permission rules = 1 [(validate.rules).repeated .min_items = 1];
  }

  oneof rule {
    option (validate.required) = true;

    // A set of rules that all must match in order to define the action.
    Set and_rules = 1;

    // A set of rules where at least one must match in order to define the action.
    Set or_rules = 2;

    // When any is set, it matches any action.
    bool any = 3 [(validate.rules).bool.const = true];

    // A header (or psuedo-header such as :path or :method) on the incoming HTTP request.
    envoy.api.v2.route.HeaderMatcher header = 4;

    // A CIDR block that describes the destination IP.
    envoy.api.v2.core.CidrRange destination_ip = 5;

    // A port number that describes the destination port connecting to.
    uint32 destination_port = 6 [(validate.rules).uint32.lte = 65535];
  }
}

// Principal defines an identity or a group of identities.
message Principal {

  message Set {
    repeated Principal ids = 1 [(validate.rules).repeated .min_items = 1];
  }

  // Authentication attributes for principal. These could be filled out inside RBAC filter.
  // Or if an authentication filter is used, they can be provided by the authentication filter.
  message Authenticated {
    // The name of the principal. If set, the URI SAN is used from the certificate, otherwise the
    // subject field is used. If unset, it applies to any user that is authenticated.
    string name = 1;
  }

  oneof identifier {
    option (validate.required) = true;

    // A set of identifiers that all must match in order to define the principal.
    Set and_ids = 1;

    // A set of identifiers that all must match in order to define the principal.
    Set or_ids = 2;

    // When any is set, it matches any principal.
    bool any = 3 [(validate.rules).bool.const = true];

    // Authenticated attributes that identify the principal.
    Authenticated authenticated = 4;

    // A CIDR block that describes the source IP.
    envoy.api.v2.core.CidrRange source_ip = 5;

    // A header (or psuedo-header such as :path or :method) on the incoming HTTP request.
    envoy.api.v2.route.HeaderMatcher header = 6;
  }
}
