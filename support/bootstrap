#!/usr/bin/env bash
#
# Bootstraps the developer tools and development environment. This includes
# copying project-standard git commit hooks that do things like ensure DCO
# signoff is present during commit.

# Best-effort check that we're in the envoy root directory.
if [ ! -f .gitignore ] && [ ! -f .clang-format ]; then
    cat >&2 <<__EOF__
ERROR: this script must be run at the root of the envoy source tree
__EOF__
    exit 1
fi

# Helper functions that calculate `abspath` and `relpath`. Taken from Mesos
# commit 82b040a60561cf94dec3197ea88ae15e57bcaa97, which also carries the Apache
# V2 license, and has deployed this code successfully for some time.
abspath() {
    cd "`dirname "${1}"`"
    echo "${PWD}"/"`basename "${1}"`"
    cd "${OLDPWD}"
}
relpath() {
  local from to up
  from="`abspath "${1%/}"`" to="`abspath "${2%/}"/`"
  while test "${to}"  = "${to#"${from}"/}" \
          -a "${to}" != "${from}"; do
    from="${from%/*}" up="../${up}"
  done
  to="${up%/}${to#${from}}"
  echo "${to:-.}"
}

# Try to find the `.git` directory, even if it's not in Envoy project root (as
# it wouldn't be if, say, this were in a submodule). The "blessed" but fairly
# new way to do this is to use `--git-common-dir`.
dotGitDir=`git rev-parse --git-common-dir`
if test ! -d "${_gitdir}"; then
  # If `--git-common-dir` is not available, fall back to older way of doing it.
  dotGitDir=`git rev-parse --git-dir`
fi

hooksDir="${dotGitDir}/hooks"
hooksDirRelpath=`relpath "${hooksDir}" "${PWD}"`

if [ ! -e "${hooksDir}/prepare-commit-msg" ]; then
  ln -s "${hooksDirRelpath}/support/hooks/prepare-commit-msg" "${hooksDir}/prepare-commit-msg"
fi

if [ ! -e "${hooksDir}/pre-commit" ]; then
  ln -s "${hooksDirRelpath}/support/hooks/pre-commit" "${hooksDir}/pre-commit"
fi
