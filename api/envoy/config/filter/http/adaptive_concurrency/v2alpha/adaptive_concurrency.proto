syntax = "proto3";

package envoy.config.filter.http.adaptive_concurrency.v2alpha;

option java_package = "io.envoyproxy.envoy.config.filter.http.adaptive_concurrency.v2alpha";
option java_outer_classname = "AdaptiveConcurrencyProto";
option java_multiple_files = true;
option go_package = "v2alpha";

import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

message GradientControllerConfig {
  // The percentile to use when summarizing aggregated samples.
  google.protobuf.DoubleValue sample_aggregate_percentile = 1
      [(validate.rules).double = {gte: 0.0, lte: 1.0}];

  message ConcurrencyLimitCalculationParams {
    // The maximum value the gradient is allowed to take. This influences how aggressively the
    // concurrency limit can increase. Defaults to 2.0.
    google.protobuf.DoubleValue max_gradient = 1 [(validate.rules).double.gt = 1.0];

    // The allowed upper-bound on the calculated concurrency limit.
    google.protobuf.UInt64Value max_concurrency_limit = 2 [(validate.rules).uint64.gt = 0];

    // The period of time samples are taken to recalculate the concurrency limit.
    google.protobuf.Duration concurrency_update_interval = 3;
  }
  ConcurrencyLimitCalculationParams concurrency_limit_params = 2;

  message MinimumRTTCalculationParams {
    // The time interval between recalculating the minimum request round-trip time.
    google.protobuf.Duration interval = 1;

    // The number of requests to aggregate/sample during the minRTT recalculation window before
    // updating
    google.protobuf.UInt64Value request_count = 2;
  };
  MinimumRTTCalculationParams min_rtt_calc_params = 3;
}

message AdaptiveConcurrency {
  oneof concurrency_controller_config {
    // Gradient concurrency control will be used.
    GradientControllerConfig gradient_controller_config = 1;
  }

  // If set to true, the filter becomes a pass-through and forwards all requests.
  bool disabled = 2;
}
