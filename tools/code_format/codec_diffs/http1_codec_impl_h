--- 
+++ 
@@ -19,36 +19,14 @@
 #include "common/http/codec_helper.h"
 #include "common/http/codes.h"
 #include "common/http/header_map_impl.h"
+#include "common/http/http1/codec_impl.h"
 #include "common/http/http1/header_formatter.h"
 #include "common/http/status.h"
 
 namespace Envoy {
 namespace Http {
+namespace Legacy {
 namespace Http1 {
-
-/**
- * All stats for the HTTP/1 codec. @see stats_macros.h
- */
-#define ALL_HTTP1_CODEC_STATS(COUNTER)                                                             \
-  COUNTER(dropped_headers_with_underscores)                                                        \
-  COUNTER(metadata_not_supported_error)                                                            \
-  COUNTER(requests_rejected_with_underscores_in_headers)                                           \
-  COUNTER(response_flood)
-
-/**
- * Wrapper struct for the HTTP/1 codec stats. @see stats_macros.h
- */
-struct CodecStats {
-  using AtomicPtr = Thread::AtomicPtr<CodecStats, Thread::AtomicPtrAllocMode::DeleteOnDestruct>;
-
-  static CodecStats& atomicGet(AtomicPtr& ptr, Stats::Scope& scope) {
-    return *ptr.get([&scope]() -> CodecStats* {
-      return new CodecStats{ALL_HTTP1_CODEC_STATS(POOL_COUNTER_PREFIX(scope, "http1."))};
-    });
-  }
-
-  ALL_HTTP1_CODEC_STATS(GENERATE_COUNTER_STRUCT)
-};
 
 class ConnectionImpl;
 
@@ -94,7 +72,8 @@
   void clearReadDisableCallsForTests() { read_disable_calls_ = 0; }
 
 protected:
-  StreamEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter);
+  StreamEncoderImpl(ConnectionImpl& connection,
+                    Http::Http1::HeaderKeyFormatter* header_key_formatter);
   void setIs1xx(bool value) { is_1xx_ = value; }
   void setIs204(bool value) { is_204_ = value; }
   void encodeHeadersBase(const RequestOrResponseHeaderMap& headers, bool end_stream);
@@ -137,7 +116,7 @@
 
   void encodeFormattedHeader(absl::string_view key, absl::string_view value);
 
-  const HeaderKeyFormatter* const header_key_formatter_;
+  const Http::Http1::HeaderKeyFormatter* const header_key_formatter_;
   absl::string_view details_;
 };
 
@@ -146,7 +125,8 @@
  */
 class ResponseEncoderImpl : public StreamEncoderImpl, public ResponseEncoder {
 public:
-  ResponseEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  ResponseEncoderImpl(ConnectionImpl& connection,
+                      Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
 
   bool startedResponse() { return started_response_; }
@@ -165,7 +145,8 @@
  */
 class RequestEncoderImpl : public StreamEncoderImpl, public RequestEncoder {
 public:
-  RequestEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  RequestEncoderImpl(ConnectionImpl& connection,
+                     Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
   bool headRequest() { return head_request_; }
   bool connectRequest() { return connect_request_; }
@@ -226,7 +207,7 @@
   virtual bool supportsHttp10() { return false; }
   bool maybeDirectDispatch(Buffer::Instance& data);
   virtual void maybeAddSentinelBufferFragment(Buffer::WatermarkBuffer&) {}
-  CodecStats& stats() { return stats_; }
+  Http::Http1::CodecStats& stats() { return stats_; }
   bool enableTrailers() const { return enable_trailers_; }
 
   // Http::Connection
@@ -241,17 +222,17 @@
   bool strict1xxAnd204Headers() { return strict_1xx_and_204_headers_; }
 
 protected:
-  ConnectionImpl(Network::Connection& connection, CodecStats& stats, http_parser_type type,
-                 uint32_t max_headers_kb, const uint32_t max_headers_count,
-                 HeaderKeyFormatterPtr&& header_key_formatter, bool enable_trailers);
+  ConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
+                 http_parser_type type, uint32_t max_headers_kb, const uint32_t max_headers_count,
+                 Http::Http1::HeaderKeyFormatterPtr&& header_key_formatter, bool enable_trailers);
 
   bool resetStreamCalled() { return reset_stream_called_; }
 
   Network::Connection& connection_;
-  CodecStats& stats_;
+  Http::Http1::CodecStats& stats_;
   http_parser parser_;
   Http::Code error_code_{Http::Code::BadRequest};
-  const HeaderKeyFormatterPtr header_key_formatter_;
+  const Http::Http1::HeaderKeyFormatterPtr header_key_formatter_;
   HeaderString current_header_field_;
   HeaderString current_header_value_;
   bool processing_trailers_ : 1;
@@ -431,7 +412,7 @@
  */
 class ServerConnectionImpl : public ServerConnection, public ConnectionImpl {
 public:
-  ServerConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ServerConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
                        ServerConnectionCallbacks& callbacks, const Http1Settings& settings,
                        uint32_t max_request_headers_kb, const uint32_t max_request_headers_count,
                        envoy::config::core::v3::HttpProtocolOptions::HeadersWithUnderscoresAction
@@ -443,7 +424,7 @@
    * An active HTTP/1.1 request.
    */
   struct ActiveRequest {
-    ActiveRequest(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+    ActiveRequest(ConnectionImpl& connection, Http::Http1::HeaderKeyFormatter* header_key_formatter)
         : response_encoder_(connection, header_key_formatter) {}
 
     HeaderString request_url_;
@@ -530,7 +511,7 @@
  */
 class ClientConnectionImpl : public ClientConnection, public ConnectionImpl {
 public:
-  ClientConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ClientConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
                        ConnectionCallbacks& callbacks, const Http1Settings& settings,
                        const uint32_t max_response_headers_count);
 
@@ -539,8 +520,8 @@
 
 private:
   struct PendingResponse {
-    PendingResponse(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter,
-                    ResponseDecoder* decoder)
+    PendingResponse(ConnectionImpl& connection,
+                    Http::Http1::HeaderKeyFormatter* header_key_formatter, ResponseDecoder* decoder)
         : encoder_(connection, header_key_formatter), decoder_(decoder) {}
 
     RequestEncoderImpl encoder_;
@@ -603,6 +584,7 @@
 };
 
 } // namespace Http1
+} // namespace Legacy
 } // namespace Http
 } // namespace Envoy
 