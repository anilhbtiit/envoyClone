syntax = "proto3";

package envoy.config.filter.http.cache.v2;

import "udpa/annotations/migrate.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.filter.http.cache.v2";
option java_outer_classname = "CacheProto";
option java_multiple_files = true;
option (udpa.annotations.file_migrate).move_to_package =
    "envoy.extensions.filters.http.cache.v3alpha";

// [#protodoc-title: HTTP Cache Filter]
// Pluggable HTTP Cache :ref:`overview <config_http_filters_cache>`.
// [#extension: envoy.filters.http.cache]
message CacheConfig {
  // List of query params.
  message QueryParams {
    repeated string query_string_keys = 1;
  }

  // Modifies cache key creation by restricting which parts of the URL are included.
  message KeyCreatorParams {
    // If true, exclude the URL scheme from the cache key. Set to true if your origins always
    // produce the same response for http and https requests.
    bool exclude_scheme = 1;

    // If true, exclude the host from the cache key. Set to true if your origins' responses don't
    // ever depend on host.
    bool exclude_host = 2;

    oneof query_string_keys {
      // If set, only query params in this list are included in the cache
      // key. Any other query params will not affect cache lookup. If set to an
      // empty list, the query string will be entirely ignored in cache lookups.
      QueryParams query_string_keys_included = 3;

      // If set, query params in this list are excluded from the cache key, and
      // will not affect cache lookup. Setting this to an empty list is
      // equivalent to not setting it (but is less efficient).
      QueryParams query_string_keys_excluded = 4;
    }
  }

  // Name of cache implementation to use.
  string name = 1 [(validate.rules).string = {min_bytes: 1}];

  // TODO(toddmgreer) implement vary headers
  //
  // List of allowed Vary headers. These headers will be provided to caches in lookups, and the
  // cache filter will only insert responses whose Vary headers (if any) are all in this list. For
  // example, if an origin supplies "vary:user-agent" in a response, the response will only be
  // inserted if "user-agent" is in this list.
  repeated string allowed_vary_headers = 2;

  // TODO(toddmgreer) implement key customization
  //
  // Modifies cache key creation by restricting which parts of the URL are included.
  KeyCreatorParams key_creator_params = 3;

  // TODO(toddmgreer) implement size limit
  //
  // Max body size the cache filter will insert into a cache.
  uint32 max_body_bytes = 4;
}
