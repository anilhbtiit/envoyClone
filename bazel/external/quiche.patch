diff --git a/http2/http2_constants.h b/http2/http2_constants.h
index d47c3f1f..fbf6be1f 100644
--- http2/http2_constants.h
+++ http2/http2_constants.h
@@ -67,7 +67,7 @@ QUICHE_EXPORT_PRIVATE inline std::ostream& operator<<(std::ostream& out,

 // Flags that appear in supported frame types. These are treated as bit masks.
 // The comments indicate for which frame types the flag is valid.
-enum Http2FrameFlag {
+enum Http2FrameFlag : uint8_t {
   END_STREAM = 0x01,   // DATA, HEADERS
   ACK = 0x01,          // SETTINGS, PING
   END_HEADERS = 0x04,  // HEADERS, PUSH_PROMISE, CONTINUATION
diff --git a/http2/http2_structures.h b/http2/http2_structures.h
index 0fa4dbba..54ca1266 100644
--- http2/http2_structures.h
+++ http2/http2_structures.h
@@ -46,7 +46,7 @@ struct QUICHE_EXPORT_PRIVATE Http2FrameHeader {
       : payload_length(payload_length),
         stream_id(stream_id),
         type(type),
-        flags(static_cast<Http2FrameFlag>(flags)) {
+        flags(flags) {
     QUICHE_DCHECK_LT(payload_length, static_cast<uint32_t>(1 << 24))
         << "Payload Length is only a 24 bit field\n"
         << ToString();
@@ -57,7 +57,7 @@ struct QUICHE_EXPORT_PRIVATE Http2FrameHeader {
   // Keep the current value of those flags that are in
   // valid_flags, and clear all the others.
   void RetainFlags(uint8_t valid_flags) {
-    flags = static_cast<Http2FrameFlag>(flags & valid_flags);
+    flags = (flags & valid_flags);
   }

   // Returns true if any of the flags in flag_mask are set,
@@ -128,7 +128,7 @@ struct QUICHE_EXPORT_PRIVATE Http2FrameHeader {
   // Flag bits, with interpretations that depend upon the frame type.
   // Flag bits not used by the frame type are cleared.
   // Third field in encoding.
-  Http2FrameFlag flags;
+  uint8_t flags;
 };

 QUICHE_EXPORT_PRIVATE bool operator==(const Http2FrameHeader& a,
