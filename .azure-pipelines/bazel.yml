parameters:
- name: ciTarget
  displayName: "CI target"
  type: string
  default: release
- name: artifactSuffix
  displayName: "Suffix of artifact"
  type: string
  default: ""

- name: bazelConfigRBE
  type: string
  default: --config=remote-ci --config=rbe-google --jobs=$(RbeJobs)

- name: rbe
  displayName: "Enable RBE"
  type: boolean
  default: true
- name: managedAgent
  type: boolean
  default: true
- name: bazelBuildExtraOptions
  type: string
  default: ""
- name: bazelStartupExtraOptions
  type: string
  default: ""
- name: bazelUseBES
  displayName: "Upload bazel run data to BES"
  type: boolean
  default: true
- name: envoyBuildFilterExample
  type: string
  default: ""
- name: runStep
  type: string
  default: true
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true
# Auth
- name: authGithub
  type: string
  default: ""

- name: env
  type: object
  default: {}

steps:
- bash: |
    echo "disk space at beginning of build:"
    df -h
    if [[ -e "$(Build.StagingDirectory)/bazel_root/base/external" ]]; then
        du -sh "$(Build.StagingDirectory)/bazel_root/base/external"
    fi
    if [[ -e "$(Build.StagingDirectory)/repository_cache" ]]; then
        du -sh "$(Build.StagingDirectory)/repository_cache"
    fi
  displayName: "Check disk space at beginning"
  condition: and(not(canceled()), ne('${{ parameters.runStep }}', ''), ne(variables.CACHE_RESTORED, 'true'))
- script: |
    if [[ "${{ parameters.bazelUseBES }}" == 'false' ]]; then
        unset GOOGLE_BES_PROJECT_ID
    fi
    ci/run_envoy_docker.sh 'ci/do_ci.sh ${{ parameters.ciTarget }}'
  condition: and(not(canceled()), ne('${{ parameters.runStep }}', ''), ne(variables.CACHE_RESTORED, 'true'))
  workingDirectory: $(Build.SourcesDirectory)
  env:
    ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
    ENVOY_BUILD_FILTER_EXAMPLE: ${{ parameters.envoyBuildFilterExample }}
    GITHUB_TOKEN: "${{ parameters.authGithub }}"
    BAZEL_STARTUP_EXTRA_OPTIONS: "${{ parameters.bazelStartupExtraOptions }}"
    ${{ if ne(parameters['cacheTestResults'], true) }}:
      BAZEL_NO_CACHE_TEST_RESULTS: 1
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      CI_TARGET_BRANCH: "origin/$(System.PullRequest.TargetBranch)"
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      CI_TARGET_BRANCH: "origin/$(Build.SourceBranchName)"
    # Any PR or CI run in envoy-presubmit uses the fake SCM hash
    ${{ if or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.DefinitionName'], 'envoy-presubmit')) }}:
      # sha1sum of `ENVOY_PULL_REQUEST`
      BAZEL_FAKE_SCM_REVISION: e3b4a6e9570da15ac1caffdded17a8bebdc7dfc9
    ${{ if parameters.rbe }}:
      GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
      ENVOY_RBE: "1"
      BAZEL_BUILD_EXTRA_OPTIONS: "${{ parameters.bazelConfigRBE }} ${{ parameters.bazelBuildExtraOptions }}"
    ${{ if eq(parameters.rbe, false) }}:
      BAZEL_BUILD_EXTRA_OPTIONS: "--config=ci ${{ parameters.bazelBuildExtraOptions }}"
      BAZEL_REMOTE_CACHE: $(LocalBuildCache)
    ${{ each var in parameters.env }}:
      ${{ var.key }}: ${{ var.value }}
  displayName: "Run CI script ${{ parameters.ciTarget }}"

- bash: |
    echo "disk space at end of build:"
    df -h

    for hprof in $(find "$(Build.StagingDirectory)" -name "*heapdump.hprof"); do
        echo
        mkdir -p $(Build.StagingDirectory)/envoy/hprof
        echo "Copying ${hprof}"
        cp -a $hprof $(Build.StagingDirectory)/envoy/hprof
    done

    du -sh "$(Build.StagingDirectory)"/bazel_root/base/external
    du -sh "$(Build.StagingDirectory)"/repository_cache

    cp -a "$(Build.StagingDirectory)/bazel_root/base/server/jvm.out" $(Build.StagingDirectory)/envoy

    if [[ "${{ parameters.artifactSuffix }}" == ".arm64" ]]; then
        # Dump bazel-remote logging (only required for arm/self-hosted).
        sudo systemctl status --no-pager bazel-remote > $(Build.StagingDirectory)/envoy/br.status
        sudo journalctl --no-pager -xu bazel-remote > $(Build.StagingDirectory)/envoy/br.journal
    fi
    echo
    du -ch "$(Build.StagingDirectory)" | grep -E "[0-9]{2,}M|[0-9]G"

    # Cleanup offending files with unicode names
    rm -rf $(Build.StagingDirectory)/bazel_root/base/external/go_sdk/test/fixedbugs
  displayName: "Check disk space at end"
  condition: and(not(canceled()), ne('${{ parameters.runStep }}', ''), ne(variables.CACHE_RESTORED, 'true'))
