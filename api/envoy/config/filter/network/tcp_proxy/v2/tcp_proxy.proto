syntax = "proto3";

package envoy.config.filter.network.tcp_proxy.v2;
option go_package = "v2";

import "envoy/config/filter/accesslog/v2/accesslog.proto";
import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/core/base.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: TCP Proxy]
// TCP Proxy :ref:`configuration overview <config_network_filters_tcp_proxy>`.

message TcpProxy {
  // The prefix to use when emitting :ref:`statistics
  // <config_network_filters_tcp_proxy_stats>`.
  string stat_prefix = 1 [(validate.rules).string.min_bytes = 1];

  oneof cluster_specifier {
    option (validate.required) = true;

    // The upstream cluster to connect to. Cluster matching is done via :ref:`filter
    // chain matching rules <envoy_api_msg_listener.FilterChainMatch>`.
    string cluster = 2 [(validate.rules).string.min_bytes = 1];

    // Multiple upstream clusters can be specified for a given route. The
    // request is routed to one of the upstream clusters based on weights
    // assigned to each cluster.
    //
    // .. note::
    //
    //  This field is ignored if the :ref:`cluster
    //  <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.cluster>`
    //  field is set.
    WeightedCluster weighted_clusters = 10;
  }

  // Optional endpoint metadata match criteria. Only endpoints in the upstream
  // cluster with metadata matching that set in metadata_match will be
  // considered. The filter name should be specified as *envoy.lb*.
  envoy.api.v2.core.Metadata metadata_match = 9;

  // The idle timeout for connections managed by the TCP proxy filter. The idle timeout
  // is defined as the period in which there are no bytes sent or received on either
  // the upstream or downstream connection. If not set, connections will never be closed
  // by the TCP proxy due to being idle.
  google.protobuf.Duration idle_timeout = 8
      [(validate.rules).duration.gt = {}, (gogoproto.stdduration) = true];

  // [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
  // filter. The idle timeout is defined as the period in which there is no
  // active traffic. If not set, there is no idle timeout. When the idle timeout
  // is reached the connection will be closed. The distinction between
  // downstream_idle_timeout/upstream_idle_timeout provides a means to set
  // timeout based on the last byte sent on the downstream/upstream connection.
  google.protobuf.Duration downstream_idle_timeout = 3;

  // [#not-implemented-hide:]
  google.protobuf.Duration upstream_idle_timeout = 4;

  // Configuration for :ref:`access logs <arch_overview_access_logs>`
  // emitted by the this tcp_proxy.
  repeated envoy.config.filter.accesslog.v2.AccessLog access_log = 5;

  reserved 6;

  // The maximum number of unsuccessful connection attempts that will be made before
  // giving up. If the parameter is not specified, 1 connection attempt will be made.
  google.protobuf.UInt32Value max_connect_attempts = 7 [(validate.rules).uint32.gte = 1];

  // Allows for specification of multiple upstream clusters along with weights
  // that indicate the percentage of traffic to be forwarded to each cluster.
  // The router selects an upstream cluster based on these weights.
  message WeightedCluster {
    message ClusterWeight {
      // Name of the upstream cluster.
      string name = 1 [(validate.rules).string.min_bytes = 1];

      // When a request matches the route, the choice of an upstream cluster is
      // determined by its weight. The sum of weights across all entries in the
      // clusters array determines the total weight.
      uint32 weight = 2 [(validate.rules).uint32.gte = 1];
    }

    // Specifies one or more upstream clusters associated with the route.
    repeated ClusterWeight clusters = 1 [(validate.rules).repeated .min_items = 1];
  }
}
