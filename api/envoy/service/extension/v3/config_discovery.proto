syntax = "proto3";

package envoy.service.extension.v3;

import "envoy/service/discovery/v3/discovery.proto";

import "google/api/annotations.proto";

import "envoy/annotations/resource.proto";
import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.service.extension.v3";
option java_outer_classname = "ConfigDiscoveryProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/service/extension/v3;extensionv3";
option java_generic_services = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Extension config discovery service (ECDS)]

// A service supports dynamically discover extension configuration and applies to
// Envoy. Currently, ECDS is supported in HTTP filter and Listener filter. Please check
// :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.
// The overall extension config discovery service works like this:
//
// 1. Envoy receives the ECDS configuration either from LDS or from static config, which has any
//    number of listener filters and HTTP filters configured as ECDS filter. The actual
//    configuration of these filters needs to be fetched from the xDS server.
// 2. Envoy then sends the DiscoveryRequest message to the xDS server to retrieve the configuration.
// 3. xDS server sends back the DiscoveryResponse to Envoy with the actual extension configuration.
// 4. Envoy instantiates the filter factories with the received configuration.
// 5. Next time when Envoy processing traffic, it builds the filter chains with the new configuration.

// Return extension configurations.
service ExtensionConfigDiscoveryService {
  option (envoy.annotations.resource).type = "envoy.config.core.v3.TypedExtensionConfig";

  rpc StreamExtensionConfigs(stream discovery.v3.DiscoveryRequest)
      returns (stream discovery.v3.DiscoveryResponse) {
  }

  rpc DeltaExtensionConfigs(stream discovery.v3.DeltaDiscoveryRequest)
      returns (stream discovery.v3.DeltaDiscoveryResponse) {
  }

  rpc FetchExtensionConfigs(discovery.v3.DiscoveryRequest)
      returns (discovery.v3.DiscoveryResponse) {
    option (google.api.http).post = "/v3/discovery:extension_configs";
    option (google.api.http).body = "*";
  }
}

// [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
// with importing services: https://github.com/google/protobuf/issues/4221 and
// protoxform to upgrade the file.
message EcdsDummy {
}
