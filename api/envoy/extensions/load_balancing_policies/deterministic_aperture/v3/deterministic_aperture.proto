syntax = "proto3";

package envoy.extensions.load_balancing_policies.deterministic_aperture.v3;

import "envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto";
import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.load_balancing_policies.deterministic_aperture.v3";
option java_outer_classname = "DeterministicApertureProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/load_balancing_policies/deterministic_aperture/v3;deterministic_aperturev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Deterministic Aperture Load Balancing Policy]
// [#not-implemented-hide:]

// Deterministic Aperture load balancing is designed to conserve connections between Envoy and
// backend instances. This is achieved by dividing the backends uniformly among participating peers.
// This way, we avoid a complete mesh of connections between Envoy and backends. The participating
// Envoy peers are placed on a ring that is conceptually laid on top of the Ring Hash of backends
// to determine their overlaps. By using the ring overlaps as a mechanism to divide the backends,
// the backends get divided as a fraction of their overlaps with each peer. The algorithm uses a
// uniform random distribution to select a backend from the range of overlapping backends. This
// along with P2C ensures uniform load distribution.

message DeterministicApertureLbConfig {
  // Hash ring configuration for the internal ring for endpoints.
  load_balancing_policies.ring_hash.v3.RingHash ring_config = 1;

  // Index of this peer (0 indexed).
  uint32 peer_index = 2;

  // Total number of peers participating in the algorithm (that share the outer ring).
  uint32 total_peers = 3;
}
