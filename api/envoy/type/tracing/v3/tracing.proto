syntax = "proto3";

package envoy.type.tracing.v3;

import "envoy/config/trace/v3/provider.proto";
import "envoy/type/tracing/v3/custom_tag.proto";
import "envoy/type/v3/percent.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.type.tracing.v3";
option java_outer_classname = "TracingProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/type/tracing/v3;tracingv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Tracing config]

// Describes tracing behavior
// [#next-free-field: 10]
message Tracing {
  enum OperationName {
    // The HTTP listener is used for ingress/incoming requests.
    INGRESS = 0;

    // The HTTP listener is used for egress/outgoing requests.
    EGRESS = 1;
  }

  reserved 1, 2;

  reserved "operation_name", "request_headers_for_tags";

  // Target percentage of requests managed by this HTTP connection manager that will be force
  // traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
  // header is set. This field is a direct analog for the runtime variable
  // 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
  // <config_http_conn_man_runtime>`.
  // Default: 100%
  type.v3.Percent client_sampling = 3;

  // Target percentage of requests managed by this HTTP connection manager that will be randomly
  // selected for trace generation, if not requested by the client or not forced. This field is
  // a direct analog for the runtime variable 'tracing.random_sampling' in the
  // :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
  // Default: 100%
  type.v3.Percent random_sampling = 4;

  // Target percentage of requests managed by this HTTP connection manager that will be traced
  // after all other sampling checks have been applied (client-directed, force tracing, random
  // sampling). This field functions as an upper limit on the total configured sampling rate. For
  // instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
  // of client requests with the appropriate headers to be force traced. This field is a direct
  // analog for the runtime variable 'tracing.global_enabled' in the
  // :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
  // Default: 100%
  type.v3.Percent overall_sampling = 5;

  // Whether to annotate spans with additional data. If true, spans will include logs for stream
  // events.
  bool verbose = 6;

  // Maximum length of the request path to extract and include in the HttpUrl tag. Used to
  // truncate lengthy request paths to meet the needs of a tracing backend.
  // Default: 256
  google.protobuf.UInt32Value max_path_tag_length = 7;

  // A list of custom tags with unique tag name to create tags for the active span.
  repeated CustomTag custom_tags = 8;

  // Configuration for an external tracing provider.
  // If not specified, no tracing will be performed.
  //
  // .. attention::
  //   Please be aware that ``envoy.tracers.opencensus`` provider can only be configured once
  //   in Envoy lifetime.
  //   Any attempts to reconfigure it or to use different configurations for different HCM filters
  //   will be rejected.
  //   Such a constraint is inherent to OpenCensus itself. It cannot be overcome without changes
  //   on OpenCensus side.
  config.trace.v3.Provider provider = 9;
}
