syntax = "proto3";

package envoy.config.filter.http.ext_authz.v2;
option java_package = "io.envoyproxy.envoy.config.filter.http.ext_authz.v2";
option java_multiple_files = true;
option go_package = "v2";

import "envoy/api/v2/core/base.proto";
import "envoy/api/v2/core/grpc_service.proto";
import "envoy/api/v2/core/http_uri.proto";

import "envoy/type/matcher/string.proto";

import "validate/validate.proto";

// [#protodoc-title: External Authorization]
// ExtAuthz :ref:`configuration overview <config_http_filters_ext_authz>`.
message ExtAuthz {

  // External authorization service configuration.
  oneof services {
    // gRPC service configuration (default timeout: 200ms).
    envoy.api.v2.core.GrpcService grpc_service = 1;

    // HTTP service configuration (default timeout: 200ms).
    HttpService http_service = 3;
  }

  //  Setting for bypassin the authorization process.
  //
  //  1. When true, the filter will allow trafic if communication between Envoy and the
  //  authorization service failed, or if any of HTTP 5xx error occurs.
  //  2. When false, if an HTTP error or a communication failure occurs, the filter will respond
  //  with *Forbidden* status and it will *not* allow the request to proceed.
  //
  // Note that filter will produce stats on error. See *Statistics* at :ref:`configuration overview
  // <config_http_filters_ext_authz>`.
  bool failure_mode_allow = 2;
}

// HttpService is used for raw HTTP comunication between the filter and the authorization service.
// When configured, the filter will parse the client request and use these attributes to call the
// authorization server. Depending on the response, the filter may reject or accept the client
// request. Note that in any of these events, metadata can be added, removed or overriden by the
// filter:
//
// *On authorization request*, a list of allowed request headers may be supplied. See
// :ref:`allowed_headers
// <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationRequest.allowed_headers>`
// for details. Additional headers metadata maybe added to the authorization resquest. See
// :ref:`headers_to_add
// <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationRequest.headers_to_add>` for
// details.
//
// On authorization response status HTTP 200 Ok, the filter will allow traffic to the upstream and
// addional headers metadata maybe added to the original client request. See
// :ref:`allowed_upstream_headers
// <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationResponse.allowed_upstream_headers>`
// for details.
//
// On other authorization response statuses, the filter will respond
// with HTTP 403 Forbidden status by default. Additional headers metadata as well as body maybe
// added to the client's response. See :ref:`allowed_client_headers
// <envoy_api_field_config.filter.http.ext_authz.v2.AuthorizationResponse.allowed_client_headers>`
// for details.
message HttpService {
  // Sets the HTTP server URI which the authorization requests must be sent to.
  envoy.api.v2.core.HttpUri server_uri = 1;

  // Sets a prefix to the value of authorization request header *Path*.
  string path_prefix = 2;

  reserved 3;
  reserved 4;
  reserved 5;
  reserved 6;

  // Settings used for controlling authorization request metadata.
  AuthorizationRequest authorization_request = 7;

  // Settings used for controlling authorization response metadata.
  AuthorizationResponse authorization_response = 8;
}

message AuthorizationRequest {
  // All client request headers that are a match in the supplied :ref:`list
  // <envoy_api_msg_type.matcher.ListStringMatcher>` will be included to the authorization request.
  // In addition to the supplied matchers:
  //
  // 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
  //
  // 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
  // a message body.
  //
  envoy.type.matcher.ListStringMatcher allowed_headers = 1;

  // Sets a list of headers that will be included to the request to authorization service. Note that
  // client request of the same key will be overriden.
  repeated envoy.api.v2.core.HeaderValue headers_to_add = 2;
}

message AuthorizationResponse {
  // Sets a list of matchers that are used to determine which authorization response headers should
  // be forwarded *from the filter* to the upstream service only when the HTTP status is a 200 OK.
  // Note that these headers will override that the original request headers when respectively
  // matched.
  envoy.type.matcher.ListStringMatcher allowed_upstream_headers = 1;

  // Sets a list of keys that are used to determine which authorization response headers should
  // be forwarded *from the filter* to the client when the HTTP status is *NOT* a 200 OK. Note that
  // when this list is empty, all the authorization response headers, except *Authority* will be
  // sent to the client (default). When a header is included in this list, *Path*, *Status*,
  // *Content-Length*, *WWWAuthenticate* and *Location* are automatically added.
  envoy.type.matcher.ListStringMatcher allowed_client_headers = 2;
}

// Extra settings on a per virtualhost/route/weighter-cluster level.
message ExtAuthzPerRoute {
  oneof override {
    option (validate.required) = true;

    // Disable the ext auth filter for this particular vhost or route.
    // If disabled is specified in multiple per-filter-configs, the most specific one will be used.
    bool disabled = 1 [(validate.rules).bool.const = true];

    // Check request settings for this route.
    CheckSettings check_settings = 2 [(validate.rules).message.required = true];
  }
}

// Extra settings for the check request. You can use this to provide extra context for the
// ext-authz server on specific virtual hosts \ routes. For example, adding a context extension on
// the virtual host level can give the ext-authz server information on what virtual host is used
// without needing to parse the host header.
// If CheckSettings is specified in multiple per-filter-configs, they will be merged in order,
// and the result will be be used.
message CheckSettings {
  // Context extensions to set on the CheckRequest's
  // :ref:`AttributeContext.context_extensions<envoy_api_field_service.auth.v2.AttributeContext.context_extensions>`
  //
  // Merge semantics for this field are such that keys from more specific configs override.
  //
  // .. note::
  //
  //   These settings are only applied to a filter configured with a
  //   :ref:`grpc_service<envoy_api_field_config.filter.http.ext_authz.v2.ExtAuthz.grpc_service>`.
  map<string, string> context_extensions = 1;
}
