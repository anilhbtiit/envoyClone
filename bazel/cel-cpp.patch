diff --git a/base/internal/value.h b/base/internal/value.h
index fb3e845..a08a5f7 100644
--- a/base/internal/value.h
+++ b/base/internal/value.h
@@ -55,13 +55,9 @@ NativeTypeId GetListValueTypeId(const ListValue& list_value);
 
 NativeTypeId GetMapValueTypeId(const MapValue& map_value);
 
-static_assert(std::is_trivially_copyable_v<absl::Duration>,
-              "absl::Duration must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Duration>,
               "absl::Duration must be trivially destructible.");
 
-static_assert(std::is_trivially_copyable_v<absl::Time>,
-              "absl::Time must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Time>,
               "absl::Time must be trivially destructible.");
 
diff --git a/base/value.h b/base/value.h
index 5d94d5e..d53370c 100644
--- a/base/value.h
+++ b/base/value.h
@@ -336,8 +336,6 @@ CEL_INTERNAL_VALUE_DECL(Value);
 }  // namespace cel
 
 #define CEL_INTERNAL_SIMPLE_VALUE_STANDALONES(value_class)       \
-  static_assert(std::is_trivially_copyable_v<value_class>,       \
-                #value_class " must be trivially copyable");     \
   static_assert(std::is_trivially_destructible_v<value_class>,   \
                 #value_class " must be trivially destructible"); \
                                                                  \
diff --git a/common/memory.h b/common/memory.h
index 35a766b..c32e039 100644
--- a/common/memory.h
+++ b/common/memory.h
@@ -552,10 +552,10 @@ class PoolingMemoryManager {
     ABSL_DCHECK(absl::has_single_bit(alignment))
         << "alignment must be a power of 2";
     if (ptr == nullptr) {
-      ABSL_DCHECK_EQ(size, 0);
+      ABSL_DCHECK_EQ(size, size_t(0));
       return false;
     }
-    ABSL_DCHECK_GT(size, 0);
+    ABSL_DCHECK_GT(size, size_t(0));
     return DeallocateImpl(ptr, size, alignment);
   }
 
diff --git a/common/native_type.h b/common/native_type.h
index b965411..94750f6 100644
--- a/common/native_type.h
+++ b/common/native_type.h
@@ -96,7 +96,7 @@ class ABSL_ATTRIBUTE_TRIVIAL_ABI NativeTypeId final {
           std::negation<HasNativeTypeTraitsId<absl::remove_cvref_t<T>>>,
           std::is_final<absl::remove_cvref_t<T>>>,
       NativeTypeId>
-  Of(const T& type) noexcept {
+  Of(const T&) noexcept {
     static_assert(!std::is_pointer_v<T>);
     static_assert(std::is_same_v<T, std::decay_t<T>>);
     static_assert(!std::is_same_v<NativeTypeId, std::decay_t<T>>);
