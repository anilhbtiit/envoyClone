#ifndef SOURCE_EXTENSIONS_URL_TEMPLATE_URL_TEMPLATE_MATCHING_H
#define SOURCE_EXTENSIONS_URL_TEMPLATE_URL_TEMPLATE_MATCHING_H

#include <string>

#include "envoy/extensions/url_template/v3/route_url_rewrite_pattern.pb.h"

#include "source/extensions/url_template/url_template_matching_internal.h"

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "envoy/router/url_template.h"

namespace Envoy {
namespace matching {

enum class RewriteStringKind { kVariable, kLiteral };

struct RewritePatternSegment {
  RewritePatternSegment(absl::string_view str, RewriteStringKind kind) : str(str), kind(kind) {}
  absl::string_view str;
  RewriteStringKind kind;
};

class UrlTemplatePredicate : public Router::UrlTemplatePredicate {
public:
  explicit UrlTemplatePredicate(absl::string_view url_pattern, absl::string_view url_rewrite_pattern)
      : url_pattern_(url_pattern), url_rewrite_pattern_(url_rewrite_pattern),
        matching_pattern_regex_(RE2(convertURLPatternSyntaxToRegex(url_pattern).value())) {}

  absl::string_view name() const override { return "envoy.url_template"; }

  // Returns if the regex pattern matches the given regex from constructor.
  bool match(absl::string_view pattern) const;

  // Returns the regex pattern that is equivalent to the given url_pattern.
  // Used in the config pipeline to translate user given url pattern to
  // the safe regex Envoy can understand. Strips away any variable captures.
  absl::StatusOr<std::string> convertURLPatternSyntaxToRegex(absl::string_view url_pattern) const;

  // Helper function that parses the pattern and breaks it down to either
  // literals or variable names. To be used by ParseRewritePattern().
  // Exposed here so that the validator for the rewrite pattern can also
  // use it.
  absl::StatusOr<std::vector<RewritePatternSegment>> parseRewritePatternHelper(absl::string_view pattern)  const;

  // Returns the parsed Url rewrite pattern to be used by
  // RewriteURLTemplatePattern()  |capture_regex| should
  // be the regex generated by ConvertURLPatternSyntaxToRegex().
  absl::StatusOr<envoy::extensions::url_template::v3::RouteUrlRewritePattern>
  parseRewritePattern(absl::string_view pattern, absl::string_view capture_regex) const;

  // Returns the rewritten URL path based on the given parsed rewrite pattern.
  // Used for template-based URL rewrite.
  absl::StatusOr<std::string> rewriteURLTemplatePattern(
      absl::string_view url, absl::string_view capture_regex,
      const envoy::extensions::url_template::v3::RouteUrlRewritePattern& rewrite_pattern) const;

  // Returns if provided template match pattern is valid
  bool isValidPathTemplateMatchPattern(const std::string& path_template_match);

  // Returns if provided rewrite pattern is valid
  bool isValidPathTemplateRewritePattern(const std::string& path_template_rewrite);

  // Returns if path_template and rewrite_template have valid variables
  bool isValidSharedVariableSet(const std::string& path_template_rewrite,
                                absl::string_view capture_regex);

  absl::StatusOr<std::string> rewritePattern(absl::string_view current_pattern,
                                             absl::string_view matched_path) const;

public:
    absl::string_view url_pattern_;

private:
  // move into library
  absl::string_view url_rewrite_pattern_;
  RE2 matching_pattern_regex_;

};

} // namespace matching
} // namespace Envoy

#endif // SOURCE_EXTENSIONS_URL_TEMPLATE_URL_TEMPLATE_MATCHING_H
