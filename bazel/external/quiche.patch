diff --git a/http2/adapter/callback_visitor.cc b/http2/adapter/callback_visitor.cc
--- http2/adapter/callback_visitor.cc
+++ http2/adapter/callback_visitor.cc
@@ -254,18 +254,20 @@ void CallbackVisitor::OnRstStream(Http2S
   }
 }

-void CallbackVisitor::OnCloseStream(Http2StreamId stream_id,
+bool CallbackVisitor::OnCloseStream(Http2StreamId stream_id,
                                     Http2ErrorCode error_code) {
+  int result = 0;
   if (callbacks_->on_stream_close_callback) {
     QUICHE_VLOG(1) << "OnCloseStream(stream_id: " << stream_id
                    << ", error_code: " << int(error_code) << ")";
-    callbacks_->on_stream_close_callback(
+    result = callbacks_->on_stream_close_callback(
         nullptr, stream_id, static_cast<uint32_t>(error_code), user_data_);
   }
   stream_map_.erase(stream_id);
   if (stream_close_listener_) {
     stream_close_listener_(stream_id);
   }
+  return result == 0;
 }

 void CallbackVisitor::OnPriorityForStream(Http2StreamId /*stream_id*/,
diff --git a/http2/adapter/callback_visitor.h b/http2/adapter/callback_visitor.h
--- http2/adapter/callback_visitor.h
+++ http2/adapter/callback_visitor.h
@@ -47,7 +47,7 @@ class QUICHE_EXPORT_PRIVATE CallbackVisi
                        absl::string_view data) override;
   void OnEndStream(Http2StreamId stream_id) override;
   void OnRstStream(Http2StreamId stream_id, Http2ErrorCode error_code) override;
-  void OnCloseStream(Http2StreamId stream_id,
+  bool OnCloseStream(Http2StreamId stream_id,
                      Http2ErrorCode error_code) override;
   void OnPriorityForStream(Http2StreamId stream_id,
                            Http2StreamId parent_stream_id,
diff --git a/http2/adapter/http2_visitor_interface.h b/http2/adapter/http2_visitor_interface.h
--- http2/adapter/http2_visitor_interface.h
+++ http2/adapter/http2_visitor_interface.h
@@ -167,7 +167,7 @@ class QUICHE_EXPORT_PRIVATE Http2Visitor
                            Http2ErrorCode error_code) = 0;

   // Called when a stream is closed.
-  virtual void OnCloseStream(Http2StreamId stream_id,
+  virtual bool OnCloseStream(Http2StreamId stream_id,
                              Http2ErrorCode error_code) = 0;

   // Called when the connection receives a PRIORITY frame.
diff --git a/http2/adapter/mock_http2_visitor.h b/http2/adapter/mock_http2_visitor.h
--- http2/adapter/mock_http2_visitor.h
+++ http2/adapter/mock_http2_visitor.h
@@ -23,6 +23,7 @@ class QUICHE_NO_EXPORT MockHttp2Visitor
     ON_CALL(*this, OnDataPaddingLength).WillByDefault(testing::Return(true));
     ON_CALL(*this, OnBeginDataForStream).WillByDefault(testing::Return(true));
     ON_CALL(*this, OnDataForStream).WillByDefault(testing::Return(true));
+    ON_CALL(*this, OnCloseStream).WillByDefault(testing::Return(true));
     ON_CALL(*this, OnGoAway).WillByDefault(testing::Return(true));
     ON_CALL(*this, OnInvalidFrame).WillByDefault(testing::Return(true));
     ON_CALL(*this, OnMetadataForStream).WillByDefault(testing::Return(true));
@@ -67,10 +68,8 @@ class QUICHE_NO_EXPORT MockHttp2Visitor
               (Http2StreamId stream_id, Http2ErrorCode error_code),
               (override));

-  MOCK_METHOD(void,
-              OnCloseStream,
-              (Http2StreamId stream_id, Http2ErrorCode error_code),
-              (override));
+  MOCK_METHOD(bool, OnCloseStream,
+              (Http2StreamId stream_id, Http2ErrorCode error_code), (override));

   MOCK_METHOD(void,
               OnPriorityForStream,
diff --git a/http2/adapter/nghttp2_adapter_test.cc b/http2/adapter/nghttp2_adapter_test.cc
--- http2/adapter/nghttp2_adapter_test.cc
+++ http2/adapter/nghttp2_adapter_test.cc
@@ -211,6 +211,7 @@ TEST(NgHttp2AdapterTest, ClientHandlesFr
       .WillOnce(
           [&adapter](Http2StreamId stream_id, Http2ErrorCode /*error_code*/) {
             adapter->RemoveStream(stream_id);
+            return true;
           });
   EXPECT_CALL(visitor, OnFrameHeader(0, 19, GOAWAY, 0));
   EXPECT_CALL(visitor,
@@ -254,6 +255,7 @@ TEST(NgHttp2AdapterTest, ClientHandlesFr
       .WillOnce(
           [&adapter](Http2StreamId stream_id, Http2ErrorCode /*error_code*/) {
             adapter->RemoveStream(stream_id);
+            return true;
           });
   EXPECT_CALL(visitor, OnFrameHeader(5, 4, RST_STREAM, 0));
   EXPECT_CALL(visitor, OnRstStream(5, Http2ErrorCode::REFUSED_STREAM));
@@ -261,6 +263,7 @@ TEST(NgHttp2AdapterTest, ClientHandlesFr
       .WillOnce(
           [&adapter](Http2StreamId stream_id, Http2ErrorCode /*error_code*/) {
             adapter->RemoveStream(stream_id);
+            return true;
           });
   adapter->ProcessBytes(TestFrameSequence()
                             .Data(1, "", true)
diff --git a/http2/adapter/nghttp2_callbacks.cc b/http2/adapter/nghttp2_callbacks.cc
--- http2/adapter/nghttp2_callbacks.cc
+++ http2/adapter/nghttp2_callbacks.cc
@@ -252,8 +252,9 @@ int OnStreamClosed(nghttp2_session* /* s
                    void* user_data) {
   QUICHE_CHECK_NE(user_data, nullptr);
   auto* visitor = static_cast<Http2VisitorInterface*>(user_data);
-  visitor->OnCloseStream(stream_id, ToHttp2ErrorCode(error_code));
-  return 0;
+  const bool result =
+      visitor->OnCloseStream(stream_id, ToHttp2ErrorCode(error_code));
+  return result ? 0 : NGHTTP2_ERR_CALLBACK_FAILURE;
 }

 int OnExtensionChunkReceived(nghttp2_session* /*session*/,
diff --git a/http2/adapter/oghttp2_session.cc b/http2/adapter/oghttp2_session.cc
--- http2/adapter/oghttp2_session.cc
+++ http2/adapter/oghttp2_session.cc
@@ -1699,7 +1699,11 @@ void OgHttp2Session::StartPendingStreams

 void OgHttp2Session::CloseStream(Http2StreamId stream_id,
                                  Http2ErrorCode error_code) {
-  visitor_.OnCloseStream(stream_id, error_code);
+  const bool result = visitor_.OnCloseStream(stream_id, error_code);
+  if (!result) {
+    latched_error_ = true;
+    decoder_.StopProcessing();
+  }
   stream_map_.erase(stream_id);
   trailers_ready_.erase(stream_id);
   metadata_ready_.erase(stream_id);
diff --git a/http2/adapter/recording_http2_visitor.cc b/http2/adapter/recording_http2_visitor.cc
--- http2/adapter/recording_http2_visitor.cc
+++ http2/adapter/recording_http2_visitor.cc
@@ -90,10 +90,11 @@ void RecordingHttp2Visitor::OnRstStream(
                                     Http2ErrorCodeToString(error_code)));
 }

-void RecordingHttp2Visitor::OnCloseStream(Http2StreamId stream_id,
+bool RecordingHttp2Visitor::OnCloseStream(Http2StreamId stream_id,
                                           Http2ErrorCode error_code) {
   events_.push_back(absl::StrFormat("OnCloseStream %d %s", stream_id,
                                     Http2ErrorCodeToString(error_code)));
+  return true;
 }

 void RecordingHttp2Visitor::OnPriorityForStream(Http2StreamId stream_id,
diff --git a/http2/adapter/recording_http2_visitor.h b/http2/adapter/recording_http2_visitor.h
--- http2/adapter/recording_http2_visitor.h
+++ http2/adapter/recording_http2_visitor.h
@@ -41,7 +41,7 @@ class QUICHE_NO_EXPORT RecordingHttp2Vis
                        absl::string_view data) override;
   void OnEndStream(Http2StreamId stream_id) override;
   void OnRstStream(Http2StreamId stream_id, Http2ErrorCode error_code) override;
-  void OnCloseStream(Http2StreamId stream_id,
+  bool OnCloseStream(Http2StreamId stream_id,
                      Http2ErrorCode error_code) override;
   void OnPriorityForStream(Http2StreamId stream_id,
                            Http2StreamId parent_stream_id,