syntax = "proto3";

package envoy.extensions.filters.http.cache.v3;

import "envoy/config/route/v3alpha/route_components.proto";
import "envoy/type/matcher/v3alpha/string.proto";

import "udpa/annotations/versioning.proto";

import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.cache.v3";
option java_outer_classname = "CacheProto";
option java_multiple_files = true;

// [#protodoc-title: HTTP Cache Filter]
// HTTP Cache Filter :ref:`overview <config_http_filters_cache>`.
// [#extension: envoy.filters.http.cache]
message CacheConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.http.cache.v2.CacheConfig";

  // Modifies cache key creation by restricting which parts of the URL are included.
  message KeyCreatorParams {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.filter.http.cache.v2.CacheConfig.KeyCreatorParams";

    // If true, exclude the URL scheme from the cache key. Set to true if your origins always
    // produce the same response for http and https requests.
    bool exclude_scheme = 1;

    // If true, exclude the host from the cache key. Set to true if your origins' responses don't
    // ever depend on host.
    bool exclude_host = 2;

    // If query_parameters_included is nonempty, only query parameters matched
    // by one or more of its matchers are included in the cache key. Any other
    // query params will not affect cache lookup.
    repeated config.route.v3alpha.QueryParameterMatcher query_parameters_included = 3;

    // If query_parameters_excluded is nonempty, query parameters matched by one
    // or more of its matchers are excluded from the cache key (even if also
    // matched by query_parameters_included), and will not affect cache lookup.
    repeated config.route.v3alpha.QueryParameterMatcher query_parameters_excluded = 4;
  }

  // Name of cache implementation to use.
  string name = 1 [(validate.rules).string = {min_bytes: 1}];

  // TODO(toddmgreer) implement vary headers
  //
  // List of allowed Vary headers. Headers matched by allowed_vary_headers will
  // be provided to caches in lookups, and the cache filter will only insert
  // responses whose Vary headers (if any) are matched my a matcher in this
  // list. If allowed_vary_headers is empty, responses with 'vary' headers will
  // not be cached.
  repeated type.matcher.v3alpha.StringMatcher allowed_vary_headers = 2;

  // TODO(toddmgreer) implement key customization
  //
  // Modifies cache key creation by restricting which parts of the URL are included.
  KeyCreatorParams key_creator_params = 3;

  // TODO(toddmgreer) implement size limit
  //
  // Max body size the cache filter will insert into a cache.
  uint32 max_body_bytes = 4;
}
