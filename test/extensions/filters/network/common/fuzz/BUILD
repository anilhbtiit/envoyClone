load(
    "//bazel:envoy_build_system.bzl",
    "envoy_cc_fuzz_test",
    "envoy_cc_test_library",
    "envoy_package",
    "envoy_proto_library",
)
load(
    "filter_fuzz_support.bzl",
    "fuzz_filters_targets",
    "generate_from_template",
)

licenses(["notice"])  # Apache 2

envoy_package()

envoy_proto_library(
    name = "network_readfilter_fuzz_proto",
    srcs = ["network_readfilter_fuzz.proto"],
    deps = [
        "//test/fuzz:common_proto",
        "@envoy_api//envoy/config/listener/v3:pkg",
    ],
)

envoy_proto_library(
    name = "network_writefilter_fuzz_proto",
    srcs = ["network_writefilter_fuzz.proto"],
    deps = [
        "//test/fuzz:common_proto",
        "@envoy_api//envoy/config/listener/v3:pkg",
    ],
)

_readfilter_fuzz_filters = [
    "envoy.filters.network.client_ssl_auth",
    "envoy.filters.network.ext_authz",
    "envoy.filters.network.envoy_mobile_http_connection_manager",
    # A dedicated http_connection_manager fuzzer can be found in
    # test/common/http/conn_manager_impl_fuzz_test.cc
    "envoy.filters.network.http_connection_manager",
    "envoy.filters.network.local_ratelimit",
    "envoy.filters.network.rbac",
    # TODO(asraa): Remove when fuzzer sets up connections for TcpProxy properly.
    # "envoy.filters.network.tcp_proxy",
]

envoy_cc_test_library(
    name = "uber_readfilter_lib",
    srcs = [
        "uber_per_readfilter.cc",
        "uber_readfilter.cc",
    ],
    hdrs = ["uber_readfilter.h"],
    deps = [
        ":network_readfilter_fuzz_proto_cc_proto",
        "//source/common/config:utility_lib",
        "//source/common/network:address_lib",
        "//source/extensions/filters/common/ratelimit:ratelimit_lib",
        "//source/extensions/filters/network:well_known_names",
        "//test/extensions/filters/common/ext_authz:ext_authz_test_common",
        "//test/extensions/filters/network/common/fuzz/utils:network_filter_fuzzer_fakes_lib",
        "//test/fuzz:utility_lib",
        "//test/mocks/network:network_mocks",
        "@envoy_api//envoy/extensions/filters/network/direct_response/v3:pkg_cc_proto",
        "@envoy_api//envoy/extensions/filters/network/local_ratelimit/v3:pkg_cc_proto",
        "@envoy_api//envoy/extensions/filters/network/thrift_proxy/v3:pkg_cc_proto",
    ],
)

envoy_cc_fuzz_test(
    name = "network_readfilter_fuzz_test",
    srcs = ["network_readfilter_fuzz_test.cc"],
    corpus = "network_readfilter_corpus",
    dictionaries = ["network_readfilter_fuzz_test.dict"],
    deps = [
        ":uber_readfilter_lib",
        "//source/common/config:utility_lib",
        "//test/config:utility_lib",
        "//test/test_common:test_runtime_lib",
    ] + fuzz_filters_targets(_readfilter_fuzz_filters),
)

_writefilter_fuzz_filters = [
    "envoy.filters.network.zookeeper_proxy",
    "envoy.filters.network.kafka_broker",
    "envoy.filters.network.mongo_proxy",
    "envoy.filters.network.mysql_proxy",
    # TODO(jianwendong) Add "NetworkFilterNames::get().Postgres" after it
    # supports untrusted data.
]

generate_from_template(
    name = "uber_per_writefilter",
    filters = _writefilter_fuzz_filters,
    template_file = "uber_per_writefilter.tmpl.cc",
)

envoy_cc_test_library(
    name = "uber_writefilter_lib",
    srcs = [
        "uber_per_writefilter.cc",
        "uber_writefilter.cc",
    ],
    hdrs = ["uber_writefilter.h"],
    deps = [
        ":network_writefilter_fuzz_proto_cc_proto",
        "//source/common/config:utility_lib",
        "//source/extensions/filters/network:well_known_names",
        "//test/extensions/filters/network/common/fuzz/utils:network_filter_fuzzer_fakes_lib",
        "//test/fuzz:utility_lib",
        "//test/mocks/network:network_mocks",
    ],
)

envoy_cc_fuzz_test(
    name = "network_writefilter_fuzz_test",
    srcs = ["network_writefilter_fuzz_test.cc"],
    corpus = "network_writefilter_corpus",
    # All Envoy network filters must be linked to the test in order for the fuzzer to pick
    # these up via the NamedNetworkFilterConfigFactory.
    deps = [
        ":uber_writefilter_lib",
        "//source/common/config:utility_lib",
        "//test/config:utility_lib",
    ] + fuzz_filters_targets(_writefilter_fuzz_filters),
)
