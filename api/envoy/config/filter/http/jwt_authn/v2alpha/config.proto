syntax = "proto3";

package envoy.config.filter.http.jwt_authn.v2alpha;

import "envoy/api/v2/route/route.proto";
import "envoy/config/filter/http/common/v1alpha/config.proto";

// This is the Envoy HTTP filter config for JWT authentication.
// [#not-implemented-hide:]
message JwtAuthentication {
  // Map of JWT rules for handling JWT validation and forwarding.
  // The Key for each entry MUST exactly match the issuer field defined in the JWTVerificationRule.
  // Example:
  //
  // .. code-block:: yaml
  //
  //  accounts.google.com:
  //     verifier:
  //       issuer: accounts.google.com
  //       audiences:
  //       - bookstore_android.apps.googleusercontent.com
  //         bookstore_web.apps.googleusercontent.com
  //       remote_jwks:
  //       - http_uri:
  //         - uri: https://accounts.google.com/.well-known/openid-configuration
  //           cluster: google_jwks_cluster
  //         cache_duration:
  //         - seconds: 300
  //     forwarder:
  //       forward: true
  //       forward_payload_header: x-google-token
  //  accounts.acme.com:
  //     verifier:
  //       issuer: accounts.acme.com
  //       audiences:
  //       - bookstore.acme.com
  //       remote_jwks:
  //       - http_uri:
  //         - uri: https://accounts.acme.com/.well-known/openid-configuration
  //           cluster: acme_jwks_cluster
  //         cache_duration:
  //         - seconds: 600
  //     forwarder:
  //       forward: true
  //       forward_payload_header: x-acme-token
  //
  map<string, envoy.config.filter.http.common.v1alpha.JwtRule> rules = 1;

  // If true, the request is allowed if JWT is missing or JWT verification fails.
  // Default is false, a request without JWT or failed JWT verification is not allowed.
  bool allow_missing_or_failed = 2;

  // This field lists the patterns allowed to bypass JWT verification. This only applies when
  // `allow_missing_or_failed_jwt` is false. Under this config, if a request doesn't have JWT, it
  // will be rejected. But some requests still needed to be forwarded without JWT, such as OPTIONS
  // for CORS and some health checking paths.
  //
  // Examples: bypass all CORS options requests
  //
  // .. code-block:: yaml
  //
  //   bypass:
  //   - headers:
  //     - name: :method
  //       value: OPTIONS
  //   - headers:
  //     - name: :path
  //       regex_match: /.*
  //
  // Examples: bypass /healthz check
  //
  // .. code-block:: yaml
  //
  //   bypass:
  //   - headers:
  //     - name: :method
  //       value: GET
  //   - headers:
  //     - name: :path
  //       exact_match: /healthz
  //
  repeated envoy.api.v2.route.RouteMatch bypass = 3;
}
