diff --git a/BUILD.bazel b/BUILD.bazel
index c57dc9f..3536c28 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -1,3 +1,5 @@
+load("@envoy//bazel:envoy_build_system.bzl", "envoy_cmake")
+
 cc_library(
     name = "opentracing",
     srcs = glob(["src/**/*.cpp"], exclude=["src/dynamic_load_unsupported.cpp", "src/dynamic_load_windows.cpp"]),
@@ -10,32 +12,65 @@ cc_library(
     deps = [
       "//3rd_party:expected",
       "//3rd_party:variant",
+      ":generate_version_h",
     ],
     linkopts = [
       "-ldl",
     ],
 )
 
-genrule(
-    name = "generate_version_h",
+cc_library(
+    name = "opentracing_base",
+    strip_include_prefix = "include",
+    deps = [
+      "//3rd_party:expected",
+      "//3rd_party:variant",
+    ],
+)
+
+filegroup(
+    name = "build_files",
     srcs = glob([
         "*",
         "cmake/*",
         "src/**/*.cpp",
-    ]),
-    outs = [
-      "include/opentracing/config.h",
-      "include/opentracing/version.h"
+        "include/**",
+        "3rd_party/**",
+    ]) + [
+       "//3rd_party:expected",
+       "//3rd_party:variant",
     ],
+)
+
+envoy_cmake(
+    name = "generate_version_h",
+    cache_entries = {
+        "CMAKE_BUILD_TYPE": "Release",
+        "BUILD_SHARED_LIBS": "OFF",
+        "BUILD_TESTING": "OFF",
+        "BUILD_MOCKTRACER": "OFF",
+        "CMAKE_ENABLE_EXPORTS": "OFF",
+        "ENABLE_LINTING": "OFF",
+    },
+    linkopts = ["-fno-sanitize=vptr,function"],
+    copts = ["-fno-sanitize=vptr,function"],
+    default_cache_entries = {},
+    out_headers_only = True,
+    lib_source = ":build_files",
+    deps = [":opentracing_base"],
+    tags = ["no-asan"],
+)
+
+genrule(
+    name = "headers",
+    exec_tools = [":generate_version_h"],
     cmd = """
-    TEMP_DIR=$$(mktemp -d)
-    CONFIG_H_OUT=$${PWD}/$(location :include/opentracing/config.h)
-    VERSION_H_OUT=$${PWD}/$(location :include/opentracing/version.h)
-    OPENTRACING_ROOT=$$(dirname $${PWD}/$(location :CMakeLists.txt))
-    cd $$TEMP_DIR
-    cmake -DBUILD_TESTING=OFF -DBUILD_MOCKTRACER=OFF -L $$OPENTRACING_ROOT
-    mv include/opentracing/config.h $$CONFIG_H_OUT
-    mv include/opentracing/version.h $$VERSION_H_OUT
-    rm -rf $$TEMP_DIR
+        INCLUDE_DIR=$$(dirname $(location include/opentracing/config.h)) \
+        && find . -name "config.h" | xargs -I{} cp -a {} $$INCLUDE_DIR \
+        && find . -name "version.h" | xargs -I{} cp -a {} $$INCLUDE_DIR
     """,
+    outs = [
+        "include/opentracing/config.h",
+        "include/opentracing/version.h",
+    ],
 )
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1721fb3..a1b3fa1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -52,7 +52,7 @@ if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
 elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
 elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
-  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_RELEASE} -D_SCL_SECURE_NO_WARNINGS")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_SCL_SECURE_NO_WARNINGS")
 endif()
 
 # ==============================================================================
@@ -217,10 +217,6 @@ install(FILES ${CMAKE_CURRENT_BINARY_DIR}/OpenTracingConfig.cmake
 # ==============================================================================
 # Testing
 
-include(CTest)
-if(BUILD_TESTING)
-  add_subdirectory(test)
-endif()
 
 # ==============================================================================
 # Examples
diff --git a/mocktracer/BUILD b/mocktracer/BUILD
index 3b22bab..d425e2e 100644
--- a/mocktracer/BUILD
+++ b/mocktracer/BUILD
@@ -7,11 +7,13 @@ cc_library(
     deps = [
         "//:opentracing",
     ],
+    alwayslink = 1,
 )
 
 cc_binary(
     name = "libmocktracer_plugin.so",
     linkshared = 1,
+    linkstatic = 1,
     visibility = ["//visibility:public"],
     deps = [
         "//mocktracer:mocktracer"
diff --git a/src/dynamic_load_unix.cpp b/src/dynamic_load_unix.cpp
index 17e08fd..7e8ac02 100644
--- a/src/dynamic_load_unix.cpp
+++ b/src/dynamic_load_unix.cpp
@@ -35,7 +35,13 @@ DynamicallyLoadTracingLibrary(const char* shared_library,
                               std::string& error_message) noexcept try {
   dlerror();  // Clear any existing error.
 
-  const auto handle = dlopen(shared_library, RTLD_NOW | RTLD_LOCAL);
+  const auto handle = dlopen(shared_library, RTLD_NOW | RTLD_LOCAL
+#if defined(__has_feature)
+#if __has_feature(address_sanitizer)
+      | RTLD_NODELETE
+#endif
+#endif
+  );
   if (handle == nullptr) {
     error_message = dlerror();
     return make_unexpected(dynamic_load_failure_error);
