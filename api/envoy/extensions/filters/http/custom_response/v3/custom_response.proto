syntax = "proto3";

package envoy.extensions.filters.http.custom_response.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/substitution_format_string.proto";

import "google/protobuf/wrappers.proto";

import "xds/annotations/v3/status.proto";
import "xds/type/matcher/v3/matcher.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.custom_response.v3";
option java_outer_classname = "CustomResponseProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/custom_response/v3;custom_responsev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Custom Response Filter]
// [#extension: envoy.filters.http.custom_response]

// The Custom Response Filter allows for replacing upstream responses.

// The filter configuration is a collection of custom response
// policies.
message CustomResponse {
  // Definition of the custom response to be provided to the downstream.
  // [#next-free-field: 2]

  message RedirectPolicy {
    // The Http URI to redirect the original request to, to get the custom
    // response.
    // It should be a full FQDN with protocol, host and path.
    //
    // Example:
    //
    // .. code-block:: yaml
    //
    //    uri: https://www.mydomain.com/path/to/404.txt
    //
    string uri = 1 [(validate.rules).string = {min_len: 1}];

    // The new response status code if specified.
    google.protobuf.UInt32Value status_code = 2 [(validate.rules).uint32 = {lt: 600 gte: 200}];

    // HTTP headers to add to the response. This allows the
    // response policy to append, to add or to override headers of
    // the original response for local body, or the custom response from the
    // remote body, before it is sent to a downstream client.
    repeated config.core.v3.HeaderValueOption headers_to_add = 3
        [(validate.rules).repeated = {max_items: 1000}];
  }

  message LocalResponsePolicy {
    // Optional new local reply body text. It will be used
    // in the `%LOCAL_REPLY_BODY%` command operator in the `body_format`.
    config.core.v3.DataSource body = 1;

    // Optional body format to be used for this response.
    config.core.v3.SubstitutionFormatString body_format = 2;

    // The new response status code if specified.
    google.protobuf.UInt32Value status_code = 3 [(validate.rules).uint32 = {lt: 600 gte: 200}];

    // HTTP headers to add to the response. This allows the
    // response policy to append, to add or to override headers of
    // the original response for local body, or the custom response from the
    // remote body, before it is sent to a downstream client.
    repeated config.core.v3.HeaderValueOption headers_to_add = 4
        [(validate.rules).repeated = {max_items: 1000}];
  }

  // Matcher to match against the original response.
  xds.type.matcher.v3.Matcher custom_response_matcher = 1
      [(xds.annotations.v3.field_status).work_in_progress = true];
}
