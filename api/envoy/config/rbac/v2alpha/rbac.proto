syntax = "proto3";

import "validate/validate.proto";
import "envoy/api/v2/core/address.proto";

package envoy.config.rbac.v2alpha;

// Role Based Access Control (RBAC) provides service-level and method-level access control for a service.
// The RBAC engine authorizes a request by evaluating the request context (expressed in the form of
// :ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`) against the RBAC policies.
//
// Here is an example of RBAC configuration. It has two policies:
// * Service account "cluster.local/ns/default/sa/admin" has full access to the service.
// * Any user can read ("GET") the service at paths with prefix "/products" or suffix "/reviews" when request header
//   "version" set to either "v1" or "v2".
//
//   action_type: ALLOW
//   policies:
//     "service-admin":
//       permissions:
//       - methods: ["*"]
//       principals:
//       - name: "cluster.local/ns/default/sa/admin"
//     "product-viewer":
//       permissions:
//       - paths: [prefix:"/products", suffix:"/reviews"]
//         methods: ["GET"]
//         conditions:
//         - header:
//             key: "version"
//             values: ["v1", "v2"]
//       principals:
//       - name: "*"
//
message RBAC {
  // Should we do white-list or black-list style access control.
  enum ActionType {
    // The policies grant access to principals. The rest is denied. This is white-list style
    // access control. This is the default type.
    ALLOW = 0;

    // The policies deny access to principals. The rest is allowed. This is black-list style
    // access control.
    DENY = 1;
  }

  ActionType action_type = 1;

  // Maps from policy name to policy.
  map<string, Policy> policies = 2;
}

// Policy specifies a role and the principals that are assigned/denied the role.
message Policy {
 // Required. The set of permissions that define a role.
 repeated Permission permissions = 1 [(validate.rules).repeated .min_items = 1];

 // Required. List of principals that are assigned/denied the role based on “action_type”.
 repeated Principal principals = 2 [(validate.rules).repeated .min_items = 1];
}

message StringMatch {
  oneof match_pattern {
    // The input string must match exactly the string specified here.
    // Or it is a "*", which means that it matches any string.
    string simple = 1;

    // The input string must have the prefix specified here.
    string prefix = 2;

    // The input string must have the suffix specified here.
    string suffix = 3;

    // The input string must match the regular expression specified here.
    // The regex grammar is defined `here
    // <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
    string regex = 4;
 }
}

// Specifies how to match an entry in a map.
message MapEntryMatch {
  // The key to select an entry from the map.
  string key = 1;

  // A list of matched values.
  repeated StringMatch values = 2;
}

// Permission defines a permission to access the service.
message Permission {
  // Optional. A list of HTTP paths or gRPC methods.
  // gRPC methods must be presented as fully-qualified name in the form of
  // packageName.serviceName/methodName.
  // If this field is unset, it applies to any path.
  repeated StringMatch paths = 1;

  // Required. A list of HTTP methods (e.g., "GET", "POST").
  // If set to ["*"], it applies to any method.
  repeated string methods = 2;

  // Definition of a custom condition.
  message Condition {
    oneof condition_spec {
      // Header match. This matches to the "request.http.headers" field in
      // ":ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
      // The map key is the header name. The header specifies how the service is accessed.
      MapEntryMatch header = 1;
    }
  }

  // Optional. Custom conditions.
  repeated Condition conditions = 3;
}

// Principal defines an identity or a group of identities.
message Principal {
  // Optional. The name of the principal. This matches to the "source.principal" field in
  // ":ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
  // If set to "*", it applies to any user.
  string name = 1;

  // Definition of a custom attribute to identify the principal.
  message Attribute {
    oneof attribute_spec {
      // Source service name. This matches to the "source.service" field in
      // ":ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
      string service = 1;

      // Source IP addresses.
      repeated envoy.api.v2.core.CidrRange ips = 2;

      // Header match. This matches to the "request.http.headers" field in
      // ":ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
      // The map "key" is the header name. The header identifies the client.
      MapEntryMatch header = 3;
    }
  }

  // Optional. Custom attributes that identify the principal.
  repeated Attribute attributes = 2;
}
