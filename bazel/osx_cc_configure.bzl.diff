diff --git a/../../bazel/tools/cpp/osx_cc_configure.bzl b/osx_cc_configure.bzl
index bac3c0dfc..151bb7e14 100644
--- a/../../bazel/tools/cpp/osx_cc_configure.bzl
+++ b/osx_cc_configure.bzl
@@ -1,3 +1,11 @@
+# This file was imported from https://github.com/bazelbuild/bazel at 7b85122. We apply a number of
+# local modifications to deal with known issues in Bazel 0.5.2:
+#
+# * https://github.com/bazelbuild/bazel/issues/2840
+# * (and potentially) https://github.com/bazelbuild/bazel/issues/2805
+#
+# See osx_cc_configure.bzl.diff for the changes made in this fork.
+
 # pylint: disable=g-bad-file-header
 # Copyright 2016 The Bazel Authors. All rights reserved.
 #
@@ -14,15 +22,15 @@
 # limitations under the License.
 """Configuring the C++ toolchain on macOS."""
 
-load("@bazel_tools//tools/osx:xcode_configure.bzl", "run_xcode_locator")
+load("//bazel/osx:xcode_configure.bzl", "run_xcode_locator")
 
 load(
-    "@bazel_tools//tools/cpp:lib_cc_configure.bzl",
+    "//bazel:lib_cc_configure.bzl",
     "escape_string",
 )
 
 load(
-    "@bazel_tools//tools/cpp:unix_cc_configure.bzl",
+    "//bazel:unix_cc_configure.bzl",
     "get_escaped_cxx_inc_directories",
     "tpl",
     "get_env",
@@ -55,7 +63,7 @@ def configure_osx_toolchain(repository_ctx):
   xcode_toolchains = []
   (xcode_toolchains, xcodeloc_err) = run_xcode_locator(
       repository_ctx,
-      Label("@bazel_tools//tools/osx:xcode_locator.m"))
+      Label("//bazel/osx:xcode_locator.m"))
   if xcode_toolchains:
     cc = find_cc(repository_ctx)
     tpl(repository_ctx, "osx_cc_wrapper.sh", {
@@ -70,19 +78,22 @@ def configure_osx_toolchain(repository_ctx):
         Label("@bazel_tools//tools/objc:make_hashed_objlist.py"),
         "make_hashed_objlist.py")
     repository_ctx.symlink(
-        Label("@bazel_tools//tools/osx/crosstool:wrapped_ar.tpl"),
+        Label("//bazel/osx/crosstool:wrapped_ar.tpl"),
         "wrapped_ar")
     repository_ctx.symlink(
-        Label("@bazel_tools//tools/osx/crosstool:wrapped_clang.tpl"),
+        Label("//bazel/osx/crosstool:wrapped_clang.tpl"),
         "wrapped_clang")
     repository_ctx.symlink(
-        Label("@bazel_tools//tools/osx/crosstool:wrapped_clang_pp.tpl"),
+        Label("//bazel/osx/crosstool:wrapped_clang_pp.tpl"),
         "wrapped_clang_pp")
     repository_ctx.symlink(
-        Label("@bazel_tools//tools/osx/crosstool:BUILD.tpl"),
+        Label("//bazel/osx/crosstool:wrapped_strip.tpl"),
+        "wrapped_strip")
+    repository_ctx.symlink(
+        Label("//bazel/osx/crosstool:BUILD.tpl"),
         "BUILD")
     repository_ctx.symlink(
-        Label("@bazel_tools//tools/osx/crosstool:osx_archs.bzl"),
+        Label("//bazel/osx/crosstool:osx_archs.bzl"),
         "osx_archs.bzl")
     escaped_include_paths = _get_escaped_xcode_cxx_inc_directories(repository_ctx, cc, xcode_toolchains)
     escaped_cxx_include_directories = []
@@ -92,7 +103,7 @@ def configure_osx_toolchain(repository_ctx):
       escaped_cxx_include_directories.append("# Error: " + xcodeloc_err + "\n")
     repository_ctx.template(
         "CROSSTOOL",
-        Label("@bazel_tools//tools/osx/crosstool:CROSSTOOL.tpl"),
+        Label("//bazel/osx/crosstool:CROSSTOOL.tpl"),
         {"%{cxx_builtin_include_directory}": "\n".join(escaped_cxx_include_directories)})
   else:
     configure_unix_toolchain(repository_ctx, cpu_value = "darwin")
