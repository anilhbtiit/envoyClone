syntax = "proto3";

package envoy.config.listener.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/protocol.proto";

import "google/protobuf/duration.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.config.listener.v3";
option java_outer_classname = "QuicConfigProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: QUIC listener config]

// Configuration specific to the UDP QUIC listener.
message QuicProtocolOptions {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.api.v2.listener.QuicProtocolOptions";

  core.v3.QuicProtocolOptions quic_protocol_options = 1;

  // Maximum number of milliseconds that connection will be alive when there is
  // no network activity. 300000ms if not specified.
  google.protobuf.Duration idle_timeout = 2;

  // Connection timeout in milliseconds before the crypto handshake is finished.
  // 20000ms if not specified.
  google.protobuf.Duration crypto_handshake_timeout = 3;

  // Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
  // to enabled.
  core.v3.RuntimeFeatureFlag enabled = 4;

  // `Initial stream-level flow-control window
  // <https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1>`_ size. Valid values range from 
  // 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65535 (2^16).
  //
  // NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
  // window size now, so it's also the minimum.
  //
  // This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
  // QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
  // stop the flow of data to the stream buffers.
  google.protobuf.UInt32Value initial_stream_window_size = 5
      [(validate.rules).uint32 = {lte: 16777216 gte: 1}];

  // Similar to *initial_stream_window_size*, but for connection-level
  // flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65535 (2^16).
  // window. Currently, this has the same minimum/default as *initial_stream_window_size*.
  google.protobuf.UInt32Value initial_connection_window_size = 6
      [(validate.rules).uint32 = {lte: 25165824 gte: 1}];
}
