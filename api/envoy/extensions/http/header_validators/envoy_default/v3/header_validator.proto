syntax = "proto3";

package envoy.extensions.http.header_validators.envoy_default.v3;

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3";
option java_outer_classname = "HeaderValidatorProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/http/header_validators/envoy_default/v3;envoy_defaultv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Envoy's default Header Validator config]

// This extension validates that HTTP request and response headers are well formed according to respective RFCs.
// 1. HTTP/1 header map validity according to `RFC 7230 section 3.2 <https://tools.ietf.org/html/rfc7230#section-3.2>`_
// 2. Syntax of HTTP/1 request target URI and response status
// 3. H/2 header map validity according to `RFC 7540 section 8.1.2 <https://tools.ietf.org/html/rfc7540#section-8.1.2>`_
// 4. Syntax of HTTP/2 pseudo headers
// 5. HTTP/3 header map validity (TBD standard link when approved)
// 6. Syntax of HTTP/3 pseudo headers
// 7. Syntax of Content-Length and Transfer-Encoding
// 8. Validation of HTTP/1 requests with both Content-Length and Transfer-Encoding headers
// 9. Normalization of the URI path according to `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`_
// without `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
//
message HeaderValidatorConfig {
  message UriPathNormalizationOptions {
    // Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
    // This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
    enum PathWithEscapedSlashesAction {
      // Default behavior specific to implementation (i.e. Envoy) of this configuration option.
      // Envoy, by default, takes the KEEP_UNCHANGED action.
      // NOTE: the implementation may change the default behavior at-will.
      IMPLEMENTATION_SPECIFIC_DEFAULT = 0;

      // Keep escaped slashes.
      KEEP_UNCHANGED = 1;

      // Reject client request with the 400 status. gRPC requests will be rejected with the INTERNAL (13) error code.
      // The "httpN.downstream_rq_failed_path_normalization" counter is incremented for each rejected request.
      REJECT_REQUEST = 2;

      // Unescape %2F and %5C sequences and redirect request to the new path if these sequences were present.
      // Redirect occurs after path normalization and merge slashes transformations if they were configured.
      // NOTE: gRPC requests will be rejected with the INTERNAL (13) error code.
      // This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
      // traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
      // The "httpN.downstream_rq_redirected_with_normalized_path" counter is incremented for each
      // redirected request.
      UNESCAPE_AND_REDIRECT = 3;

      // Unescape %2F and %5C sequences.
      // Note: this option should not be enabled if intermediaries perform path based access control as
      // it may lead to path confusion vulnerabilities.
      UNESCAPE_AND_FORWARD = 4;
    }

    // Should paths be normalized according to RFC 3986 before any processing of
    // requests by HTTP filters or routing? This affects the upstream *:path* header
    // as well. For paths that fail this check, Envoy will respond with 400 to
    // paths that are malformed. The default behavior is to normalize URI path.
    // This value may be overridden by the runtime variable
    // :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
    // See `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`_
    // for details of normalization.
    // Note that Envoy does not perform
    // `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
    bool skip_path_normalization = 1;

    // Determines if adjacent slashes in the path are merged into one before any processing of
    // requests by HTTP filters or routing. This affects the upstream *:path* header as well. Setting
    // this option to true will cause incoming requests with path `//dir///file` to not match against route
    // with `prefix` match set to `/dir`. Defaults to `false`. Note that slash merging is not part of
    // `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
    bool skip_merging_slashes = 2;

    // Action to take when request URL path contains escaped slash sequences (%2F, %2f, %5C and %5c).
    // The default value can be overridden by the :ref:`http_connection_manager.path_with_escaped_slashes_action<config_http_conn_man_runtime_path_with_escaped_slashes_action>`
    // runtime variable.
    // The :ref:`http_connection_manager.path_with_escaped_slashes_action_sampling<config_http_conn_man_runtime_path_with_escaped_slashes_action_enabled>` runtime
    // variable can be used to apply the action to a portion of all requests.
    PathWithEscapedSlashesAction path_with_escaped_slashes_action = 3;
  }

  message Http1ProtocolOptions {
    // Allows Envoy to process HTTP/1 requests/responses with both `Content-Length` and `Transfer-Encoding`
    // headers set. By default such messages are rejected, but if option is enabled - Envoy will
    // remove Content-Length header and process message.
    // See `RFC7230, sec. 3.3.3 <https://tools.ietf.org/html/rfc7230#section-3.3.3>`_ for details.
    //
    // .. attention::
    //   Enabling this option might lead to request smuggling vulnerability, especially if traffic
    //   is proxied via multiple layers of proxies.
    bool allow_chunked_length = 1;

    // Allow extension methods in HTTP/1 requests. By default this option is turned off and only
    // HTTP methods defined in the `RFC 7231 section 4.1 <https://tools.ietf.org/html/rfc7231#section-4.1>`_
    // are allowed.
    bool allow_extension_methods = 2;
  }

  Http1ProtocolOptions http1_protocol_options = 1;

  // URI path normalization options.
  // URI path is left unmodified if this configuration was not specified (the default). Note that omitting path
  // normalization may lead to path confusion vulnerabilities in access control or incorrect service
  // selection.
  UriPathNormalizationOptions uri_path_normalization_options = 2;
}
