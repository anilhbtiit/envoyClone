#!/bin/bash

set -e

# This script is invoked from quiche.BUILD to tweak QUICHE source files into a
# form usable by Envoy. Transformations performed here:
#
# - Move subtree under quiche/ base dir, for clarity in #include statements.
# - Rewrite include directives for platform/impl files to point to the directory
#   containing Envoy's QUICHE platform implementation.
# - Fix include directives for non-platform/impl files to remove
#   "net/third_party" from the path. (This is an artifact of Chromium source
#   tree structure.)

# Determine base directory of unmodified QUICHE source files. In practice, this
# ends up being "external/com_github_google_quiche".
src_base_dir=$$(dirname $$(dirname $$(dirname $(rootpath quic/core/quic_constants.h))))

# sed commands to apply to each source file.
cat <<EOF >sed_commands
# Rewrite include directives for testonly platform impl files.
/^#include/ s!net/quiche/common/platform/impl/quiche_test_impl.h!test/common/quic/platform/quiche_test_impl.h!
/^#include/ s!net/quiche/common/platform/impl/quiche_test_helpers_impl.h!test/common/quic/platform/quiche_test_helpers_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_expect_bug_impl.h!"test/common/quic/platform/quiche_expect_bug_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_mock_log_impl.h!"test/common/quic/platform/quiche_mock_log_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_test_output_impl.h!"test/common/quic/platform/quiche_test_output_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_thread_impl.h!"test/common/quic/platform/quiche_thread_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_epoll_impl.h!"test/common/quic/platform/quiche_epoll_impl.h!


# Rewrite include directives for platform impl files.
/^#include/ s!net/quiche/common/platform/impl/!common/quic/platform/!

# Rewrite include directives for epoll_server platform impl files.
/^#include/ s!net/tools/epoll_server/platform/impl!test/common/quic/platform/!

# Append "quiche/" to include directives to other QUICHE files.
/^#include/ s!"quic/!"quiche/quic/!
/^#include/ s!"spdy/!"quiche/spdy/!
/^#include/ s!"http2/!"quiche/http2/!
/^#include/ s!"common/!"quiche/common/!
/^#include/ s!"epoll_server/!"quiche/epoll_server/!

# The above global substitutions will prepend "quiche" to the platform code which we want to undo.
/^#include/ s!"quiche/common/quic/platform/!"source/common/quic/platform/!

# Use envoy specific implementations for below platform APIs.
/^#include/ s!"quiche_platform_impl/quiche_logging_impl.h!"source/common/quic/platform/quiche_logging_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_bug_tracker_impl.h!"source/common/quic/platform/quiche_bug_tracker_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_error_code_wrappers_impl.h!"source/common/quic/platform/quiche_error_code_wrappers_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_flags_impl.h!"source/common/quic/platform/quiche_flags_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_hostname_utils_impl.h!"source/common/quic/platform/quiche_hostname_utils_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_mem_slice_impl.h!"source/common/quic/platform/quiche_mem_slice_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_server_stats_impl.h!"source/common/quic/platform/quiche_server_stats_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_stack_trace_impl.h!"source/common/quic/platform/quiche_stack_trace_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_stream_buffer_allocator_impl.h!"source/common/quic/platform/quiche_stream_buffer_allocator_impl.h!
/^#include/ s!"quiche_platform_impl/quiche_udp_socket_platform_impl.h!"source/common/quic/platform/quiche_udp_socket_platform_impl.h!
/^#include/ s!"quiche_platform_impl/quic_flags_impl.h!"source/common/quic/platform/quic_flags_impl.h!

# The rest of the platform APIs use the QUICHE default implementations.
/^#include/ s!"quiche_platform_impl/!"quiche/common/platform/default/quiche_platform_impl/!

# Rewrite gmock & gtest includes.
/^#include/ s!testing/gmock/include/gmock/!gmock/!
/^#include/ s!testing/gtest/include/gtest/!gtest/!

# Rewrite third_party includes.
/^#include/ s!third_party/boringssl/src/include/!!
/^#include/ s!third_party/nghttp2/src/lib/includes/nghttp2!nghttp2!
/^#include/ s!third_party/nghttp2!nghttp2!
/^#include/ s!third_party/zlib/zlib!zlib!

/^import/ s!quic/core/proto/cached_network_parameters!quiche/quic/core/proto/cached_network_parameters!

# Rewrite #pragma clang
/^#pragma/ s!clang!GCC!
/^#pragma/ s!-Weverything!-Wall!
EOF

for src_file in $(SRCS); do
  # Extract relative path (e.g. "quic/core/quic_utils.cc") from full path in
  # src_path (e.g. "external/com_github_google_quiche/quic/core/quic_utils.cc").
  src_path="$${src_file#$$src_base_dir/}"

  # Map to output file with quiche/ base directory inserted in path.
  out_file="$(@D)/quiche/$$src_path"
  mkdir -p "$$(dirname "$$out_file")"

  # Apply text substitutions. -E ensures consistent behavior on Linux vs. OS X.
  sed -E -f sed_commands "$$src_file" > "$$out_file"
done
