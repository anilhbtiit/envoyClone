syntax = "proto3";

package envoy.extensions.filters.http.ext_proc.v3alpha;

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.ext_proc.v3alpha";
option java_outer_classname = "ProcessingModeProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).work_in_progress = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: External Processing Filter]
// External Processing Filter Processing Mode
// [#extension: envoy.filters.http.ext_proc]

// This configuration describes how an external processing filter processes the HTTP
// request or response, including how requests and responses are
// sent to the remote server.

// [#next-free-field: 8]
message ProcessingMode {
  // Control how headers and trailers are handled
  enum HeaderSendMode {
    // The default HeaderSendMode depends on which part of the message is being
    // processed. By default, request and response headers are sent, while
    // while the body and trailers are skipped.
    DEFAULT = 0;

    // Send the header or trailer.
    SEND = 1;

    // Do not send the header or trailer.
    SKIP = 2;
  }

  // Control how the request and response bodies are handled
  enum BodySendMode {
    // Do not send the body at all. This is the default
    NONE = 0;

    // Stream the body to the server in pieces as they arrive at the
    // proxy. This is the default.
    STREAMED = 1;

    // Buffer the message body in memory and send the entire body at once.
    // If the body exceeds the configured buffer limit, then the
    // downstream system will receive an error.
    BUFFERED = 2;

    // Buffer the message body in memory and send the entire body in one
    // chunk. If the body exceeds the configured buffer limit, then the body contents
    // up to the buffer limit will be sent.
    BUFFERED_PARTIAL = 3;
  }

  // Control whether headers, trailers, and body pieces are sent synchronously,
  // in which Envoy will wait for a response before continuing filter
  // processing, or asynchronously, in which Envoy will continue with filter
  // processing after sending the pieces.
  enum AsyncMode {
    // Send message parts asynchronously. This is the default.
    SYNC = 0;

    // Send message parts synchronously.
    ASYNC = 1;
  }

  // How to handle the request header. Default is "SEND".
  HeaderSendMode request_header_mode = 1;

  // How to handle the response header. Default is "SEND".
  HeaderSendMode response_header_mode = 2;

  // How to handle the request body. Default is "NONE".
  BodySendMode request_body_mode = 3;

  // How do handle the response body. Default is "NONE".
  BodySendMode response_body_mode = 4;

  // How to handle the request trailers. Default is "SKIP".
  HeaderSendMode request_trailer_mode = 5;

  // How to handle the response trailers. Default is "SKIP".
  HeaderSendMode response_trailer_mode = 6;

  // Whether to send all of the above synchronously or
  // asynchronously. The default is "SYNC".
  AsyncMode async_mode = 7;
}
