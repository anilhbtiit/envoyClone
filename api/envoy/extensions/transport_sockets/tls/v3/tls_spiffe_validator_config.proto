syntax = "proto3";

package envoy.extensions.transport_sockets.tls.v3;

import "envoy/config/core/v3/base.proto";

import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.tls.v3";
option java_outer_classname = "TlsSpiffeValidatorConfigProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: SPIFFE Certificate Validator Configuration]

// Configuration specific to the SPIFFE certificate validator provided at
// :ref:`envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.custom_validator_config<envoy_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.custom_validator_config>`.
//
// Example:
//
// .. code-block:: yaml
//
//  custom_validator_config:
//    name: envoy.tls.cert_validator.spiffe
//    typed_config:
//      "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
//      trust_bundles:
//        foo.com:
//          filename: "foo.pem"
//        envoy.com:
//          filename: "envoy.pem"
//
// In this example, a presented peer certificate whose SAN matches `spiffe//foo.com/**` is validated against
// the "foo.pem" x.509 certificate. All the trust bundles are isolated from each other, so no trust domain can mint
// a SVID belonging to another trust domain. That means, in this example, a SVID signed by `envoy.com`'s CA with `spiffe//foo.com/**`
// SAN would be rejected since Envoy selects the trust bundle accodrding to the presented SAN before validate the certificate.
message SPIFFECertValidatorConfig {
  // This field specifies the x.509 trust bundles used for validating incoming X.509-SVID(s).
  // The key is a SPIFFE trust domain, `example.com`, `foo.bar.gov` for example,
  // and maps to a data source storing x.509 trust bundle.
  // Note that the key must *not* have "spiffe://" prefix.
  map<string, config.core.v3.DataSource> trust_bundles = 1;
}
