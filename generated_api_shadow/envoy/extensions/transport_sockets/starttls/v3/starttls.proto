syntax = "proto3";

package envoy.extensions.transport_sockets.starttls.v3;

import "envoy/extensions/transport_sockets/raw_buffer/v3/raw_buffer.proto";
import "envoy/extensions/transport_sockets/tls/v3/tls.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.starttls.v3";
option java_outer_classname = "StarttlsProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: StartTls]
// [#extension: envoy.transport_sockets.starttls]

// StartTls transport socket addresses situations when a protocol starts in clear-text and
// negotiates in-band switch to TLS. StartTls transport socket is protocol agnostic and requires
// a network filter which understands protocol exchange and state machine to signal to StartTls
// transport socket when switch to TLS is required.

// [#not-implemented-hide:] Configuration for StartTls transport socket.
// StartTls transport socket wraps two sockets:
// - raw_buffer socket which is used at the beginning of the session
// - TLS socket used when a protocol negotiates a switch to encrypted traffic.
message StartTlsConfig {
  // Configuration for clear-text socket used at the beginning of the session.
  raw_buffer.v3.RawBuffer cleartext_socket_config = 1;

  // Configuration for TLS socket.
  transport_sockets.tls.v3.DownstreamTlsContext tls_socket_config = 2
      [(validate.rules).message = {required: true}];

  // Maximum number of bytes allowed to be exchanged in clear-text.
  // If the number of bytes exchanged in clear-text exceeds this value
  // connection is terminated. Value of zero means no limit. Defaults to zero.
  google.protobuf.UInt32Value max_cleartext_bytes = 3;
}
