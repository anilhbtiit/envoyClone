syntax = "proto3";

package envoy.config.filter.http.metadata_to_header.v2alpha;

option java_outer_classname = "MetadataToHeaderProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.config.filter.http.metadata_to_header.v2alpha";
option go_package = "v2alpha";

import "validate/validate.proto";

// [#protodoc-title: Metadata-To-Header Filter]
//
// The configuration for transforming metadata into header. This is useful for
// exchanging metadata across Envoys.

message Config {
  // ValueType defines the type of the metadata value.
  enum ValueType {
    STRING = 0;
    NUMBER = 1;

    // The value is a serialized `protobuf.Value
    // <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    PROTOBUF_VALUE = 2;
  }

  // ValueEncode defines the encoding algorithm.
  enum ValueEncode {
    // The value is not encoded.
    NONE = 0;

    // The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
    // Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
    // non-ASCII characters in the header.
    BASE64 = 1;
  }

  // A HeaderValuePair defines the header and metadata value pair.
  message HeaderValuePair {
    // The header to store the value.
    string header = 1 [(validate.rules).string.min_bytes = 1];

    // The value to pair with the given key.
    //
    // When used for a `on_metadata_present` case, if value is non-empty it'll be used
    // instead of the metadata value. If both are empty, no header is added.
    //
    // When used for a `on_metadata_missing` case, a non-empty value must be provided
    // otherwise no header is added.
    string value = 2;

    // The metadata value's type â€” defaults to string.
    ValueType type = 3;

    // How is the value encoded, default is NONE (not encoded).
    // The value will be encoded accordingly before storing to header.
    ValueEncode encode = 4;
  }

  // A Metadata defines where to find the metadata value.
  message Metadata {
    // The namespace of the dynamic metadata - if this is empty, the node metadata
    // will be used.
    string namespace = 1;

    // The key to use within the namespace.
    string key = 2 [(validate.rules).string.min_bytes = 1];
  }

  // A Rule defines what header to add when a metadata is present or missing.
  message Rule {
    // The metadata to be copied to the header.
    Metadata metadata = 1;

    // If the metadata is present, apply this HeaderValuePair.
    //
    // If the value in the HeaderValuePair is non-empty, it'll be used instead
    // of the metadata value.
    HeaderValuePair on_metadata_present = 2;

    // If the metadata is not present, apply this HeaderValuePair.
    //
    // The value in the HeaderValuePair must be set, since it'll be used in lieu
    // of the missing metadata value.
    HeaderValuePair on_metadata_missing = 3;

    // Whether or not to remove the metadata after a rule is applied.
    // Only supports dynamic metadata and has no effect on node metadata.
    bool remove = 4;
  }

  // The list of rules to apply to requests.
  repeated Rule request_rules = 1;

  // The list of rules to apply to responses.
  repeated Rule response_rules = 2;
}
