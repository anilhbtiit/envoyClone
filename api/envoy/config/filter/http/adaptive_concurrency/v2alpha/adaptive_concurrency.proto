syntax = "proto3";

package envoy.config.filter.http.adaptive_concurrency.v2alpha;

option java_package = "io.envoyproxy.envoy.config.filter.http.adaptive_concurrency.v2alpha";
option java_outer_classname = "AdaptiveConcurrencyProto";
option java_multiple_files = true;
option go_package = "v2alpha";

import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

message GradientControllerConfig {
  // The percentile to use when summarizing aggregated samples. This mirrors supported quantiles in
  // histogram_impl.h.
  //
  // TODO @tallen: add unit test that ensures these percentiles exist in histogram_impl as
  // supported.
  enum SampleAggregatePercentile {
    P50 = 0;
    P75 = 1;
    P90 = 2;
    P95 = 3;
    P99 = 4;
  }
  SampleAggregatePercentile sample_aggregate_percentile = 1;

  message ConcurrencyLimitCalculationParams {
    // The concurrency limit the gradient controller will start with before any samples have been
    // taken.
    google.protobuf.UInt64Value starting_concurrency_limit = 1;

    // The allowed upper-bound on the calculated concurrency limit.
    google.protobuf.UInt64Value max_concurrency_limit = 2;

    // The period of time samples are taken to recalculate the concurrency limit.
    google.protobuf.Duration concurrency_update_interval = 3;
  }
  ConcurrencyLimitCalculationParams concurrency_limit_params = 2;

  message MinimumRTTCalculationParams {
    // The time interval between recalculating the minimum request round-trip time.
    google.protobuf.Duration interval = 1;

    // The number of requests to aggregate/sample during the minRTT recalculation window before updating
    google.protobuf.UInt64Value request_count = 2;
  };
  MinimumRTTCalculationParams min_rtt_calc_params = 3;
}

message AdaptiveConcurrency {
  oneof concurrency_controller_config {
    // Gradient concurrency control will be used.
    GradientControllerConfig gradient_controller_config = 1;
  }

  // If set to true, the filter becomes a pass-through and forwards all requests.
  bool disabled = 2;
}
