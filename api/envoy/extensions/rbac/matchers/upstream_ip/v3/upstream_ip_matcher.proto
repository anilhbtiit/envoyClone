syntax = "proto3";

package envoy.extensions.rbac.matchers.upstream_ip.v3;

import "envoy/config/core/v3/address.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.rbac.matchers.upstream_ip.v3";
option java_outer_classname = "UpstreamIpMatcherProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: RBAC upstream IP matcher plugin]
// [#extension: envoy.rbac.matchers.upstream_ip]

// This is configuration for matching upstream ip.
message UpstreamIpMatcher {
  // A CIDR block that will be used to match the upstream IP.
  // This matcher requires a filter in the chain to have saved the upstream address(es) in the
  // filter state before the matcher is executed by RBAC filter. The state should be saved with key
  // `envoy.stream.upstream_addresses` (See
  // :repo:`upstream_address_set.h<source/common/stream_info/upstream_address_set.h>`).
  // Also, See :repo:`proxy_filter.cc<
  // source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>` for an example of a
  // filter which populates the FilterState.
  // Note that the current matcher semantics are - if ANY of addresses in the
  // `envoy.stream.upstream_addresses` matches the configured CIDR range, the matcher will evaluate to
  // `true`. Both Ipv4 and Ipv6 ranges can be matched.
  config.core.v3.CidrRange upstream_ip = 1;
}
