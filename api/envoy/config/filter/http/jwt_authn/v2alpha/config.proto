
syntax = "proto3";

package envoy.config.filter.http.jwt_authn.v2alpha;

import "envoy/api/v2/core/base.proto";
import "envoy/api/v2/core/http_uri.proto";
import "envoy/api/v2/route/route.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

// This message specifies how a JSON Web Token (JWT) can be verified. JWT format is defined
// `here <https://tools.ietf.org/html/rfc7519>`_. Please see `OAuth2.0
//  <https://tools.ietf.org/html/rfc6749>`_ and `OIDC1.0  <http://openid.net/connect>`_ for
// the authentication flow.
//
// Example:
//
// .. code-block:: yaml
//
//     id: example.com
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     remote_jwks:
//     - http_uri:
//       - uri: https://example.com/.well-known/jwks.json
//         cluster: example_jwks_cluster
//       cache_duration:
//       - seconds: 300
//
// [#not-implemented-hide:]
message JwtProvider {
  // A unique ID to uniquely identify a provider. It can be the same as "issuer".
  // If an issuer have different audiences or other configurations, multiple JwtProvider
  // can be used with different ids.
  //
  // Example of two providers of different audiences with the same issuer.
  //
  // .. code-block:: yaml
  //
  //     id: example.com-bookstore-audience
  //     issuer: https://example.com
  //     local_jwks:
  //      - inline_string: "ACADADADADA"
  //     audiences:
  //     - bookstore
  //
  //     id: example.com-any-audience
  //     issuer: https://example.com
  //     local_jwks:
  //      - inline_string: "ACADADADADA"
  //
  // Use 9 as the proto index number to support backward compatibility.
  string id = 9 [(validate.rules).string.min_bytes = 1];

  // Identifies the principal that issued the JWT. See `here
  //  <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_. Usually a URL or an email address.
  //
  // Example: https://securetoken.google.com
  // Example: 1234567-compute@developer.gserviceaccount.com
  //
  string issuer = 1 [(validate.rules).string.min_bytes = 1];

  // The list of JWT `audiences <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_. that are
  // allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
  // will not check audiences in the token.
  //
  // Example:
  //
  // .. code-block:: yaml
  //
  //     audiences:
  //     - bookstore_android.apps.googleusercontent.com
  //       bookstore_web.apps.googleusercontent.com
  //
  repeated string audiences = 2;

  // `JSON Web Key Set <https://tools.ietf.org/html/rfc7517#appendix-A>`_ is needed. to validate
  // signature of the JWT. This field specifies where to fetch JWKS.
  oneof jwks_source_specifier {
    option (validate.required) = true;

    // JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
    // URI and how the fetched JWKS should be cached.
    //
    // Example:
    //
    // .. code-block:: yaml
    //
    //    remote_jwks:
    //    - http_uri:
    //      - uri: https://www.googleapis.com/oauth2/v1/certs
    //        cluster: jwt.www.googleapis.com|443
    //      cache_duration:
    //      - seconds: 300
    //
    RemoteJwks remote_jwks = 3;

    // JWKS is in local data source. It could be either in a local file or embedded in the
    // inline_string.
    //
    // Example: local file
    //
    // .. code-block:: yaml
    //
    //    local_jwks:
    //    - filename: /etc/envoy/jwks/jwks1.txt
    //
    // Example: inline_string
    //
    // .. code-block:: yaml
    //
    //    local_jwks:
    //    - inline_string: "ACADADADADA"
    //
    envoy.api.v2.core.DataSource local_jwks = 4;
  }

  // If false, the JWT is removed in the request after a success verification. If true, the JWT is
  // not removed in the request. Default value is false.
  bool forward = 5;

  // Two fields below define where to extract the JWT from an HTTP request.
  //
  // If no explicit location is specified, the following default locations are tried in order:
  //
  // 1. The Authorization header using the Bearer schema. See `here
  //     <https://tools.ietf.org/html/rfc6750#section-2.1>`_. Example:
  //
  //       Authorization: Bearer <token>.
  //
  // 2. `access_token` query parameter. See `this
  // <https://tools.ietf.org/html/rfc6750#section-2.3>`_
  //

  // Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
  // its issuer specified or from the default locations.

  // Specify the HTTP headers to extract JWT token. For examples, following config:
  //
  // .. code-block:: yaml
  //
  //   from_headers:
  //   - name: x-goog-iap-jwt-assertion
  //
  // can be used to extract token from header::
  //
  //   x-goog-iap-jwt-assertion: <JWT>.
  //
  repeated JwtHeader from_headers = 6;

  // JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
  //
  // For example, if config is:
  //
  // .. code-block:: yaml
  //
  //   from_params:
  //   - jwt_token
  //
  // The JWT format in query parameter is::
  //
  //    /path?jwt_token=<JWT>
  //
  repeated string from_params = 7;

  // This field specifies the header name to forward a successfully verified JWT payload to the
  // backend. The forwarded data is::
  //
  //    base64_encoded(jwt_payload_in_JSON)
  //
  // If it is not specified, the payload will not be forwarded.
  // Multiple JWTs in a request from different issuers will be supported. Multiple JWTs from the
  // same issuer will not be supported. Each issuer can config this `forward_payload_header`. If
  // multiple JWTs from different issuers want to forward their payloads, their
  // `forward_payload_header` should be different.
  string forward_payload_header = 8;
}

// This message specifies how to fetch JWKS from remote and how to cache it.
message RemoteJwks {
  // The HTTP URI to fetch the JWKS. For example:
  //
  // .. code-block:: yaml
  //
  //    http_uri:
  //    - uri: https://www.googleapis.com/oauth2/v1/certs
  //      cluster: jwt.www.googleapis.com|443
  //
  envoy.api.v2.core.HttpUri http_uri = 1;

  // Duration after which the cached JWKS should be expired. If not specified, default cache
  // duration is 5 minutes.
  google.protobuf.Duration cache_duration = 2;
}

// This message specifies a header location to extract JWT token.
message JwtHeader {
  // The HTTP header name.
  string name = 1 [(validate.rules).string.min_bytes = 1];

  // The value prefix. The value format is "value_prefix<token>"
  // For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
  // end.
  string value_prefix = 2;
}

// This message specifies a Jwt requirement
//
// For example: following match will match all requests.
//
// .. code-block:: yaml
//
//  # not required with an empty message
//
//  # require A
//  provider_id: "iss-A"
//
//  # require A or B
//  requires_any:
//    requirements:
//      - provider_id: "iss-A"
//      - provider_id: "iss-B"
//
//  # require A and B
//  requires_all:
//    requirements:
//      - provider_id: "iss-A"
//      - provider_id: "iss-B"
//
//  # require A and (B or C)
//  requires_all:
//    requirements:
//      - provider_id: "iss-A"
//      - requires_any:
//        requirements:
//          - provider_id: "iss-B"
//          - provider_id: "iss-C"
//
//  # require A or (B and C)
//  requires_any:
//    requirements:
//      - provider_id: "iss-A"
//      - requires_all:
//        requirements:
//          - provider_id: "iss-B"
//          - provider_id: "iss-C"
//
message JwtRequirement {
  oneof requires_type {
    // Specify a required provider id.
    string provider_id = 1;

    // Specify list of JwtRequirement. Their results are OR-ed.
    // If any one of them passes, the result is passed.
    JwtRequirementOrList requires_any = 2;

    // Specify list of JwtRequirement. Their results are AND-ed.
    // All of them must pass, if one of them fails or missing, it fails.
    JwtRequirementAndList requires_all = 3;
  }
}

// This message specifies a list of RequiredProvider.
message JwtRequirementOrList {
  // Specify a list of RequiredProvider.
  repeated JwtRequirement requirements = 1 [(validate.rules).repeated .min_items = 2];
}

// This message specifies a list of RequiredProvider.
message JwtRequirementAndList {
  // Specify a list of RequiredProvider.
  repeated JwtRequirement requirements = 1 [(validate.rules).repeated .min_items = 2];
}

// This message specifies a Jwt requirement for a specific Route condition.
// Example 1:
//
// .. code-block:: yaml
//
//    - match:
//         prefix: "/healthz"
//
// In above example, There is no "requires" field for /healthz prefix match,
// it means that requrests matched the path prefix don't require jwt authentication.
//
// Example 2:
//
// .. code-block:: yaml
//
//    - match:
//         prefix: "/"
//      requires: { provider_id: "iss-A", audiences: [audience1, audience2]}
//
// In above example, all requests (all requests matched "/" path prefix),
// require jwt authentication from "iss-A" with audiences override defined.
message RequirementRule {
  // The route matching parameter. Only when the match is satisfied, the "requires" field will
  // apply.
  //
  // For example: following match will match all requests.
  //
  // .. code-block:: yaml
  //
  //    match:
  //       prefix: "/"
  //
  envoy.api.v2.route.RouteMatch match = 1 [(validate.rules).message.required = true];

  // Specify a Jwt Requirement.
  JwtRequirement requires = 2;
}

// This is the Envoy HTTP filter config for JWT authentication.
//
// For example:
//
// .. code-block:: yaml
//
//   providers:
//      - id: provider1
//        issuer: issuer1
//        audiences:
//        - audience1
//        - audience2
//        remote_jwks:
//          http_uri:
//            uri: https://example.com/.well-known/jwks.json
//            cluster: example_jwks_cluster
//      - id: provider2
//        issuer: issuer2
//        local_jwks:
//          inline_string: jwks_string
//
//   rules:
//      # Not jwt verification is required for /health path
//      - match:
//          prefix: "/health"
//
//      # Jwt verification for provider1 is required for path prefixed with "prefix"
//      - match:
//          prefix: "/prefix"
//        requires:
//          provider_id: "provider1"
//
//      # Jwt verification for either provider1 or provider2 is required for all other requests.
//      - match:
//          prefix: "/"
//        requires:
//          requires_any:
//            requirements:
//              - provider_id: "provider1"
//              - provider_id: "provider2"
//
//// [#not-implemented-hide:]
message JwtAuthentication {
  // List of JWT providers. For example:
  //
  // .. code-block:: yaml
  //
  //   providers:
  //      - id: provider1
  //        issuer: issuer1
  //        audiences:
  //        - audience1
  //        - audience2
  //        remote_jwks:
  //          http_uri:
  //            uri: https://example.com/.well-known/jwks.json
  //            cluster: example_jwks_cluster
  //      - id: provider2
  //        issuer: provider2
  //        local_jwks:
  //          inline_string: jwks_string
  //
  repeated JwtProvider providers = 1;

  // If true, the request is allowed if JWT is mising or JWT verification fails.
  // Default is false, a request without JWT or failed JWT verification is not allowed.
  // A typical usage is: this filter is used to only verify JWT and pass the verified JWT
  // payload to another filter, the other filter will make decision.
  // This flag has impact on the process flow. For example, if flag is false, for multiple
  // "one_of" requirements, if the first requirement passes, the rest requiements will not be
  // verified. But if this flag is true, all requirements will be verified even all of them
  // passed.
  bool allow_missing_or_failed = 2;

  // Specifies requirements based on the route matches. The first matched requirement will be
  // applied. If there are overlapped match conditions, please put the most specific match first.
  // If PerRouteConfig is specified for the selected route, this field will not be uesd.
  //
  // Examples
  //
  // .. code-block:: yaml
  //
  // rules:
  //   - match: { prefix: "/healthz" }
  //   - match: { prefix: "/baz" }
  //     requires:
  //       provider_id: "provider1"
  //   - match: { prefix: "/foo" }
  //     requires:
  //       requires_any:
  //         requirements:
  //           - provider_id: "provider1"
  //           - provider_id: "provider2"
  //   - match: { prefix: "/bar" }
  //     requires:
  //       requires_all:
  //         requirements:
  //           - provider_id: "provider1"
  //           - provider_id: "provider2"
  //
  repeated RequirementRule rules = 3;
}
