syntax = "proto3";

package envoy.config.filter.network.find_and_replace.v2alpha1;
option go_package = "v2alpha1";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: Find and Replace]
// Find and Replace Network Filter :ref:`configuration overview
// <config_network_filters_find_and_replace>`.

// Find and Replace network filter config.
//
message FindAndReplace {
  // Optional string to find in data from the downstream side (read filter).
  // Finding the string is currently only supported from the very beginning of the data on a given
  // connection, meaning the string has to match the beginning of the data. If empty (or not
  // specified), then :ref:`input_rewrite_to
  // <envoy_api_field_config.filter.network.find_and_replace.v2alpha1.FindAndReplace.input_rewrite_to>`
  // effectively becomes an insertion instead of a replacement string. Defaults to empty.
  string input_rewrite_from = 1;

  // Optional string that replaces the string :ref:`input_rewrite_from
  // <envoy_api_field_config.filter.network.find_and_replace.v2alpha1.FindAndReplace.input_rewrite_from>`
  // (if found). If empty (or not specified), then it effectively removes the found string. Defaults
  // to empty.
  string input_rewrite_to = 2;

  // Optional string to find in data from the upstream side (write filter).
  // Behavior otherwise identical to :ref:`input_rewrite_from
  // <envoy_api_field_config.filter.network.find_and_replace.v2alpha1.FindAndReplace.input_rewrite_from>`
  string output_rewrite_from = 3;

  // Optional string that replaces the string :ref:`output_rewrite_from
  // Behavior otherwise identical to :ref:`input_rewrite_to
  // <envoy_api_field_config.filter.network.find_and_replace.v2alpha1.FindAndReplace.input_rewrite_to>`
  string output_rewrite_to = 4;
}
