syntax = "proto3";

package envoy.extensions.transport_sockets.internal.v3;

import "xds/annotations/v3/status.proto";

import "envoy/config/core/v3/base.proto";
import "envoy/type/metadata/v3/metadata.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.internal.v3";
option java_outer_classname = "InternalUpstreamProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/internal/v3;internalv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Internal Upstream]
// [#extension: envoy.transport_sockets.internal_upstream]

// Configuration for the internal upstream address. An internal address defines
// a loopback user space socket residing in the same proxy instance. This
// extension allows passing additional structured state across the user space
// socket in addition to the regular byte stream. The purpose is to facilitate
// communication between filters on the physical and the internal connections.
//
// Because the passthrough state is transferred once per the upstream
// connection, the passthrough state is included in the hash key used to select
// an upstream connection.
//
// .. note::
//
//  Using internal upstream transport affects load balancing decisions if the passthrough
//  state is derived from the downstream connection.
message InternalUpstreamTransport {
  // Describes the location of the imported metadata value.
  message MetadataValueSource {
    // Specifies what kind of metadata.
    type.metadata.v3.MetadataKind kind = 1;

    // Name is the filter namespace used in the dynamic metadata.
    string name = 2 [(validate.rules).string = {min_len: 1}];
  }

  // Describes the location of the imported filter state object from the downstream connection.
  message FilterStateSource {
    // Name is the imported filter state object name.
    string name = 2 [(validate.rules).string = {min_len: 1}];
  }

  // Specifies the metadata namespaces and values to insert into the downstream
  // internal connection dynamic metadata when an internal address is used as a host.
  repeated MetadataValueSource passthrough_metadata = 1;

  // Specifies the list of filter state object names to insert into the downstream
  // internal connection when an internal address is used as a host. The filter state
  // objects must be mutable. These objects participate in the connection hashing decisions.
  repeated FilterStateSource passthrough_filter_state_objects = 2
      [(xds.annotations.v3.field_status).work_in_progress = true];
  ;

  // The underlying transport socket being wrapped.
  config.core.v3.TransportSocket transport_socket = 3 [(validate.rules).message = {required: true}];
}
