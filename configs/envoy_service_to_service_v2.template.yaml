{% import 'routing_helper_v2.template.yaml' as helper -%}
{% import 'access_log_format_helper_v2.template.yaml' as access_log_helper -%}
{% macro ingress_listener(protocol, address, port_value) -%}
- address:
    socket_address:
      protocol: {{protocol}}
      address: {{address}}
      port_value: {{port_value}}
  filter_chains:
  - filters:
    - name: envoy.http_connection_manager
      config:
        codec_type: AUTO
        stat_prefix: ingress_http
        route_config:
          name: local_route
          virtual_hosts:
          - name: local_service
            domains:
            - "*"
            routes:
            - match:
                prefix: "/"
                headers:
                - name: content-type
                  value: application/grpc
              route:
                cluster: local_service_grpc
            - match:
                prefix: "/"
              route:
                cluster: local_service
        http_filters:
        - name: envoy.health_check
          config:
           pass_through_mode: true
           endpoint: "/healthcheck"
           cache_time: 2.5s
        - name: envoy.buffer
          config:
           max_request_bytes: 5242880
           max_request_time: 120s
        - name: envoy.router
          config: {}
        access_log:
        - name: envoy.file_access_log
          filter:
            and_filter:
              filters:
                - or_filter:
                    filters:
                    - status_code_filter:
                        comparison:
                          op: GE
                          value:
                            default_value: 400
                            runtime_key: access_log.access_error.status
                    - status_code_filter:
                        comparison:
                          op: EQ
                          value:
                            default_value: 0
                            runtime_key: access_log.access_error.status
                    - duration_filter:
                        comparison:
                          op: GE
                          value:
                            default_value: 2000
                            runtime_key: access_log.access_error.duration
                - not_health_check_filter: {}
          config:
            path: /var/log/envoy/access_error.log
            format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"
        idle_timeout: 840s
        tracing:
          operation_name: INGRESS
{% endmacro -%}
static_resources:
  listeners:
  {{ ingress_listener("tcp", "0.0.0.0", 9211) | indent(2)}}
  #listener at 127.0.0.1:9001 is to be updated after internal_cluster_definition update
  - address:
      socket_address:
        protocol: TCP
        port_value: 9001
        address: 127.0.0.1
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: AUTO
          stat_prefix: egress_http
          route_config:
            name: local_route
            virtual_hosts:
            {% for service, options in internal_virtual_hosts.iteritems() %}
            - name: {{ service }}
              domains:
              - {{ service }}
              routes:
              - match:
                  prefix: "/"
                route:
                  {{ helper.make_route_internal(service, options)|indent(16) }}
              #add ratelimits here
            {% endfor %}
          add_user_agent: true
          tracing:
            operation_name: EGRESS
          idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            config:
              path: /var/log/envoy/access_error.log
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"
          use_remote_address: true
          http_filters:
          - name: envoy.rate_limit
            config:
              domain: envoy_service_to_service
          - name: envoy.grpc_http1_bridge
            config: {}
          - name: envoy.router
            config: {}

  - address:
      socket_address:
        protocol: TCP
        port_value: 9002
        address: 127.0.0.1
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: AUTO
          stat_prefix: egress_http
          rds:
            config_source:
               api_config_source:
                 api_type: GRPC
                 cluster_names:
                 - rds
            route_config_name: rds_config_for_listener_1
          add_user_agent: true
          tracing:
            operation_name: EGRESS
          idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            config:
              path: /var/log/envoy/access_error.log
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"
          use_remote_address: true
          http_filters:
          - name: envoy.rate_limit
            config:
              domain: envoy_service_to_service
          - name: envoy.grpc_http1_bridge
            config: {}
          - name: envoy.router
            config: {}
  {% if external_virtual_hosts|length > 0 or mongos_servers|length > 0 %}{% endif -%}
  {% for mapping in external_virtual_hosts -%}
  - name: "{{ mapping['address']}}"
    address:
      socket_address:
        address: "{{ mapping['address'] }}"
        protocol: TCP
        port_value: 9901
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: AUTO
          idle_timeout: 840s
          stat_prefix: egress_{{ mapping['name'] }}
          #update access_logs here
          route_config:
            virtual_hosts:
            {% for host in mapping['hosts'] %}
            - name: egress_{{ host['name'] }}
              domains:
              - "{{ host['domain'] }}"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: egress_{{ host['name'] }}
                  retry_policy:
                    retry_on: connect-failure
                  {% if host.get('host_rewrite', False) %}
                  host_rewrite: "{{host['host_rewrite']}}"
                  {% endif %}
            {% if not loop.last %}{% endif %}
            {% endfor %}
          http_filters:
          {% if mapping['name'] in ['dynamodb_iad', 'dynamodb_legacy'] -%}
          - name: envoy.http_dynamo_filter
            config: {}
          {% endif -%}
          - name: envoy.router
            config: {}
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - status_code_filter:
                      comparison:
                        op: EQ
                        value:
                          default_value: 0
                          runtime_key: access_log.access_error.status
                  {% if mapping.get('log_high_latency_requests', True) %}
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  {% endif %}
            config:
              path: /var/log/envoy/access_error.log
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"
  {% if (mongos_servers|length > 0) or (mongos_servers|length == 0 and not loop.last ) %}{% endif -%}
  {% endfor -%}
  {% for key, value in mongos_servers.iteritems() -%}
  - name : "{{ value['address'] }}"
    address:
      socket_address:
        address: "{{ value['address'] }}"
        protocol: TCP
        port_value: 9003
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy
        config:
          stat_prefix: mongo_{{ key }}
          cluster: mongo_{{ key }}
      - name: envoy.mongo_proxy
        config:
          stat_prefix: "{{ key }}"
          access_log: "/var/log/envoy/mongo_{{ key }}.log"
      {% if value.get('ratelimit', False) %}
      - name: envoy.ratelimit
        config:
          stat_prefix: "{{ key }}"
          domain: envoy_mongo_cps
          descriptors:
            entries:
            - key: database
              value: "{{ key }}"
      {% endif %}
  {% if not loop.last %}{% endif -%}
  {% endfor -%}
  clusters:
  {% for service, options in internal_virtual_hosts.iteritems() -%}
  - {{ helper.internal_cluster_definition(service, options)|indent(2)}}
  {% endfor -%}
  {% for mapping in external_virtual_hosts -%}
  {% for host in mapping['hosts'] -%}
  - name: egress_{{ host['name'] }}
    #need to update tls and timeout accordingly
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        address: {{ host['remote_address'] }}
        port_value: {{ host['port_value'] }}
        protocol: {{ host['protocol'] }}
  {% endfor -%}
  {% endfor -%}
  {% for key, value in mongos_servers.iteritems() -%}
  - name: mongo_{{ key }}
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: RANDOM
    hosts:
    {% for server in value['hosts'] -%}
    - socket_address:
        protocol: {{ server['protocol'] }}
        port_value: {{ server['port_value'] }}
        address: {{ server['address'] }}
    {% if not loop.last -%}{% endif -%}
    {% endfor -%}
  {% endfor %}
  - name: main_website
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        address: main_website.com
        port_value: 443
    tls_context: { sni: www.main_website.com }
  - name: local_service
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 8080
    circuit_breakers:
      thresholds:
        max_pending_requests: 30
        max_connections: 100
  - name: local_service_grpc
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    hosts:
    - socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 8081
    circuit_breakers:
      thresholds:
        max_requests: 200
  - name: rds
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: rds.yourcompany.net
        port_value: 80
  - name: statsd
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 8125
  - name: lightstep_saas
    connect_timeout: 1s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: collector-grpc.lightstep.com
        port_value: 443
    http2_protocol_options:
      max_concurrent_streams: 100
    tls_context:
      common_tls_context:
        validation_context:
          trusted_ca:
            filename: certs/cacert.pem
          verify_subject_alt_name:
          - collector-grpc.lightstep.com
  - name: cds_cluster
    connect_timeout: 0.25s
    type: STRICT_DNS  
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: cds.yourcompany.net
        port_value: 80
flags_path: /etc/envoy/flags
stats_sinks:
  - name: envoy.statsd
    config:
      tcp_cluster_name: statsd
tracing:
  http:
    name: envoy.lightstep
    config:
      access_token_file: /etc/envoy/lightstep_access_token
      collector_cluster: lightstep_saas
rate_limit_service:
  grpc_service:
    envoy_grpc:
      cluster_name: ratelimit
admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901