syntax = "proto3";

package envoy.service.discovery.v4alpha;

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.service.discovery.v4alpha";
option java_outer_classname = "DynamicParameterConstraintsProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Dynamic Parameter Constraints]

// A set of dynamic parameter constraints used to select the variant of
// a given resource desired by a client. Clients send a set of
// constraints with each subscription request, and servers respond by
// sending a resource with a matching set of dynamic parameters.
message DynamicParameterConstraints {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.discovery.v3.DynamicParameterConstraints";

  // Constraints for a given key.
  message KeyConstraints {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.discovery.v3.DynamicParameterConstraints.KeyConstraints";

    message Constraint {
      option (udpa.annotations.versioning).previous_message_type =
          "envoy.service.discovery.v3.DynamicParameterConstraints.KeyConstraints.Constraint";

      // A list of one or more integer ranges.
      // A value is considered to match if it falls in any of the ranges.
      message IntegerRangeList {
        option (udpa.annotations.versioning).previous_message_type =
            "envoy.service.discovery.v3.DynamicParameterConstraints.KeyConstraints.Constraint."
            "IntegerRangeList";

        // At least one of *min_value* or *max_value* must be set.
        message Range {
          option (udpa.annotations.versioning).previous_message_type =
              "envoy.service.discovery.v3.DynamicParameterConstraints.KeyConstraints.Constraint."
              "IntegerRangeList.Range";

          // If specified, value may not be less than this.
          uint64 min_value = 1;

          // If specified, value may not be greater than this.
          uint64 max_value = 2;
        }

        repeated Range range = 1;
      }

      oneof constraint {
        // The key must have this specific value.
        string value = 1;

        // The key's value must be integers and within one of the ranges in this list.
        IntegerRangeList integer_range_list = 2;
      }
    }

    // A list of one or more constraints on the value of the key.
    // All constraints must be met.
    repeated Constraint constraints = 2;
  }

  // One entry per key.
  // Note that if a key has a constraint here, it will place restrictions
  // on the key's value if the key is present on a variant of the resource.
  // However, if a key has a constraint here but is not present on the
  // resource, it will match, regardless of what the constraint says.
  map<string, KeyConstraints> key_constraints = 1;
}
