// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zipkin.proto

#ifndef PROTOBUF_INCLUDED_zipkin_2eproto
#define PROTOBUF_INCLUDED_zipkin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zipkin_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_zipkin_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_zipkin_2eproto();
namespace zipkin {
namespace proto3 {
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class ListOfSpans;
class ListOfSpansDefaultTypeInternal;
extern ListOfSpansDefaultTypeInternal _ListOfSpans_default_instance_;
class ReportResponse;
class ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_TagsEntry_DoNotUse;
class Span_TagsEntry_DoNotUseDefaultTypeInternal;
extern Span_TagsEntry_DoNotUseDefaultTypeInternal _Span_TagsEntry_DoNotUse_default_instance_;
}  // namespace proto3
}  // namespace zipkin
namespace google {
namespace protobuf {
template<> ::zipkin::proto3::Annotation* Arena::CreateMaybeMessage<::zipkin::proto3::Annotation>(Arena*);
template<> ::zipkin::proto3::Endpoint* Arena::CreateMaybeMessage<::zipkin::proto3::Endpoint>(Arena*);
template<> ::zipkin::proto3::ListOfSpans* Arena::CreateMaybeMessage<::zipkin::proto3::ListOfSpans>(Arena*);
template<> ::zipkin::proto3::ReportResponse* Arena::CreateMaybeMessage<::zipkin::proto3::ReportResponse>(Arena*);
template<> ::zipkin::proto3::Span* Arena::CreateMaybeMessage<::zipkin::proto3::Span>(Arena*);
template<> ::zipkin::proto3::Span_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::zipkin::proto3::Span_TagsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zipkin {
namespace proto3 {

enum Span_Kind {
  Span_Kind_SPAN_KIND_UNSPECIFIED = 0,
  Span_Kind_CLIENT = 1,
  Span_Kind_SERVER = 2,
  Span_Kind_PRODUCER = 3,
  Span_Kind_CONSUMER = 4,
  Span_Kind_Span_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Span_Kind_Span_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Span_Kind_IsValid(int value);
const Span_Kind Span_Kind_Kind_MIN = Span_Kind_SPAN_KIND_UNSPECIFIED;
const Span_Kind Span_Kind_Kind_MAX = Span_Kind_CONSUMER;
const int Span_Kind_Kind_ARRAYSIZE = Span_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Span_Kind_descriptor();
inline const ::std::string& Span_Kind_Name(Span_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Span_Kind_descriptor(), value);
}
inline bool Span_Kind_Parse(
    const ::std::string& name, Span_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Span_Kind>(
    Span_Kind_descriptor(), name, value);
}
// ===================================================================

class Span_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Span_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Span_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Span_TagsEntry_DoNotUse();
  Span_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Span_TagsEntry_DoNotUse& other);
  static const Span_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Span_TagsEntry_DoNotUse*>(&_Span_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Span :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Span) */ {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Span* other);
  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Span_Kind Kind;
  static const Kind SPAN_KIND_UNSPECIFIED =
    Span_Kind_SPAN_KIND_UNSPECIFIED;
  static const Kind CLIENT =
    Span_Kind_CLIENT;
  static const Kind SERVER =
    Span_Kind_SERVER;
  static const Kind PRODUCER =
    Span_Kind_PRODUCER;
  static const Kind CONSUMER =
    Span_Kind_CONSUMER;
  static inline bool Kind_IsValid(int value) {
    return Span_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Span_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Span_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Span_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Span_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Span_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Span_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .zipkin.proto3.Annotation annotations = 10;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 10;
  ::zipkin::proto3::Annotation* mutable_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Annotation >*
      mutable_annotations();
  const ::zipkin::proto3::Annotation& annotations(int index) const;
  ::zipkin::proto3::Annotation* add_annotations();
  const ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Annotation >&
      annotations() const;

  // map<string, string> tags = 11;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // bytes trace_id = 1;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // bytes parent_id = 2;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const void* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // bytes id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .zipkin.proto3.Endpoint local_endpoint = 8;
  bool has_local_endpoint() const;
  void clear_local_endpoint();
  static const int kLocalEndpointFieldNumber = 8;
  const ::zipkin::proto3::Endpoint& local_endpoint() const;
  ::zipkin::proto3::Endpoint* release_local_endpoint();
  ::zipkin::proto3::Endpoint* mutable_local_endpoint();
  void set_allocated_local_endpoint(::zipkin::proto3::Endpoint* local_endpoint);

  // .zipkin.proto3.Endpoint remote_endpoint = 9;
  bool has_remote_endpoint() const;
  void clear_remote_endpoint();
  static const int kRemoteEndpointFieldNumber = 9;
  const ::zipkin::proto3::Endpoint& remote_endpoint() const;
  ::zipkin::proto3::Endpoint* release_remote_endpoint();
  ::zipkin::proto3::Endpoint* mutable_remote_endpoint();
  void set_allocated_remote_endpoint(::zipkin::proto3::Endpoint* remote_endpoint);

  // fixed64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint64 duration = 7;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  ::google::protobuf::uint64 duration() const;
  void set_duration(::google::protobuf::uint64 value);

  // .zipkin.proto3.Span.Kind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::zipkin::proto3::Span_Kind kind() const;
  void set_kind(::zipkin::proto3::Span_Kind value);

  // bool debug = 12;
  void clear_debug();
  static const int kDebugFieldNumber = 12;
  bool debug() const;
  void set_debug(bool value);

  // bool shared = 13;
  void clear_shared();
  static const int kSharedFieldNumber = 13;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Span)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Annotation > annotations_;
  ::google::protobuf::internal::MapField<
      Span_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zipkin::proto3::Endpoint* local_endpoint_;
  ::zipkin::proto3::Endpoint* remote_endpoint_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 duration_;
  int kind_;
  bool debug_;
  bool shared_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class Endpoint :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Endpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Endpoint* other);
  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const final {
    return CreateMaybeMessage<Endpoint>(nullptr);
  }

  Endpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Endpoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // bytes ipv4 = 2;
  void clear_ipv4();
  static const int kIpv4FieldNumber = 2;
  const ::std::string& ipv4() const;
  void set_ipv4(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv4(::std::string&& value);
  #endif
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  ::std::string* mutable_ipv4();
  ::std::string* release_ipv4();
  void set_allocated_ipv4(::std::string* ipv4);

  // bytes ipv6 = 3;
  void clear_ipv6();
  static const int kIpv6FieldNumber = 3;
  const ::std::string& ipv6() const;
  void set_ipv6(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6(::std::string&& value);
  #endif
  void set_ipv6(const char* value);
  void set_ipv6(const void* value, size_t size);
  ::std::string* mutable_ipv6();
  ::std::string* release_ipv6();
  void set_allocated_ipv6(::std::string* ipv6);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Endpoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr ipv4_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class Annotation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Annotation* other);
  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // fixed64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Annotation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class ListOfSpans :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.ListOfSpans) */ {
 public:
  ListOfSpans();
  virtual ~ListOfSpans();

  ListOfSpans(const ListOfSpans& from);

  inline ListOfSpans& operator=(const ListOfSpans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOfSpans(ListOfSpans&& from) noexcept
    : ListOfSpans() {
    *this = ::std::move(from);
  }

  inline ListOfSpans& operator=(ListOfSpans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListOfSpans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOfSpans* internal_default_instance() {
    return reinterpret_cast<const ListOfSpans*>(
               &_ListOfSpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListOfSpans* other);
  friend void swap(ListOfSpans& a, ListOfSpans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOfSpans* New() const final {
    return CreateMaybeMessage<ListOfSpans>(nullptr);
  }

  ListOfSpans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOfSpans>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOfSpans& from);
  void MergeFrom(const ListOfSpans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOfSpans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zipkin.proto3.Span spans = 1;
  int spans_size() const;
  void clear_spans();
  static const int kSpansFieldNumber = 1;
  ::zipkin::proto3::Span* mutable_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Span >*
      mutable_spans();
  const ::zipkin::proto3::Span& spans(int index) const;
  ::zipkin::proto3::Span* add_spans();
  const ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Span >&
      spans() const;

  // @@protoc_insertion_point(class_scope:zipkin.proto3.ListOfSpans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Span > spans_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class ReportResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.ReportResponse) */ {
 public:
  ReportResponse();
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReportResponse* other);
  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const final {
    return CreateMaybeMessage<ReportResponse>(nullptr);
  }

  ReportResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zipkin.proto3.ReportResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Span

// bytes trace_id = 1;
inline void Span::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::trace_id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.trace_id)
  return trace_id_.GetNoArena();
}
inline void Span::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.trace_id)
}
#if LANG_CXX11
inline void Span::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.trace_id)
}
#endif
inline void Span::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.trace_id)
}
inline void Span::set_trace_id(const void* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.trace_id)
}
inline ::std::string* Span::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_trace_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.trace_id)
}

// bytes parent_id = 2;
inline void Span::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::parent_id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.parent_id)
  return parent_id_.GetNoArena();
}
inline void Span::set_parent_id(const ::std::string& value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.parent_id)
}
#if LANG_CXX11
inline void Span::set_parent_id(::std::string&& value) {
  
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.parent_id)
}
#endif
inline void Span::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.parent_id)
}
inline void Span::set_parent_id(const void* value, size_t size) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.parent_id)
}
inline ::std::string* Span::mutable_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_parent_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.parent_id)
  
  return parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.parent_id)
}

// bytes id = 3;
inline void Span::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.id)
  return id_.GetNoArena();
}
inline void Span::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.id)
}
#if LANG_CXX11
inline void Span::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.id)
}
#endif
inline void Span::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.id)
}
inline void Span::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.id)
}
inline ::std::string* Span::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.id)
}

// .zipkin.proto3.Span.Kind kind = 4;
inline void Span::clear_kind() {
  kind_ = 0;
}
inline ::zipkin::proto3::Span_Kind Span::kind() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.kind)
  return static_cast< ::zipkin::proto3::Span_Kind >(kind_);
}
inline void Span::set_kind(::zipkin::proto3::Span_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.kind)
}

// string name = 5;
inline void Span::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.name)
  return name_.GetNoArena();
}
inline void Span::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.name)
}
#if LANG_CXX11
inline void Span::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.name)
}
#endif
inline void Span::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.name)
}
inline void Span::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.name)
}
inline ::std::string* Span::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.name)
}

// fixed64 timestamp = 6;
inline void Span::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Span::timestamp() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.timestamp)
  return timestamp_;
}
inline void Span::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.timestamp)
}

// uint64 duration = 7;
inline void Span::clear_duration() {
  duration_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Span::duration() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.duration)
  return duration_;
}
inline void Span::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.duration)
}

// .zipkin.proto3.Endpoint local_endpoint = 8;
inline bool Span::has_local_endpoint() const {
  return this != internal_default_instance() && local_endpoint_ != nullptr;
}
inline void Span::clear_local_endpoint() {
  if (GetArenaNoVirtual() == nullptr && local_endpoint_ != nullptr) {
    delete local_endpoint_;
  }
  local_endpoint_ = nullptr;
}
inline const ::zipkin::proto3::Endpoint& Span::local_endpoint() const {
  const ::zipkin::proto3::Endpoint* p = local_endpoint_;
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.local_endpoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::zipkin::proto3::Endpoint*>(
      &::zipkin::proto3::_Endpoint_default_instance_);
}
inline ::zipkin::proto3::Endpoint* Span::release_local_endpoint() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.local_endpoint)
  
  ::zipkin::proto3::Endpoint* temp = local_endpoint_;
  local_endpoint_ = nullptr;
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::mutable_local_endpoint() {
  
  if (local_endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::zipkin::proto3::Endpoint>(GetArenaNoVirtual());
    local_endpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.local_endpoint)
  return local_endpoint_;
}
inline void Span::set_allocated_local_endpoint(::zipkin::proto3::Endpoint* local_endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_endpoint_;
  }
  if (local_endpoint) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_endpoint, submessage_arena);
    }
    
  } else {
    
  }
  local_endpoint_ = local_endpoint;
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.local_endpoint)
}

// .zipkin.proto3.Endpoint remote_endpoint = 9;
inline bool Span::has_remote_endpoint() const {
  return this != internal_default_instance() && remote_endpoint_ != nullptr;
}
inline void Span::clear_remote_endpoint() {
  if (GetArenaNoVirtual() == nullptr && remote_endpoint_ != nullptr) {
    delete remote_endpoint_;
  }
  remote_endpoint_ = nullptr;
}
inline const ::zipkin::proto3::Endpoint& Span::remote_endpoint() const {
  const ::zipkin::proto3::Endpoint* p = remote_endpoint_;
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.remote_endpoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::zipkin::proto3::Endpoint*>(
      &::zipkin::proto3::_Endpoint_default_instance_);
}
inline ::zipkin::proto3::Endpoint* Span::release_remote_endpoint() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.remote_endpoint)
  
  ::zipkin::proto3::Endpoint* temp = remote_endpoint_;
  remote_endpoint_ = nullptr;
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::mutable_remote_endpoint() {
  
  if (remote_endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::zipkin::proto3::Endpoint>(GetArenaNoVirtual());
    remote_endpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.remote_endpoint)
  return remote_endpoint_;
}
inline void Span::set_allocated_remote_endpoint(::zipkin::proto3::Endpoint* remote_endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete remote_endpoint_;
  }
  if (remote_endpoint) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remote_endpoint, submessage_arena);
    }
    
  } else {
    
  }
  remote_endpoint_ = remote_endpoint;
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.remote_endpoint)
}

// repeated .zipkin.proto3.Annotation annotations = 10;
inline int Span::annotations_size() const {
  return annotations_.size();
}
inline void Span::clear_annotations() {
  annotations_.Clear();
}
inline ::zipkin::proto3::Annotation* Span::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.annotations)
  return annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Annotation >*
Span::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:zipkin.proto3.Span.annotations)
  return &annotations_;
}
inline const ::zipkin::proto3::Annotation& Span::annotations(int index) const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.annotations)
  return annotations_.Get(index);
}
inline ::zipkin::proto3::Annotation* Span::add_annotations() {
  // @@protoc_insertion_point(field_add:zipkin.proto3.Span.annotations)
  return annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Annotation >&
Span::annotations() const {
  // @@protoc_insertion_point(field_list:zipkin.proto3.Span.annotations)
  return annotations_;
}

// map<string, string> tags = 11;
inline int Span::tags_size() const {
  return tags_.size();
}
inline void Span::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Span::tags() const {
  // @@protoc_insertion_point(field_map:zipkin.proto3.Span.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Span::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:zipkin.proto3.Span.tags)
  return tags_.MutableMap();
}

// bool debug = 12;
inline void Span::clear_debug() {
  debug_ = false;
}
inline bool Span::debug() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.debug)
  return debug_;
}
inline void Span::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.debug)
}

// bool shared = 13;
inline void Span::clear_shared() {
  shared_ = false;
}
inline bool Span::shared() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.shared)
  return shared_;
}
inline void Span::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.shared)
}

// -------------------------------------------------------------------

// Endpoint

// string service_name = 1;
inline void Endpoint::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::service_name() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.service_name)
  return service_name_.GetNoArena();
}
inline void Endpoint::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.service_name)
}
#if LANG_CXX11
inline void Endpoint::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.service_name)
}
#endif
inline void Endpoint::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.service_name)
}
inline void Endpoint::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.service_name)
}
inline ::std::string* Endpoint::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_service_name() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_service_name(::std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.service_name)
}

// bytes ipv4 = 2;
inline void Endpoint::clear_ipv4() {
  ipv4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::ipv4() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.ipv4)
  return ipv4_.GetNoArena();
}
inline void Endpoint::set_ipv4(const ::std::string& value) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.ipv4)
}
#if LANG_CXX11
inline void Endpoint::set_ipv4(::std::string&& value) {
  
  ipv4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.ipv4)
}
#endif
inline void Endpoint::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.ipv4)
}
inline void Endpoint::set_ipv4(const void* value, size_t size) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.ipv4)
}
inline ::std::string* Endpoint::mutable_ipv4() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.ipv4)
  return ipv4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_ipv4() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.ipv4)
  
  return ipv4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_ipv4(::std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.ipv4)
}

// bytes ipv6 = 3;
inline void Endpoint::clear_ipv6() {
  ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endpoint::ipv6() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.ipv6)
  return ipv6_.GetNoArena();
}
inline void Endpoint::set_ipv6(const ::std::string& value) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.ipv6)
}
#if LANG_CXX11
inline void Endpoint::set_ipv6(::std::string&& value) {
  
  ipv6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.ipv6)
}
#endif
inline void Endpoint::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.ipv6)
}
inline void Endpoint::set_ipv6(const void* value, size_t size) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.ipv6)
}
inline ::std::string* Endpoint::mutable_ipv6() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.ipv6)
  return ipv6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endpoint::release_ipv6() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.ipv6)
  
  return ipv6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.ipv6)
}

// int32 port = 4;
inline void Endpoint::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.port)
  return port_;
}
inline void Endpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.port)
}

// -------------------------------------------------------------------

// Annotation

// fixed64 timestamp = 1;
inline void Annotation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Annotation::timestamp() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Annotation.timestamp)
  return timestamp_;
}
inline void Annotation::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:zipkin.proto3.Annotation.timestamp)
}

// string value = 2;
inline void Annotation::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Annotation::value() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Annotation.value)
  return value_.GetNoArena();
}
inline void Annotation::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Annotation.value)
}
#if LANG_CXX11
inline void Annotation::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Annotation.value)
}
#endif
inline void Annotation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Annotation.value)
}
inline void Annotation::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Annotation.value)
}
inline ::std::string* Annotation::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Annotation.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Annotation::release_value() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Annotation.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Annotation.value)
}

// -------------------------------------------------------------------

// ListOfSpans

// repeated .zipkin.proto3.Span spans = 1;
inline int ListOfSpans::spans_size() const {
  return spans_.size();
}
inline void ListOfSpans::clear_spans() {
  spans_.Clear();
}
inline ::zipkin::proto3::Span* ListOfSpans::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.ListOfSpans.spans)
  return spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Span >*
ListOfSpans::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:zipkin.proto3.ListOfSpans.spans)
  return &spans_;
}
inline const ::zipkin::proto3::Span& ListOfSpans::spans(int index) const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.ListOfSpans.spans)
  return spans_.Get(index);
}
inline ::zipkin::proto3::Span* ListOfSpans::add_spans() {
  // @@protoc_insertion_point(field_add:zipkin.proto3.ListOfSpans.spans)
  return spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zipkin::proto3::Span >&
ListOfSpans::spans() const {
  // @@protoc_insertion_point(field_list:zipkin.proto3.ListOfSpans.spans)
  return spans_;
}

// -------------------------------------------------------------------

// ReportResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3
}  // namespace zipkin

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zipkin::proto3::Span_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zipkin::proto3::Span_Kind>() {
  return ::zipkin::proto3::Span_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_zipkin_2eproto
