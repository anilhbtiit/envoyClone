syntax = "proto3";

package envoy.extensions.rbac.matchers.upstream_port.v3;

import "envoy/type/v3/range.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.rbac.matchers.upstream_port.v3";
option java_outer_classname = "UpstreamPortMatcherProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: RBAC upstream port range matcher plugin]
// [#extension: envoy.rbac.matchers.upstream_port]

// This is configuration for matching upstream port.
message UpstreamPortMatcher {
  // A Port range that will be used to match the upstream port.
  // This matcher requires a filter in the chain to have saved the upstream address(es) in the
  // filter state before the matcher is executed by RBAC filter. The state should be saved with key
  // `envoy.rbac.matcher.upstream_address_set` (See
  // :repo:`upstream_address_set.h<source/common/stream_info/upstream_address_set.h>`).
  // Also, See :repo:`proxy_filter.cc<
  // source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>` for an example of a
  // filter which populates the FilterState. If the key is not found in the filter state, the
  // matcher will evaluate to `false`.
  type.v3.Int64Range upstream_port_range = 1;
}
