syntax = "proto3";

package envoy.extensions.bootstrap.internal_listener_registry.v3;

import "udpa/annotations/status.proto";
import "xds/annotations/v3/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.bootstrap.internal_listener_registry.v3";
option java_outer_classname = "InternalListenerProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/bootstrap/internal_listener_registry/v3;internal_listener_registryv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: InternalListenerRegistry]
//
// This extension contains 2 major components to add a listener with
// an :ref:`envoy internal address <envoy_v3_api_msg_config.core.v3.EnvoyInternalAddress>`
// and to create a client connection to that :ref:`listener <envoy.config.listener.v3.Listener>`
//
// 1. The bootstrap extension `envoy.bootstrap.internal_listener_registry`
//
// This bootstrap extension is required to support looking up the target listener via an
// :ref:`envoy internal address <envoy_v3_api_msg_config.core.v3.EnvoyInternalAddress>` on each worker threads.
//
// 2. The client connection factory `network.connection.client.envoy_internal`
//
// This factory is implicitly instantiated by the dispatcher to establish a client connection to the above
// internal listener,
//
// [#extension: envoy.bootstrap.internal_listener_registry]

// [#not-implemented-hide:]
// Configuration for internal listener registry.
// [#extension-category: envoy.bootstrap]
message InternalListenerRegistry {
}
