syntax = "proto3";

package envoy.extensions.dso.v3;

import "xds/annotations/v3/status.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.dso.v3";
option java_outer_classname = "DsoProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/dso/v3;dsov3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Dso]
// Dso config.
//
// [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
// The dso type is used to support add specialized functionality into
// Envoy dynamically at runtime.
//
// For example, to enable the go plugin 'auth' and 'limit' dynamic libraries into
// Envoy, which can avoid rebuilding Envoy.
//
// * Develop go-plugin
//
// We can implement the interface of :ref:`StreamFilter <contrib.go_plugin_api.plugin.StreamFilter>`
// API by the GO language to achieve the effects of Envoy native filter.
// Then put the GO plugin source code into the ${OUTPUT}/src/ directory with the name of the plugin
// for GO plugin builds.
// The following examples implement limit and auth GO plugins.
//
// .. code-block:: bash
//
// $tree /home/admin/envoy/go-plugins/src/
// |--auth
// |   |--factory.go
// |   |--filter.go
// ---limit
//     |--factory.go
//     |--filter.go
//
// * Build go-plugin
//
// Build the Go plugin so by `go_plugin_generate.sh` script, below example the `liblimit.so` and
// `libauth.so` will be generated in the `/home/admin/envoy/go-plugins/` directory.
//
// .. code-block:: bash
//
//   #!/bin/bash
//   if [ $# != 2 ]; then
//      echo "need input the go plugin name"
//      exit 1
//   fi
//
//   PLUGINNAME=$1
//   OUTPUT=/home/admin/envoy/go-plugins/
//   PLUGINSRCDIR=${OUTPUT}/src/${PLUGINNAME}
//   go build --buildmode=c-shared  -v -o $OUTPUT/lib${PLUGINNAME}.so $PLUGINSRCDIR
//
// .. code-block:: bash
//
//   $go_plugin_generate.sh limit
//   $go_plugin_generate.sh auth
//
// * Configure go-plugin
//
// Use the dso extension to import the library of the go plugin `limit` and `auth` into Envoy,
// and then use the http filter of :ref: `golang <envoy.filters.http.golang>` to specify
// :ref: `so_id` <envoy.extensions.dso.v3.dso> in ingress and egress to enable the plugin.
//
// Example:
//
// .. code-block:: yaml
//
//   bootstrap_extensions:
//     - name: envoy.bootstrap.dso
//       typed_config:
//         "@type": type.googleapis.com/envoy.extensions.dso.v3.dso
//         so_id: plugin-limit
//         so_path: "/home/admin/envoy/go-plugins/liblimit.so"
//     - name: envoy.bootstrap.dso
//       typed_config:
//         "@type": type.googleapis.com/envoy.extensions.dso.v3.dso
//         so_id: plugin-auth
//         so_path: "/home/admin/envoy/go-plugins/libauth.so"
//   static_resources:
//     listeners:
//       - name: ingress
//         address:
//           socket_address:
//             protocol: TCP
//             address: 0.0.0.0
//             port_value: 8080
//         filter_chains:
//           - filters:
//               - name: envoy.filters.network.http_connection_manager
//               ......
//                   http_filters:
//                     - name: envoy.filters.http.golang
//                       typed_config:
//                         "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3.Config
//                         so_id: plugin-limit
//                         plugine_name: limit
//                         plugin_config:
//                           "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.limit.v3.Config
//                           xxx1: xx1
//                           xxx2: xx2
//                     - name: envoy.filters.http.header_to_metadata
//                     - name: envoy.filters.http.golang
//                       typed_config:
//                         "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3.Config
//                         so_id: plugin-auth
//                         plugine_name: auth
//                         plugin_config:
//                           "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.auth.v3.Config
//                           xxx1: xx1
//                           xxx2: xx2
//                     - name: envoy.filters.http.router
//       - name: egress
//         address:
//           socket_address:
//             protocol: TCP
//             address: 0.0.0.0
//             port_value: 8081
//         filter_chains:
//           - filters:
//               - name: envoy.filters.network.http_connection_manager
//                   ......
//                   http_filters:
//                     - name: envoy.filters.http.golang
//                       typed_config:
//                         "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3.Config
//                         so_id: plugin-auth
//                         plugine_name: auth
//                         plugin_config:
//                           "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.auth.v3.Config
//                           xxx1: xx1
//                           xxx2: xx2
//                     - name: envoy.filters.http.router
// [#not-implemented-hide:]
message dso {
  // so_id is a unique ID for a dynamic library file, must be unique globally.
  string so_id = 1 [(validate.rules).string = {min_bytes: 1}];

  // so_path is an absolute path for loads spec dynamic library file.
  string so_path = 2 [(validate.rules).string = {min_bytes: 1}];
}
