# Generate api/BUILD based on API type database. This contains target for v2, v3
# and all API protos. This is not the ideal way to be generating docs, see
# https://github.com/envoyproxy/envoy/issues/10311#issuecomment-603518498.

import re
import string
import sys

from tools.type_whisperer.api_type_db_pb2 import TypeDb

from google.protobuf import text_format

V3_REGEX = re.compile(r'envoy[\w\.]*\.(v3alpha|v3)')

API_BUILD_FILE_TEMPLATE = string.Template(
    """# DO NOT EDIT. This file is generated by tools/proto_format/proto_sync.py.

load("@rules_proto//proto:defs.bzl", "proto_library")

licenses(["notice"])  # Apache 2

proto_library(
    name = "v3_protos",
    visibility = ["//visibility:public"],
    deps = [
$v3_deps
    ],
)
""")


def load_type_db(type_db_path):
    type_db = TypeDb()
    with open(type_db_path, 'r') as f:
        text_format.Merge(f.read(), type_db)
    return type_db


# Key sort function to achieve consistent results with buildifier.
def build_order_key(key):
    return key.replace(':', '!')


# Remove any packages that are definitely non-root, e.g. annotations.
def filter_pkgs(pkgs):

    def allowed_pkg(pkg):
        return not pkg.startswith('envoy.annotations')

    return filter(allowed_pkg, pkgs)


def deps_format(pkgs):
    return '\n'.join(
        '        "//%s:pkg",' % p.replace('.', '/')
        for p in sorted(filter_pkgs(pkgs), key=build_order_key))


def is_v3_package(pkg):
    return V3_REGEX.match(pkg) is not None


if __name__ == '__main__':
    type_db_path, output_path = sys.argv[1:]
    type_db = load_type_db(type_db_path)
    # TODO(htuch): generalize to > 2 versions
    v3_packages = set([])
    for desc in type_db.types.values():
        pkg = desc.qualified_package
        if is_v3_package(pkg):
            v3_packages.add(pkg)
            continue
    # Generate BUILD file.
    build_file_contents = API_BUILD_FILE_TEMPLATE.substitute(v3_deps=deps_format(v3_packages))
    with open(output_path, 'w') as f:
        f.write(build_file_contents)
