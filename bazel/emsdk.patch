diff --git a/bazel/emscripten_deps.bzl b/bazel/emscripten_deps.bzl
index cd592e9..89bbe08 100644
--- a/bazel/emscripten_deps.bzl
+++ b/bazel/emscripten_deps.bzl
@@ -64,7 +64,7 @@ filegroup(
     ] + glob(
         include = [
             "emscripten/cache/sysroot/lib/**",
-            "emscripten/node_modules/**",
+            # "emscripten/node_modules/**",
             "emscripten/src/**",
         ],
     ),
@@ -153,31 +153,3 @@ def emscripten_deps(emscripten_version = "latest"):
             build_file_content = BUILD_FILE_CONTENT_TEMPLATE.format(bin_extension = ".exe"),
             type = "zip",
         )
-
-    if "emscripten_npm_linux" not in excludes:
-        npm_install(
-            name = "emscripten_npm_linux",
-            package_json = "@emscripten_bin_linux//:emscripten/package.json",
-            package_lock_json = "@emscripten_bin_linux//:emscripten/package-lock.json",
-        )
-
-    if "emscripten_npm_mac" not in excludes:
-        npm_install(
-            name = "emscripten_npm_mac",
-            package_json = "@emscripten_bin_mac//:emscripten/package.json",
-            package_lock_json = "@emscripten_bin_mac//:emscripten/package-lock.json",
-        )
-
-    if "emscripten_npm_mac_arm64" not in excludes:
-        npm_install(
-            name = "emscripten_npm_mac",
-            package_json = "@emscripten_bin_mac_arm64//:emscripten/package.json",
-            package_lock_json = "@emscripten_bin_mac_arm64//:emscripten/package-lock.json",
-        )
-
-    if "emscripten_npm_win" not in excludes:
-        npm_install(
-            name = "emscripten_npm_win",
-            package_json = "@emscripten_bin_win//:emscripten/package.json",
-            package_lock_json = "@emscripten_bin_win//:emscripten/package-lock.json",
-        )
diff --git a/bazel/emscripten_toolchain/wasm_cc_binary.bzl b/bazel/emscripten_toolchain/wasm_cc_binary.bzl
index 9cf6328..167f797 100644
--- a/bazel/emscripten_toolchain/wasm_cc_binary.bzl
+++ b/bazel/emscripten_toolchain/wasm_cc_binary.bzl
@@ -163,7 +163,6 @@ def _wasm_cc_binary_legacy_impl(ctx):
     )
 
 _wasm_cc_binary = rule(
-    name = "wasm_cc_binary",
     implementation = _wasm_cc_binary_impl,
     attrs = dict(
         _WASM_BINARY_COMMON_ATTRS,
@@ -193,7 +192,6 @@ def _wasm_binary_legacy_outputs(name, cc_target):
     return outputs
 
 _wasm_cc_binary_legacy = rule(
-    name = "wasm_cc_binary",
     implementation = _wasm_cc_binary_legacy_impl,
     attrs = _WASM_BINARY_COMMON_ATTRS,
     outputs = _wasm_binary_legacy_outputs,
