syntax = "proto3";

package envoy.extensions.filters.http.decompressor.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/extensions/decompressor/v3/library.proto";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

import "udpa/annotations/migrate.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.decompressor.v3";
option java_outer_classname = "DecompressorProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Compressor]
// Compressor :ref:`configuration overview <config_http_filters_compressor>`.
// [#extension: envoy.filters.http.compressor]

message Decompressor {
  // Runtime flag that controls whether the filter is enabled for Request decompression or not. If set to false, the
  // filter will operate as a pass-through filter. If not specified, defaults to enabled.
  config.core.v3.RuntimeFeatureFlag request_decompression_enabled = 1;

  // Runtime flag that controls whether the filter is enabled for Response decompression or not. If set to false, the
  // filter will operate as a pass-through filter. If not specified, defaults to enabled.
  config.core.v3.RuntimeFeatureFlag response_decompression_enabled = 2;

  // A decompressor library to use for decompression. Currently only
  // :ref:`envoy.decompressors.gzip<envoy_api_msg_extensions.decompressors.gzip.v3.Gzip>`
  // is included in Envoy.
  envoy.extensions.decompressors.v3.DecompressorLibrary decompressor_library = 3 [(validate.rules).message = {required: true}];
}
