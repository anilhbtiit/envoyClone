--- 
+++ 
@@ -22,6 +22,7 @@
 
 namespace Envoy {
 namespace Http {
+namespace Legacy {
 namespace Http1 {
 
 /**
@@ -73,7 +74,8 @@
   void setDetails(absl::string_view details) { details_ = details; }
 
 protected:
-  StreamEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter);
+  StreamEncoderImpl(ConnectionImpl& connection,
+                    Envoy::Http::Http1::HeaderKeyFormatter* header_key_formatter);
   void setIsContentLengthAllowed(bool value) { is_content_length_allowed_ = value; }
   void encodeHeadersBase(const RequestOrResponseHeaderMap& headers, bool end_stream);
   void encodeTrailersBase(const HeaderMap& headers);
@@ -112,7 +114,7 @@
 
   void encodeFormattedHeader(absl::string_view key, absl::string_view value);
 
-  const HeaderKeyFormatter* const header_key_formatter_;
+  const Envoy::Http::Http1::HeaderKeyFormatter* const header_key_formatter_;
   absl::string_view details_;
 };
 
@@ -121,7 +123,8 @@
  */
 class ResponseEncoderImpl : public StreamEncoderImpl, public ResponseEncoder {
 public:
-  ResponseEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  ResponseEncoderImpl(ConnectionImpl& connection,
+                      Envoy::Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
 
   bool startedResponse() { return started_response_; }
@@ -140,7 +143,8 @@
  */
 class RequestEncoderImpl : public StreamEncoderImpl, public RequestEncoder {
 public:
-  RequestEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  RequestEncoderImpl(ConnectionImpl& connection,
+                     Envoy::Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
   bool headRequest() { return head_request_; }
 
@@ -208,7 +212,8 @@
 protected:
   ConnectionImpl(Network::Connection& connection, Stats::Scope& stats, http_parser_type type,
                  uint32_t max_headers_kb, const uint32_t max_headers_count,
-                 HeaderKeyFormatterPtr&& header_key_formatter, bool enable_trailers);
+                 Envoy::Http::Http1::HeaderKeyFormatterPtr&& header_key_formatter,
+                 bool enable_trailers);
 
   bool resetStreamCalled() { return reset_stream_called_; }
 
@@ -216,7 +221,7 @@
   CodecStats stats_;
   http_parser parser_;
   Http::Code error_code_{Http::Code::BadRequest};
-  const HeaderKeyFormatterPtr header_key_formatter_;
+  const Envoy::Http::Http1::HeaderKeyFormatterPtr header_key_formatter_;
   HeaderString current_header_field_;
   HeaderString current_header_value_;
   bool processing_trailers_ : 1;
@@ -394,7 +399,8 @@
    * An active HTTP/1.1 request.
    */
   struct ActiveRequest {
-    ActiveRequest(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+    ActiveRequest(ConnectionImpl& connection,
+                  Envoy::Http::Http1::HeaderKeyFormatter* header_key_formatter)
         : response_encoder_(connection, header_key_formatter) {}
 
     HeaderString request_url_;
@@ -485,7 +491,8 @@
 
 private:
   struct PendingResponse {
-    PendingResponse(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter,
+    PendingResponse(ConnectionImpl& connection,
+                    Envoy::Http::Http1::HeaderKeyFormatter* header_key_formatter,
                     ResponseDecoder* decoder)
         : encoder_(connection, header_key_formatter), decoder_(decoder) {}
 
@@ -544,5 +551,6 @@
 };
 
 } // namespace Http1
+} // namespace Legacy
 } // namespace Http
 } // namespace Envoy
