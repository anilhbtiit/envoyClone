syntax = "proto3";

package envoy.config.common.matcher.v4alpha;

import "envoy/config/core/v4alpha/extension.proto";
import "envoy/config/route/v4alpha/route_components.proto";

import "google/protobuf/any.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.common.matcher.v4alpha";
option java_outer_classname = "MatcherProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Unified Matcher API]

message MatchTree {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.common.matcher.v3.MatchTree";

  message MatchAction {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.common.matcher.v3.MatchTree.MatchAction";

    oneof action {
      option (validate.required) = true;

      // The associated operation should be skipped.
      bool skip = 1;

      // The specified callback value should be passed to the associated operation.
      string callback = 2;
    }
  }

  message MatchLeaf {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.common.matcher.v3.MatchTree.MatchLeaf";

    // A single match attempt. If this entry matches, the specified action will be performed.
    message LeafMatcher {
      option (udpa.annotations.versioning).previous_message_type =
          "envoy.config.common.matcher.v3.MatchTree.MatchLeaf.LeafMatcher";

      oneof matcher {
        option (validate.required) = true;

        MatchPredicate predicate = 1;

        core.v4alpha.TypedExtensionConfig typed_config = 2;
      }

      // The action to perform if the predicate evaluates to true.
      MatchAction action = 3 [(validate.rules).message = {required: true}];
    }

    // A linear set of match conditions that will be evaluated in order.
    // Each matcher will be attempted in order until one succeeds.
    // If none of the matchers match, the no_match_action will be performed if specified.
    repeated LeafMatcher matchers = 1 [(validate.rules).repeated = {min_items: 1}];

    // Action to perform if none of the above matchers match.
    MatchAction no_match_action = 3;
  }

  message SublinearMatcher {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.common.matcher.v3.MatchTree.SublinearMatcher";

    message MultimapMatcher {
      option (udpa.annotations.versioning).previous_message_type =
          "envoy.config.common.matcher.v3.MatchTree.SublinearMatcher.MultimapMatcher";

      // The header to apply this match to.
      // The key to apply this matcher for.
      string key = 1 [(validate.rules).string = {min_len: 1}];

      // The namespace of this key. This is used to distinguish multiple maps
      // that could be consulted during matching.
      string key_namespace = 2 [(validate.rules).string = {min_len: 1}];

      // Mapping from exact value matches to the matching subtree to use when
      // the match applies.
      // If a header value matches both a prefix and an exact match, the exact
      // match path will be taken.
      map<string, MatchTree> exact_matches = 3;

      // Mapping from prefix matches to the matching subtree to use when the match applies.
      // If a header value matches both a prefix and an exact match, the exact match path will be taken.
      // If multiple prefixes match, the longest prefix path will be taken.
      map<string, MatchTree> prefix_matches = 4;
    }

    oneof matcher {
      option (validate.required) = true;

      MultimapMatcher multimap_matcher = 1;

      core.v4alpha.TypedExtensionConfig typed_config = 2;
    }

    // If none of the above matchers match, attempt to match against this subtree.
    MatchTree no_match_tree = 3;
  }

  oneof kind {
    // The children of this node is defined by the matching rules of this matcher.
    SublinearMatcher matcher = 1;

    // If this is a terminating node, then the leaf match criteria will be evaluated.
    MatchLeaf leaf = 2;
  }
}

message MatchingFilterConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.common.matcher.v3.MatchingFilterConfig";

  MatchTree match_tree = 1 [(validate.rules).message = {required: true}];

  // The filter config.
  google.protobuf.Any typed_config = 3 [(validate.rules).any = {required: true}];
}

// Match configuration. This is a recursive structure which allows complex nested match
// configurations to be built using various logical operators.
// [#next-free-field: 11]
message MatchPredicate {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.common.matcher.v3.MatchPredicate";

  // A set of match configurations used for logical operations.
  message MatchSet {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.common.matcher.v3.MatchPredicate.MatchSet";

    // The list of rules that make up the set.
    repeated MatchPredicate rules = 1 [(validate.rules).repeated = {min_items: 2}];
  }

  oneof rule {
    option (validate.required) = true;

    // A set that describes a logical OR. If any member of the set matches, the match configuration
    // matches.
    MatchSet or_match = 1;

    // A set that describes a logical AND. If all members of the set match, the match configuration
    // matches.
    MatchSet and_match = 2;

    // A negation match. The match configuration will match if the negated match condition matches.
    MatchPredicate not_match = 3;

    // The match configuration will always match.
    bool any_match = 4 [(validate.rules).bool = {const: true}];

    // HTTP request headers match configuration.
    HttpHeadersMatch http_request_headers_match = 5;

    // HTTP request trailers match configuration.
    HttpHeadersMatch http_request_trailers_match = 6;

    // HTTP response headers match configuration.
    HttpHeadersMatch http_response_headers_match = 7;

    // HTTP response trailers match configuration.
    HttpHeadersMatch http_response_trailers_match = 8;

    // HTTP request generic body match configuration.
    HttpGenericBodyMatch http_request_generic_body_match = 9;

    // HTTP response generic body match configuration.
    HttpGenericBodyMatch http_response_generic_body_match = 10;
  }
}

// HTTP headers match configuration.
message HttpHeadersMatch {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.common.matcher.v3.HttpHeadersMatch";

  // HTTP headers to match.
  repeated route.v4alpha.HeaderMatcher headers = 1;
}

// HTTP generic body match configuration.
// List of text strings and hex strings to be located in HTTP body.
// All specified strings must be found in the HTTP body for positive match.
// The search may be limited to specified number of bytes from the body start.
//
// .. attention::
//
//   Searching for patterns in HTTP body is potentially cpu intensive. For each specified pattern, http body is scanned byte by byte to find a match.
//   If multiple patterns are specified, the process is repeated for each pattern. If location of a pattern is known, ``bytes_limit`` should be specified
//   to scan only part of the http body.
message HttpGenericBodyMatch {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.common.matcher.v3.HttpGenericBodyMatch";

  message GenericTextMatch {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.common.matcher.v3.HttpGenericBodyMatch.GenericTextMatch";

    oneof rule {
      option (validate.required) = true;

      // Text string to be located in HTTP body.
      string string_match = 1 [(validate.rules).string = {min_len: 1}];

      // Sequence of bytes to be located in HTTP body.
      bytes binary_match = 2 [(validate.rules).bytes = {min_len: 1}];
    }
  }

  // Limits search to specified number of bytes - default zero (no limit - match entire captured buffer).
  uint32 bytes_limit = 1;

  // List of patterns to match.
  repeated GenericTextMatch patterns = 2 [(validate.rules).repeated = {min_items: 1}];
}
