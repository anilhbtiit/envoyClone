--- 
+++ 
@@ -19,6 +19,7 @@
 #include "common/common/thread.h"
 #include "common/http/codec_helper.h"
 #include "common/http/header_map_impl.h"
+#include "common/http/http2/codec_impl.h"
 #include "common/http/http2/metadata_decoder.h"
 #include "common/http/http2/metadata_encoder.h"
 #include "common/http/status.h"
@@ -29,45 +30,12 @@
 
 namespace Envoy {
 namespace Http {
+namespace Legacy {
 namespace Http2 {
 
 // This is not the full client magic, but it's the smallest size that should be able to
 // differentiate between HTTP/1 and HTTP/2.
 const std::string CLIENT_MAGIC_PREFIX = "PRI * HTTP/2";
-
-/**
- * All stats for the HTTP/2 codec. @see stats_macros.h
- */
-#define ALL_HTTP2_CODEC_STATS(COUNTER)                                                             \
-  COUNTER(dropped_headers_with_underscores)                                                        \
-  COUNTER(header_overflow)                                                                         \
-  COUNTER(headers_cb_no_stream)                                                                    \
-  COUNTER(inbound_empty_frames_flood)                                                              \
-  COUNTER(inbound_priority_frames_flood)                                                           \
-  COUNTER(inbound_window_update_frames_flood)                                                      \
-  COUNTER(outbound_control_flood)                                                                  \
-  COUNTER(outbound_flood)                                                                          \
-  COUNTER(requests_rejected_with_underscores_in_headers)                                           \
-  COUNTER(rx_messaging_error)                                                                      \
-  COUNTER(rx_reset)                                                                                \
-  COUNTER(too_many_header_frames)                                                                  \
-  COUNTER(trailers)                                                                                \
-  COUNTER(tx_reset)
-
-/**
- * Wrapper struct for the HTTP/2 codec stats. @see stats_macros.h
- */
-struct CodecStats {
-  using AtomicPtr = Thread::AtomicPtr<CodecStats, Thread::AtomicPtrAllocMode::DeleteOnDestruct>;
-
-  static CodecStats& atomicGet(AtomicPtr& ptr, Stats::Scope& scope) {
-    return *ptr.get([&scope]() -> CodecStats* {
-      return new CodecStats{ALL_HTTP2_CODEC_STATS(POOL_COUNTER_PREFIX(scope, "http2."))};
-    });
-  }
-
-  ALL_HTTP2_CODEC_STATS(GENERATE_COUNTER_STRUCT)
-};
 
 class Utility {
 public:
@@ -120,7 +88,7 @@
  */
 class ConnectionImpl : public virtual Connection, protected Logger::Loggable<Logger::Id::http2> {
 public:
-  ConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ConnectionImpl(Network::Connection& connection, Http::Http2::CodecStats& stats,
                  const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                  const uint32_t max_headers_kb, const uint32_t max_headers_count);
 
@@ -266,9 +234,9 @@
     virtual void decodeTrailers() PURE;
 
     // Get MetadataEncoder for this stream.
-    MetadataEncoder& getMetadataEncoder();
+    Http::Http2::MetadataEncoder& getMetadataEncoder();
     // Get MetadataDecoder for this stream.
-    MetadataDecoder& getMetadataDecoder();
+    Http::Http2::MetadataDecoder& getMetadataDecoder();
     // Callback function for MetadataDecoder.
     void onMetadataDecoded(MetadataMapPtr&& metadata_map_ptr);
 
@@ -287,8 +255,8 @@
         [this]() -> void { this->pendingSendBufferHighWatermark(); },
         []() -> void { /* TODO(adisuissa): Handle overflow watermark */ }};
     HeaderMapPtr pending_trailers_to_encode_;
-    std::unique_ptr<MetadataDecoder> metadata_decoder_;
-    std::unique_ptr<MetadataEncoder> metadata_encoder_;
+    std::unique_ptr<Http::Http2::MetadataDecoder> metadata_decoder_;
+    std::unique_ptr<Http::Http2::MetadataEncoder> metadata_encoder_;
     absl::optional<StreamResetReason> deferred_reset_;
     HeaderString cookies_;
     bool local_end_stream_sent_ : 1;
@@ -420,7 +388,7 @@
 
   std::list<StreamImplPtr> active_streams_;
   nghttp2_session* session_{};
-  CodecStats& stats_;
+  Http::Http2::CodecStats& stats_;
   Network::Connection& connection_;
   const uint32_t max_headers_kb_;
   const uint32_t max_headers_count_;
@@ -529,7 +497,7 @@
 class ClientConnectionImpl : public ClientConnection, public ConnectionImpl {
 public:
   ClientConnectionImpl(Network::Connection& connection, ConnectionCallbacks& callbacks,
-                       CodecStats& stats,
+                       Http::Http2::CodecStats& stats,
                        const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                        const uint32_t max_response_headers_kb,
                        const uint32_t max_response_headers_count,
@@ -564,7 +532,7 @@
 class ServerConnectionImpl : public ServerConnection, public ConnectionImpl {
 public:
   ServerConnectionImpl(Network::Connection& connection, ServerConnectionCallbacks& callbacks,
-                       CodecStats& stats,
+                       Http::Http2::CodecStats& stats,
                        const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                        const uint32_t max_request_headers_kb,
                        const uint32_t max_request_headers_count,
@@ -603,6 +571,7 @@
 };
 
 } // namespace Http2
+} // namespace Legacy
 } // namespace Http
 } // namespace Envoy
 