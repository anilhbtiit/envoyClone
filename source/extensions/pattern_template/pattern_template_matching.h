#ifndef SOURCE_EXTENSIONS_PATTERN_TEMPLATE_PATTERN_TEMPLATE_MATCHING_H
#define SOURCE_EXTENSIONS_PATTERN_TEMPLATE_PATTERN_TEMPLATE_MATCHING_H

#include <string>

#include "envoy/extensions/pattern_template/v3/pattern_template_rewrite.pb.h"
#include "envoy/router/pattern_template.h"

#include "source/extensions/pattern_template/pattern_template_matching_internal.h"

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"

namespace Envoy {
namespace PatternTemplate {

enum class RewriteStringKind { kVariable, kLiteral };

struct RewritePatternSegment {
  RewritePatternSegment(absl::string_view str, RewriteStringKind kind) : str(str), kind(kind) {}
  absl::string_view str;
  RewriteStringKind kind;
};

// Returns the regex pattern that is equivalent to the given url_pattern.
// Used in the config pipeline to translate user given url pattern to
// the safe regex Envoy can understand. Strips away any variable captures.
absl::StatusOr<std::string> convertURLPatternSyntaxToRegex(absl::string_view url_pattern);

// Helper function that parses the pattern and breaks it down to either
// literals or variable names. To be used by ParseRewritePattern().
// Exposed here so that the validator for the rewrite pattern can also
// use it.
absl::StatusOr<std::vector<RewritePatternSegment>>
parseRewritePatternHelper(absl::string_view pattern);

// Returns the parsed Url rewrite pattern to be used by
// RewriteURLTemplatePattern()  |capture_regex| should
// be the regex generated by ConvertURLPatternSyntaxToRegex().
absl::StatusOr<envoy::extensions::pattern_template::v3::PatternTemplateRewrite>
parseRewritePattern(absl::string_view pattern, absl::string_view capture_regex);

// Returns if provided template match pattern is valid
absl::Status isValidPathTemplateMatchPattern(const std::string& path_template_match);

// Returns if provided rewrite pattern is valid
absl::Status isValidPathTemplateRewritePattern(const std::string& path_template_rewrite);

// Returns if path_template and rewrite_template have valid variables
absl::Status isValidSharedVariableSet(const std::string& path_template_rewrite,
                                      std::string& capture_regex);

// Holds actions to validate, match, and rewrite template pattern based urls.
class PatternTemplatePredicate : public Router::PatternTemplatePredicate {
public:
  explicit PatternTemplatePredicate(std::string url_pattern, std::string url_rewrite_pattern)
      : Router::PatternTemplatePredicate(url_pattern, url_rewrite_pattern),
        matching_pattern_regex_(RE2(convertURLPatternSyntaxToRegex(url_pattern).value())) {}
  PatternTemplatePredicate() = default;

  absl::string_view name() const override {
    return "envoy.pattern_template.pattern_template_predicate";
  }
  std::string category() const override { return "envoy.pattern_template"; }

  // Returns if the regex pattern matches the given regex from constructor.
  bool match(absl::string_view pattern) const override;

  absl::StatusOr<std::string> rewritePattern(absl::string_view current_pattern,
                                             absl::string_view matched_path) const override;

  static absl::Status is_valid_match_pattern(std::string match_pattern);

  static absl::Status is_valid_rewrite_pattern(std::string match_pattern,
                                               std::string rewrite_pattern);

private:
  // Returns the rewritten URL path based on the given parsed rewrite pattern.
  // Used for template-based URL rewrite.
  absl::StatusOr<std::string> rewriteURLTemplatePattern(
      absl::string_view url, absl::string_view capture_regex,
      const envoy::extensions::pattern_template::v3::PatternTemplateRewrite& rewrite_pattern) const;

  RE2 matching_pattern_regex_{nullptr};
};

} // namespace PatternTemplate
} // namespace Envoy

#endif // SOURCE_EXTENSIONS_PATTERN_TEMPLATE_PATTERN_TEMPLATE_MATCHING_H
