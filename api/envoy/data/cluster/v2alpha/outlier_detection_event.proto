syntax = "proto3";

package envoy.data.cluster.v2alpha;
option java_package = "io.envoyproxy.envoy.data.cluster.v2alpha";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: Outlier detection logging events]
// :ref:`Outlier detection logging <arch_overview_outlier_detection_logging>`.

message OutlierDetectionEvent {
  // In case of eject represents type of ejection that took place
  OutlierEjectionType type = 1 [(validate.rules).enum.defined_only = true];
  // Timestamp for event.
  google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true];
  // Time in seconds since the last action happened
  int64 secs_since_last_action = 3 [(validate.rules).int64.gte = 0];
  // Cluster that owns the ejected host
  string cluster_name = 4 [(validate.rules).string.min_bytes = 1];
  // URL of the ejected host
  string upstream_url = 5 [(validate.rules).string.min_bytes = 1];
  // Indicates whether eject or uneject took place
  string action = 6 [(validate.rules).string = {pattern: "eject|uneject"}];
  // In case of eject action represents the number of times host has been ejected
  int32 num_ejections = 7 [(validate.rules).int32.gte = 0];
  // True if ejection happened
  bool enforced = 8;

  oneof event {
    option (validate.required) = true;
    OutlierEjectSuccessRate eject_success_rate_event = 9;
    OutlierEjectConsecutive eject_consecutive_event = 10;
  }
}

enum OutlierEjectionType {
  CONSECUTIVE_5XX = 0;
  CONSECUTIVE_GATEWAY_FAILURE = 1;
  SUCCESS_RATE = 2;
}

message OutlierEjectSuccessRate {
  // Hostâ€™s success rate at the time of the ejection event on a 0-100 range
  int32 host_success_rate = 1 [(validate.rules).int32.lte = 100];
  // Average success rate of the hosts in the cluster at the time of the ejection event on a 0-100
  // range
  int32 cluster_average_success_rate = 2 [(validate.rules).int32.lte = 100];
  // Success rate ejection threshold at the time of the ejection event.
  int32 cluster_success_rate_ejection_threshold = 3 [(validate.rules).int32.lte = 100];
}

message OutlierEjectConsecutive {
}