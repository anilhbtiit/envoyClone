syntax = "proto3";

package envoy.config.response_map.v3;

import "envoy/config/accesslog/v3/accesslog.proto";
import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/substitution_format_string.proto";

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.response_map.v3";
option java_outer_classname = "ResponseMapProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: ResponseMap]
// Response map filter :ref:`configuration overview <config_response_map>`.

// The configuration to filter and change HTTP responses.
// [#next-free-field: 6]
message ResponseMapper {
  // Filter to determine if this mapper should apply.
  accesslog.v3.AccessLogFilter filter = 1 [(validate.rules).message = {required: true}];

  // The new response status code if specified.
  google.protobuf.UInt32Value status_code = 2 [(validate.rules).uint32 = {lt: 600 gte: 200}];

  // The new local reply text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
  // command operator in the `body_format`.
  core.v3.DataSource body = 3;

  // A per mapper `body_format` to use when this mapper is matched.
  core.v3.SubstitutionFormatString body_format_override = 4;

  // HTTP headers to add to a matched response. This allows the response mapper to append, to add
  // or to override headers of any matched response before it is sent to a downstream client.
  repeated core.v3.HeaderValueOption headers_to_add = 5
      [(validate.rules).repeated = {max_items: 1000}];
}

// The configuration to customize HTTP responses read by Envoy.
message ResponseMap {
  // Configuration of list of mappers which allows to filter and change HTTP response.
  // The mappers will be checked by the specified order until one is matched.
  repeated ResponseMapper mappers = 1;

  // The configuration to form response body from the :ref:`command operators <config_access_log_command_operators>`
  // and to specify response content type as one of: plain/text or application/json.
  //
  // Example one: plain/text body_format.
  //
  // .. code-block::
  //
  //   text_format: %LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=$REQ(:path)%
  //
  // The following response body in `plain/text` format will be generated for a request with
  // local reply body of "upstream connection error", response_code=503 and path=/foo.
  //
  // .. code-block::
  //
  //   upstream connection error:503:path=/foo
  //
  //  Example two: application/json body_format.
  //
  // .. code-block::
  //
  //  json_format:
  //    status: %RESPONSE_CODE%
  //    message: %LOCAL_REPLY_BODY%
  //    path: $REQ(:path)%
  //
  // The following response body in "application/json" format would be generated for a request with
  // local reply body of "upstream connection error", response_code=503 and path=/foo.
  //
  // .. code-block:: json
  //
  //  {
  //    "status": 503,
  //    "message": "upstream connection error",
  //    "path": "/foo"
  //  }
  //
  core.v3.SubstitutionFormatString body_format = 2;
}
