diff --git a/base/internal/data.h b/base/internal/data.h
index f0470bd..77997d4 100644
--- a/base/internal/data.h
+++ b/base/internal/data.h
@@ -97,6 +97,9 @@ enum class DataLocality {
 // at least `sizeof(void*)`.
 class Data {};
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunused"
+
 // Empty base class indicating class must be stored directly in the handle and
 // not allocated separately on the heap.
 //
@@ -158,10 +161,11 @@ class HeapData /* : public Data */ {
  private:
   friend constexpr size_t HeapDataMetadataAndReferenceCountOffset();
 
-  std::atomic<uintptr_t> metadata_and_reference_count_ ABSL_ATTRIBUTE_UNUSED =
-      0;
+  std::atomic<uintptr_t> metadata_and_reference_count_ ABSL_ATTRIBUTE_UNUSED = 0;
 };
 
+#pragma GCC diagnostic pop
+
 // Provides introspection for `Data`.
 class Metadata final {
  public:
diff --git a/base/memory_manager.cc b/base/memory_manager.cc
index 9c2bd23..1b7b355 100644
--- a/base/memory_manager.cc
+++ b/base/memory_manager.cc
@@ -117,13 +117,13 @@ std::optional<ArenaBlock> ArenaBlockAllocate(size_t size,
   pointer = VirtualAlloc(hint, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
   if (ABSL_PREDICT_FALSE(pointer == nullptr)) {
     if (hint == nullptr) {
-      return absl::nullopt;
+      return std::nullopt;
     }
     // Try again, without the hint.
     pointer =
         VirtualAlloc(nullptr, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
     if (pointer == nullptr) {
-      return absl::nullopt;
+      return std::nullopt;
     }
   }
 #endif
