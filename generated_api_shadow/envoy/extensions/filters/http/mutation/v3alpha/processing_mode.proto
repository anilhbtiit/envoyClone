syntax = "proto3";

package envoy.extensions.filters.http.mutation.v3alpha;

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.mutation.v3alpha";
option java_outer_classname = "ProcessingModeProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).work_in_progress = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Mutation Service]
// Mutation Service Processing Mode
// [#extension: envoy.filters.http.mutation]

// This configuration describes how a mutation filter processes the HTTP
// request or response, including how requests and responses are
// sent to the remote server.

// [#next-free-field: 9]
message ProcessingMode {
  enum SyncMode {
    // The default SyncMode depends on which part of the message is being set.
    SYNC_DEFAULT = 0;

    // Send the header and wait for a response before continuing with
    // the filter chain.
    SYNC = 1;

    // Send the header but to not expect a response, continuing immediately
    // with the filter chain.
    ASYNC = 2;

    // Do not send the header.
    SKIP = 3;
  }

  enum BodyMode {
    // The default SyncMode depends on which part of the message is being set.
    BODY_DEFAULT = 0;

    // Send each chunk of the body separately to the server.
    CHUNKED = 1;

    // Buffer the message body in memory and send the entire body in one
    // chunk. If the body exceeds the configured buffer limit, then the
    // downstream system will receive an error.
    BUFFERED = 2;

    // Buffer the message body in memory and send the entire body in one
    // chunk. If the body exceeds the configured buffer limit, then the body contents
    // up to the buffer limit will be sent.
    BUFFERED_PARTIAL = 3;
  }

  // How to handle the request header. Default is "SYNC".
  ProcessingMode request_header_mode = 1;

  // How to handle the response header. Default is "SYNC".
  ProcessingMode response_header_mode = 2;

  // How to handle the request body. Default is "SKIP".
  ProcessingMode request_body_mode = 3;

  // How to send request body chunks if mode is not "SKIP".
  BodyMode request_body_chunk_mode = 4;

  // How do handle the response body. Default is "SKIP".
  ProcessingMode response_body_mode = 5;

  // How to send response body chunks if the mode is not "SKIP".
  BodyMode response_body_chunk_mode = 6;

  // How to handle the request trailers. Default is "SKIP".
  ProcessingMode request_trailer_mode = 7;

  // How to handle the response trailers. Default is "SKIP".
  ProcessingMode response_trailer_mode = 8;
}
