--- CMakeLists.txt	2020-02-27 11:35:35.000000000 +0300
+++ CMakeLists.txt	2020-02-27 11:37:15.000000000 +0300
@@ -14,6 +14,7 @@
 # limitations under the License.
 #
 cmake_minimum_required (VERSION 2.6.4)
+set(CMAKE_CXX_COMPILER_WORKS 1)
 project (HazelcastClient)

 # FLAGS
@@ -279,3 +280,9 @@
 	ADD_SUBDIRECTORY(examples)
 	message(STATUS "Configured to build the examples.")
 ENDIF(HZ_BUILD_EXAMPLES)
+INSTALL(TARGETS ${HZ_LIB_NAME} DESTINATION lib)
+INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/hazelcast/generated-sources/include/hazelcast DESTINATION include FILES_MATCHING PATTERN "*.h")
+INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/hazelcast/include/hazelcast DESTINATION include FILES_MATCHING PATTERN "*.h" PATTERN "*.inl")
+INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/external/release_include/boost DESTINATION include FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h")
+INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/external/release_include/easylogging++ DESTINATION include FILES_MATCHING PATTERN "*.h")
+INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/external/include/asio/asio/include/asio DESTINATION include FILES_MATCHING PATTERN "*.hpp")

--- hazelcast/include/hazelcast/util/Bits.h	2020-01-28 11:42:05.000000000 +0300
+++ hazelcast/include/hazelcast/util/Bits.h	2020-05-22 23:11:16.000000000 +0300
@@ -26,6 +26,7 @@
 #endif

 #include <stdint.h>
+#include <string.h> // This patch fixes asan build for Envoy Http Cache.

 #if defined(linux) || defined(__linux__) || defined (__GLIBC__) || defined(__GNU__)

@@ -124,7 +125,7 @@
                 #ifdef HZ_BIG_ENDIAN
                     swap_2(source, target);
                 #else
-                    *(static_cast<uint16_t *>(target)) = *(static_cast<const uint16_t *>(source));
+                    memcpy(target, source, sizeof(uint16_t));
                 #endif
             }

@@ -136,7 +137,7 @@
                 #ifdef HZ_BIG_ENDIAN
                     swap_4(source, target);
                 #else
-                    *(static_cast<uint32_t *>(target)) = *(static_cast<const uint32_t *>(source));
+                    memcpy(target, source, sizeof(uint32_t));
                 #endif
             }

@@ -148,7 +149,7 @@
                 #ifdef HZ_BIG_ENDIAN
                     swap_8(source, target);
                 #else
-                *(static_cast<uint64_t *>(target)) = *(static_cast<const uint64_t *>(source));
+                    memcpy(target, source, sizeof(uint64_t));
                 #endif
             }

@@ -170,7 +171,7 @@
             #ifdef HZ_BIG_ENDIAN
                    swap_2(source, target);
             #else
-                *(static_cast<uint16_t *>(target)) = *(static_cast<const uint16_t *>(source));
+                memcpy(target, source, sizeof(uint16_t));
             #endif
             }

@@ -182,7 +183,7 @@
                 #ifdef HZ_BIG_ENDIAN
                     swap_4(source, target);
                 #else
-                    *(static_cast<uint32_t *>(target)) = *(static_cast<const uint32_t *>(source));
+                    memcpy(target, source, sizeof(uint32_t));
                 #endif
             }

@@ -194,13 +195,15 @@
             #ifdef HZ_BIG_ENDIAN
                    swap_8(source, target);
             #else
-                *(static_cast<uint64_t *>(target)) = *(static_cast<const uint64_t *>(source));
+                memcpy(target, source, sizeof(uint64_t));
             #endif
             }

             inline static int32_t readIntB(std::vector<byte> &buffer, unsigned long pos) {
                 #ifdef HZ_BIG_ENDIAN
-                    return *((int32_t *) (&buffer[0] + pos));
+                    int32_t result;
+                    memcpy(&result, (&buffer[0] + pos), sizeof(int32_t));
+                    return result;
                 #else
                     int32_t result;
                     swap_4(&(buffer[0]) + pos, &result);
@@ -215,7 +218,7 @@
             */
             inline static void bigEndianToNative2(const void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                   *(static_cast<uint16_t *>(target)) = *(static_cast<const uint16_t *>(source));
+                   memcpy(target, source, sizeof(uint16_t));
             #else
                 swap_2(source, target);
             #endif
@@ -227,7 +230,7 @@
             */
             inline static void bigEndianToNative4(const void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                *(static_cast<uint32_t *>(target)) = *(static_cast<const uint32_t *>(source));
+                memcpy(target, source, sizeof(uint32_t));
             #else
                 swap_4(source, target);
             #endif
@@ -239,7 +242,7 @@
             */
             inline static void bigEndianToNative8(const void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                *(static_cast<uint64_t *>(target)) = *(static_cast<const uint64_t *>(source));
+                memcpy(target, source, sizeof(uint64_t));
             #else
                 swap_8(source, target);
             #endif
@@ -251,7 +254,7 @@
             */
             inline static void nativeToBigEndian2(void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                *(static_cast<uint16_t *>(target)) = *(static_cast<const uint16_t *>(source));
+                memcpy(target, source, sizeof(uint16_t));
             #else
                 swap_2(source, target);

@@ -264,7 +267,7 @@
             */
             inline static void nativeToBigEndian4(const void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                *(static_cast<uint32_t *>(target)) = *(static_cast<const uint32_t *>(source));
+                memcpy(target, source, sizeof(uint32_t));
             #else
                 swap_4(source, target);
             #endif
@@ -276,7 +279,7 @@
             */
             inline static void nativeToBigEndian8(void *source, void *target) {
             #ifdef HZ_BIG_ENDIAN
-                *(static_cast<uint64_t *>(target)) = *(static_cast<const uint64_t *>(source));
+                memcpy(target, source, sizeof(uint64_t));
             #else
                 swap_8(source, target);
             #endif
@@ -286,25 +289,32 @@

         private :
             inline static void swap_2(const void *orig, void* target) {
-                *reinterpret_cast<uint16_t *> (target) =
-                        bswap16 (*reinterpret_cast<uint16_t const *> (orig));
+                uint16_t raw;
+                memcpy(&raw, orig, sizeof(uint16_t));
+                uint16_t swapped = bswap16(raw);
+                memcpy(target, &swapped, sizeof(uint16_t));
             }

             inline static void swapInplace4(void *orig) {
-                uint32_t value = * reinterpret_cast<const uint32_t*> (orig);
+                uint32_t value;
+                memcpy(&value, orig, sizeof(uint32_t));
                 swap_4(&value, orig);
             }

             inline static void swap_4 (const void* orig, void* target)
             {
-                *reinterpret_cast<uint32_t *> (target) =
-                        bswap32 (*reinterpret_cast<uint32_t const *> (orig));
+                uint32_t raw;
+                memcpy(&raw, orig, sizeof(uint32_t));
+                uint32_t swapped = bswap32(raw);
+                memcpy(target, &swapped, sizeof(uint32_t));
             }

             inline static void swap_8 (const void* orig, void* target)
             {
-                *reinterpret_cast<uint64_t *> (target) =
-                        bswap64 (*reinterpret_cast<uint64_t const *> (orig));
+                uint64_t raw;
+                memcpy(&raw, orig, sizeof(uint64_t));
+                uint64_t swapped = bswap64(raw);
+                memcpy(target, &swapped, sizeof(uint64_t));
             }
         };
     }
