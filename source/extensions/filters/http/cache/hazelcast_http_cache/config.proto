syntax = "proto3";

package envoy.source.extensions.filters.http.cache;

// [#protodoc-title: HazelcastHttpCache CacheFilter storage plugin]
// CacheFilter plugin backed by Hazelcast IMDG.
// [#extension: envoy.extensions.http.cache]

// Hazelcast Http Cache configuration
message HazelcastHttpCacheConfig {

    // Address for Hazelcast cluster member.
    message MemberAddress {
        string ip = 1;
        int32 port = 2;
    }

    // Group name of Hazelcast cluster to be connected.
    string group_name = 1;
    // Group password of Hazelcast cluster to be connected.
    string group_password = 2;

    // Only one member address is enough to connect to the cluster but
    // providing more than one is recommended.
    // By default, 127.0.0.1:5701 will be tried.
    repeated MemberAddress addresses = 3;

    // Application specific name for the cache. Different deployments should
    // use the same prefix if they want to share the same cache and connect
    // to the same Hazelcast cluster. Empty string by default.
    string app_prefix = 4;

    // In unified mode, cached responses will be stored as a single entry.
    // On a range HTTP request, regardless of the request range, all the
    // body will be called from the remote cache and then the requested
    // range will be served.
    // In divided mode, cached responses will be stored in two different
    // maps: header map and body map. For a response to be cached, its
    // header is stored in the header map and its body is stored in body
    // map partitioned with body_partition_size. On a range request, only
    // required body partitions are called from the distributed map. This
    // option causes extra memory usage per partition on the cache.
    // False by default.
    bool unified = 5;

    // Body partition size for divided cache. Ignored in unified mode.
    // At most 64 KB allowed. 2 KB by default.
    uint64 body_partition_size = 6;

    // Maximum allowed body size per response. If insertion for a larger
    // value than the limit is attempted, the first max_body_size bytes
    // of the response will be cached and the remaining will be ignored.
    // At most 64 KB for UNIFIED mode, 2 MB for DIVIDED mode.
    uint64 max_body_size = 7;
}
