--- 
+++ 
@@ -30,6 +30,7 @@
 
 namespace Envoy {
 namespace Http {
+namespace Legacy {
 namespace Http2 {
 
 // This is not the full client magic, but it's the smallest size that should be able to
@@ -87,7 +88,7 @@
  */
 class ConnectionImpl : public virtual Connection, protected Logger::Loggable<Logger::Id::http2> {
 public:
-  ConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ConnectionImpl(Network::Connection& connection, Http::Http2::CodecStats& stats,
                  const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                  const uint32_t max_headers_kb, const uint32_t max_headers_count);
 
@@ -250,9 +251,9 @@
     virtual void decodeTrailers() PURE;
 
     // Get MetadataEncoder for this stream.
-    MetadataEncoder& getMetadataEncoder();
+    Http::Http2::MetadataEncoder& getMetadataEncoder();
     // Get MetadataDecoder for this stream.
-    MetadataDecoder& getMetadataDecoder();
+    Http::Http2::MetadataDecoder& getMetadataDecoder();
     // Callback function for MetadataDecoder.
     void onMetadataDecoded(MetadataMapPtr&& metadata_map_ptr);
 
@@ -271,8 +272,8 @@
         [this]() -> void { this->pendingSendBufferHighWatermark(); },
         []() -> void { /* TODO(adisuissa): Handle overflow watermark */ }};
     HeaderMapPtr pending_trailers_to_encode_;
-    std::unique_ptr<MetadataDecoder> metadata_decoder_;
-    std::unique_ptr<MetadataEncoder> metadata_encoder_;
+    std::unique_ptr<Http::Http2::MetadataDecoder> metadata_decoder_;
+    std::unique_ptr<Http::Http2::MetadataEncoder> metadata_encoder_;
     absl::optional<StreamResetReason> deferred_reset_;
     HeaderString cookies_;
     bool local_end_stream_sent_ : 1;
@@ -412,7 +413,7 @@
 
   std::list<StreamImplPtr> active_streams_;
   nghttp2_session* session_{};
-  CodecStats& stats_;
+  Http::Http2::CodecStats& stats_;
   Network::Connection& connection_;
   const uint32_t max_headers_kb_;
   const uint32_t max_headers_count_;
@@ -518,7 +519,7 @@
 class ClientConnectionImpl : public ClientConnection, public ConnectionImpl {
 public:
   ClientConnectionImpl(Network::Connection& connection, ConnectionCallbacks& callbacks,
-                       CodecStats& stats,
+                       Http::Http2::CodecStats& stats,
                        const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                        const uint32_t max_response_headers_kb,
                        const uint32_t max_response_headers_count,
@@ -553,7 +554,7 @@
 class ServerConnectionImpl : public ServerConnection, public ConnectionImpl {
 public:
   ServerConnectionImpl(Network::Connection& connection, ServerConnectionCallbacks& callbacks,
-                       CodecStats& stats,
+                       Http::Http2::CodecStats& stats,
                        const envoy::config::core::v3::Http2ProtocolOptions& http2_options,
                        const uint32_t max_request_headers_kb,
                        const uint32_t max_request_headers_count,
@@ -592,6 +593,7 @@
 };
 
 } // namespace Http2
+} // namespace Legacy
 } // namespace Http
 } // namespace Envoy
 