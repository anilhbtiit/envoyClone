1. Generate inspector files using genrule_cmd.
2. Set v8_enable_handle_zapping=False to regain performance.
3. Fix v8_torque when V8 is imported as an external repository.
4. Make wee8 library consumable (export headers and set visibility).
5. Remove unnecessary @config repository (https://crrev.com/c/3331591).
6. Replace @zlib with //external:zlib and fix include path (https://crrev.com/c/3333633).
7. Fix #include brackets (https://crrev.com/c/3334336).
8. Fix ASan build (https://crrev.com/c/3295743).
9. Fix "bazel query deps" presubmit (https://crrev.com/c/3336502).
10. Fix build on Linux/aarch64 (https://crrev.com/c/3337367).
11. Link statically (https://crrev.com/c/3295460).
12. Fix build with GCC (https://crrev.com/c/3333635).
--- BUILD.bazel
+++ BUILD.bazel
@@ -17,6 +17,7 @@
     "v8_torque",
 )
 load(":bazel/v8-non-pointer-compression.bzl", "v8_binary_non_pointer_compression")
+load(":genrule_cmd.bzl", "genrule_cmd")
 
 config_setting(
     name = "is_debug",
@@ -118,7 +119,7 @@
 
 v8_flag(
     name = "v8_enable_handle_zapping",
-    default = True,
+    default = False,
 )
 
 v8_flag(name = "v8_enable_hugepage")
@@ -200,7 +201,7 @@
     name = "v8_target_x64_default_pointer_compression",
     match_all = [
         ":v8_enable_pointer_compression_is_none",
-        "@config//:v8_target_x64",
+        "@v8//bazel/config:v8_target_x64",
     ],
 )
 
@@ -209,7 +210,7 @@
     name = "v8_target_arm64_default_pointer_compression",
     match_all = [
         ":v8_enable_pointer_compression_is_none",
-        "@config//:v8_target_arm64",
+        "@v8//bazel/config:v8_target_arm64",
     ],
 )
 
@@ -254,7 +255,7 @@
 selects.config_setting_group(
     name = "should_add_rdynamic",
     match_all = [
-        "@config//:is_linux",
+        "@v8//bazel/config:is_linux",
         ":is_v8_enable_backtrace",
     ],
 )
@@ -299,26 +300,26 @@
         "//conditions:default": [],
     }) + select(
         {
-            "@config//:v8_target_ia32": ["V8_TARGET_ARCH_IA32"],
-            "@config//:v8_target_x64": ["V8_TARGET_ARCH_X64"],
-            "@config//:v8_target_arm": [
+            "@v8//bazel/config:v8_target_ia32": ["V8_TARGET_ARCH_IA32"],
+            "@v8//bazel/config:v8_target_x64": ["V8_TARGET_ARCH_X64"],
+            "@v8//bazel/config:v8_target_arm": [
                 "V8_TARGET_ARCH_ARM",
                 "CAN_USE_ARMV7_INSTRUCTIONS",
                 "CAN_USE_VFP3_INSTRUCTIONS",
             ],
-            "@config//:v8_target_arm64": ["V8_TARGET_ARCH_ARM64"],
+            "@v8//bazel/config:v8_target_arm64": ["V8_TARGET_ARCH_ARM64"],
         },
         no_match_error = "Please specify a target cpu supported by v8",
     ) + select({
-        "@config//:is_android": [
+        "@v8//bazel/config:is_android": [
             "V8_HAVE_TARGET_OS",
             "V8_TARGET_OS_ANDROID",
         ],
-        "@config//:is_linux": [
+        "@v8//bazel/config:is_linux": [
             "V8_HAVE_TARGET_OS",
             "V8_TARGET_OS_LINUX",
         ],
-        "@config//:is_macos": [
+        "@v8//bazel/config:is_macos": [
             "V8_HAVE_TARGET_OS",
             "V8_TARGET_OS_MACOSX",
         ],
@@ -595,7 +596,7 @@
         "src/base/vlq-base64.cc",
         "src/base/vlq-base64.h",
     ] + select({
-        "@config//:is_posix": [
+        "@v8//bazel/config:is_posix": [
             "src/base/platform/platform-posix.cc",
             "src/base/platform/platform-posix.h",
             "src/base/platform/platform-posix-time.cc",
@@ -603,15 +604,15 @@
         ],
         "//conditions:default": [],
     }) + select({
-        "@config//:is_linux": [
+        "@v8//bazel/config:is_linux": [
             "src/base/debug/stack_trace_posix.cc",
             "src/base/platform/platform-linux.cc",
         ],
-        "@config//:is_android": [
+        "@v8//bazel/config:is_android": [
             "src/base/debug/stack_trace_android.cc",
             "src/base/platform/platform-linux.cc",
         ],
-        "@config//:is_macos": [
+        "@v8//bazel/config:is_macos": [
             "src/base/debug/stack_trace_posix.cc",
             "src/base/platform/platform-macos.cc",
         ],
@@ -2027,7 +2028,7 @@
         "src/heap/third-party/heap-api.h",
         "src/heap/third-party/heap-api-stub.cc",
     ] + select({
-        "@config//:v8_target_ia32": [
+        "@v8//bazel/config:v8_target_ia32": [
             "src/baseline/ia32/baseline-assembler-ia32-inl.h",
             "src/baseline/ia32/baseline-compiler-ia32-inl.h",
             "src/codegen/shared-ia32-x64/macro-assembler-shared-ia32-x64.h",
@@ -2055,7 +2056,7 @@
             "src/regexp/ia32/regexp-macro-assembler-ia32.h",
             "src/wasm/baseline/ia32/liftoff-assembler-ia32.h",
         ],
-        "@config//:v8_target_x64": [
+        "@v8//bazel/config:v8_target_x64": [
             "src/baseline/x64/baseline-assembler-x64-inl.h",
             "src/baseline/x64/baseline-compiler-x64-inl.h",
             "src/codegen/shared-ia32-x64/macro-assembler-shared-ia32-x64.h",
@@ -2087,7 +2088,7 @@
             "src/regexp/x64/regexp-macro-assembler-x64.h",
             "src/wasm/baseline/x64/liftoff-assembler-x64.h",
         ],
-        "@config//:v8_target_arm": [
+        "@v8//bazel/config:v8_target_arm": [
             "src/baseline/arm/baseline-assembler-arm-inl.h",
             "src/baseline/arm/baseline-compiler-arm-inl.h",
             "src/codegen/arm/assembler-arm-inl.h",
@@ -2118,7 +2119,7 @@
             "src/regexp/arm/regexp-macro-assembler-arm.h",
             "src/wasm/baseline/arm/liftoff-assembler-arm.h",
         ],
-        "@config//:v8_target_arm64": [
+        "@v8//bazel/config:v8_target_arm64": [
             "src/baseline/arm64/baseline-assembler-arm64-inl.h",
             "src/baseline/arm64/baseline-compiler-arm64-inl.h",
             "src/codegen/arm64/assembler-arm64-inl.h",
@@ -2163,13 +2164,13 @@
         ],
     }) + select({
         # Only for x64 builds and for arm64 with x64 host simulator.
-        "@config//:is_x64": [
+        "@v8//bazel/config:is_x64": [
             "src/trap-handler/handler-inside-posix.cc",
             "src/trap-handler/handler-outside-posix.cc",
         ],
         "//conditions:default": [],
     }) + select({
-        "@config//:v8_arm64_simulator": [
+        "@v8//bazel/config:v8_arm64_simulator": [
             "src/trap-handler/trap-handler-simulator.h",
             "src/trap-handler/handler-outside-simulator.cc",
         ],
@@ -2651,10 +2652,10 @@
         "src/interpreter/interpreter-intrinsics-generator.cc",
         "src/interpreter/interpreter-intrinsics-generator.h",
     ] + select({
-        "@config//:v8_target_ia32": ["src/builtins/ia32/builtins-ia32.cc"],
-        "@config//:v8_target_x64": ["src/builtins/x64/builtins-x64.cc"],
-        "@config//:v8_target_arm": ["src/builtins/arm/builtins-arm.cc"],
-        "@config//:v8_target_arm64": ["src/builtins/arm64/builtins-arm64.cc"],
+        "@v8//bazel/config:v8_target_ia32": ["src/builtins/ia32/builtins-ia32.cc"],
+        "@v8//bazel/config:v8_target_x64": ["src/builtins/x64/builtins-x64.cc"],
+        "@v8//bazel/config:v8_target_arm": ["src/builtins/arm/builtins-arm.cc"],
+        "@v8//bazel/config:v8_target_arm64": ["src/builtins/arm64/builtins-arm64.cc"],
     }) + select({
         ":is_v8_enable_webassembly": [
             "src/builtins/builtins-wasm-gen.cc",
@@ -2717,6 +2718,7 @@
         "src/heap/cppgc/marking-visitor.h",
         "src/heap/cppgc/marking-worklists.cc",
         "src/heap/cppgc/marking-worklists.h",
+        "src/heap/cppgc/memory.cc",
         "src/heap/cppgc/memory.h",
         "src/heap/cppgc/metric-recorder.h",
         "src/heap/cppgc/name-trait.cc",
@@ -2770,10 +2772,10 @@
         # Note these cannot be v8_target_is_* selects because these contain
         # inline assembly that runs inside the executable. Since these are
         # linked directly into mksnapshot, they must use the actual target cpu.
-        "@config//:is_ia32": ["src/heap/base/asm/ia32/push_registers_asm.cc"],
-        "@config//:is_x64": ["src/heap/base/asm/x64/push_registers_asm.cc"],
-        "@config//:is_arm": ["src/heap/base/asm/arm/push_registers_asm.cc"],
-        "@config//:is_arm64": ["src/heap/base/asm/arm64/push_registers_asm.cc"],
+        "@v8//bazel/config:is_ia32": ["src/heap/base/asm/ia32/push_registers_asm.cc"],
+        "@v8//bazel/config:is_x64": ["src/heap/base/asm/x64/push_registers_asm.cc"],
+        "@v8//bazel/config:is_arm": ["src/heap/base/asm/arm/push_registers_asm.cc"],
+        "@v8//bazel/config:is_arm64": ["src/heap/base/asm/arm64/push_registers_asm.cc"],
     }),
 )
 
@@ -2927,16 +2929,16 @@
     srcs = [
         "src/init/setup-isolate-deserialize.cc",
     ] + select({
-        "@config//:v8_target_arm": [
+        "@v8//bazel/config:v8_target_arm": [
             "google3/snapshots/arm/noicu/embedded.S",
             "google3/snapshots/arm/noicu/snapshot.cc",
         ],
-        "@config//:v8_target_ia32": [
+        "@v8//bazel/config:v8_target_ia32": [
             "google3/snapshots/ia32/noicu/embedded.S",
             "google3/snapshots/ia32/noicu/snapshot.cc",
         ],
-        "@config//:v8_target_arm64": [":noicu/generated_snapshot_files"],
-        "@config//:v8_target_x64": [":noicu/generated_snapshot_files"],
+        "@v8//bazel/config:v8_target_arm64": [":noicu/generated_snapshot_files"],
+        "@v8//bazel/config:v8_target_x64": [":noicu/generated_snapshot_files"],
     }),
 )
 
@@ -2945,16 +2947,16 @@
     srcs = [
         "src/init/setup-isolate-deserialize.cc",
     ] + select({
-        "@config//:v8_target_arm": [
+        "@v8//bazel/config:v8_target_arm": [
             "google3/snapshots/arm/icu/embedded.S",
             "google3/snapshots/arm/icu/snapshot.cc",
         ],
-        "@config//:v8_target_ia32": [
+        "@v8//bazel/config:v8_target_ia32": [
             "google3/snapshots/ia32/icu/embedded.S",
             "google3/snapshots/ia32/icu/snapshot.cc",
         ],
-        "@config//:v8_target_arm64": [":icu/generated_snapshot_files"],
-        "@config//:v8_target_x64": [":icu/generated_snapshot_files"],
+        "@v8//bazel/config:v8_target_arm64": [":icu/generated_snapshot_files"],
+        "@v8//bazel/config:v8_target_x64": [":icu/generated_snapshot_files"],
     }),
 )
 
@@ -2980,7 +2982,7 @@
         ":is_v8_annotate_torque_ir": ["-annotate-ir"],
         "//conditions:default": [],
     }) + select({
-        "@config//:v8_target_is_32_bits": ["-m32"],
+        "@v8//bazel/config:v8_target_is_32_bits": ["-m32"],
         "//conditions:default": [],
     }),
     extras = [
@@ -3032,7 +3034,7 @@
         "src/inspector/protocol/Schema.cpp",
         "src/inspector/protocol/Schema.h",
     ],
-    cmd = "bazel/generate-inspector-files.sh $(@D)",
+    cmd = genrule_cmd("@envoy//bazel/external:wee8.genrule_cmd"),
     local = 1,
     message = "Generating inspector files",
 )
@@ -3177,7 +3179,7 @@
     ],
     deps = [
         ":v8_libbase",
-        "@zlib",
+        "//external:zlib",
     ],
 )
 
@@ -3194,7 +3196,27 @@
 v8_library(
     name = "wee8",
     srcs = [":wee8_files"],
-    deps = [":noicu/v8"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":noicu/v8",
+        ":wee8_v8_headers",
+        ":wee8_wasm_c_api_headers",
+    ],
+)
+
+cc_library(
+    name = "wee8_v8_headers",
+    hdrs = ["src/wasm/c-api.h"],
+    strip_include_prefix = "src",
+)
+
+cc_library(
+    name = "wee8_wasm_c_api_headers",
+    hdrs = [
+        "third_party/wasm-api/wasm.h",
+        "third_party/wasm-api/wasm.hh",
+    ],
+    strip_include_prefix = "third_party",
 )
 
 alias(
@@ -3253,7 +3275,7 @@
     copts = ["-fexceptions"],
     features = ["-use_header_modules"],
     linkopts = select({
-        "@config//:is_android": ["-llog"],
+        "@v8//bazel/config:is_android": ["-llog"],
         "//conditions:default": [],
     }),
     deps = ["v8_libbase"],
@@ -3264,7 +3286,7 @@
     srcs = [":mksnapshot_files"],
     icu_deps = [":icu/v8_libshared"],
     linkopts = select({
-        "@config//:is_android": ["-llog"],
+        "@v8//bazel/config:is_android": ["-llog"],
         "//conditions:default": [],
     }),
     noicu_deps = [":noicu/v8_libshared"],
--- bazel/config/BUILD.bazel
+++ bazel/config/BUILD.bazel
@@ -27,7 +27,7 @@
 
 config_setting(
     name = "platform_cpu_arm64",
-    constraint_values = ["@platforms//cpu:arm"],
+    constraint_values = ["@platforms//cpu:aarch64"],
 )
 
 config_setting(
@@ -58,12 +58,12 @@
 )
 
 v8_configure_target_cpu(
-    name = "arm",
+    name = "arm64",
     matching_configs = [":platform_cpu_arm64"],
 )
 
 v8_configure_target_cpu(
-    name = "arm64",
+    name = "arm",
     matching_configs = [":platform_cpu_arm"],
 )
 
--- bazel/defs.bzl
+++ bazel/defs.bzl
@@ -92,6 +92,7 @@
             "-fPIC",
             "-Werror",
             "-Wextra",
+            "-Wno-unknown-warning-option",
             "-Wno-bitwise-instead-of-logical",
             "-Wno-builtin-assume-aligned-alignment",
             "-Wno-unused-parameter",
@@ -100,12 +101,33 @@
             "-Wno-non-virtual-dtor",
             "-std=c++17",
             "-isystem .",
-        ],
+        ] + select({
+            "@envoy//bazel:gcc_build": [
+                "-fno-strict-aliasing",
+                "-Wno-extra",
+                "-Wno-int-in-bool-context",
+                "-Wno-class-memaccess",
+                "-Wno-comments",
+                "-Wno-deprecated-declarations",
+                "-Wno-implicit-fallthrough",
+                "-Wno-maybe-uninitialized",
+                "-Wno-mismatched-new-delete",
+                "-Wno-redundant-move",
+                "-Wno-return-type",
+                # Use GNU dialect, because GCC doesn't allow using
+                # ##__VA_ARGS__ when in standards-conforming mode.
+                "-std=gnu++17",
+                # "always_inline" fails without optimizations, use
+                # -O2 that matches Bazel's --compilation_mode opt.
+                "-O2",
+            ],
+            "//conditions:default": [],
+        }),
         includes = ["include"],
         linkopts = [
             "-pthread",
         ] + select({
-            "@config//:is_macos": [],
+            "@v8//bazel/config:is_macos": [],
             "//conditions:default": ["-Wl,--no-as-needed -ldl"],
         }) + select({
             ":should_add_rdynamic": ["-rdynamic"],
@@ -191,6 +213,7 @@
             copts = copts + default.copts,
             linkopts = linkopts + default.linkopts,
             alwayslink = 1,
+            linkstatic = 1,
             **kwargs
         )
         native.cc_library(
@@ -201,6 +224,7 @@
             copts = copts + default.copts + ENABLE_I18N_SUPPORT_DEFINES,
             linkopts = linkopts + default.linkopts,
             alwayslink = 1,
+            linkstatic = 1,
             **kwargs
         )
     else:
@@ -212,11 +236,12 @@
             copts = copts + default.copts,
             linkopts = linkopts + default.linkopts,
             alwayslink = 1,
+            linkstatic = 1,
             **kwargs
         )
 
 def _torque_impl(ctx):
-    v8root = "."
+    v8root = "external/v8"
     prefix = ctx.attr.prefix
 
     # Arguments
@@ -281,7 +306,7 @@
         args = args,
         extras = extras,
         tool = select({
-            "@config//:v8_target_is_32_bits": ":torque_non_pointer_compression",
+            "@v8//bazel/config:v8_target_is_32_bits": ":torque_non_pointer_compression",
             "//conditions:default": ":torque",
         }),
     )
@@ -292,7 +317,7 @@
         args = args,
         extras = extras,
         tool = select({
-            "@config//:v8_target_is_32_bits": ":torque_non_pointer_compression",
+            "@v8//bazel/config:v8_target_is_32_bits": ":torque_non_pointer_compression",
             "//conditions:default": ":torque",
         }),
     )
--- bazel/v8-non-pointer-compression.bzl
+++ bazel/v8-non-pointer-compression.bzl
@@ -1,12 +1,12 @@
 def _v8_disable_pointer_compression(settings, attr):
     return {
-        "//third_party/v8/HEAD:v8_enable_pointer_compression": "False",
+        "//:v8_enable_pointer_compression": "False",
     }
 
 v8_disable_pointer_compression = transition(
     implementation = _v8_disable_pointer_compression,
     inputs = [],
-    outputs = ["//third_party/v8/HEAD:v8_enable_pointer_compression"],
+    outputs = ["//:v8_enable_pointer_compression"],
 )
 
 # The implementation of transition_rule: all this does is copy the
@@ -51,7 +51,7 @@
         # consequences for your build. The whitelist defaults to "everything".
         # But you can redefine it more strictly if you feel that's prudent.
         "_allowlist_function_transition": attr.label(
-            default = "//tools/allowlists/function_transition_allowlist",
+            default = "@bazel_tools//tools/allowlists/function_transition_allowlist",
         ),
     },
     # Making this executable means it works with "$ bazel run".
--- src/heap/cppgc/default-platform.cc
+++ src/heap/cppgc/default-platform.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include <include/cppgc/default-platform.h>
+#include "include/cppgc/default-platform.h"
 
 namespace cppgc {
 
--- src/snapshot/snapshot-utils.cc
+++ src/snapshot/snapshot-utils.cc
@@ -5,7 +5,7 @@
 #include "src/snapshot/snapshot-utils.h"
 
 #include "src/base/sanitizer/msan.h"
-#include "third_party/zlib/zlib.h"
+#include "zlib.h"
 
 namespace v8 {
 namespace internal {
