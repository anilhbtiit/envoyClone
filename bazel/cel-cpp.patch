diff --git a/base/internal/value.h b/base/internal/value.h
index fb3e845..a08a5f7 100644
--- a/base/internal/value.h
+++ b/base/internal/value.h
@@ -55,13 +55,9 @@ NativeTypeId GetListValueTypeId(const ListValue& list_value);
 
 NativeTypeId GetMapValueTypeId(const MapValue& map_value);
 
-static_assert(std::is_trivially_copyable_v<absl::Duration>,
-              "absl::Duration must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Duration>,
               "absl::Duration must be trivially destructible.");
 
-static_assert(std::is_trivially_copyable_v<absl::Time>,
-              "absl::Time must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Time>,
               "absl::Time must be trivially destructible.");
 
diff --git a/base/value.h b/base/value.h
index 5d94d5e..d53370c 100644
--- a/base/value.h
+++ b/base/value.h
@@ -336,8 +336,6 @@ CEL_INTERNAL_VALUE_DECL(Value);
 }  // namespace cel
 
 #define CEL_INTERNAL_SIMPLE_VALUE_STANDALONES(value_class)       \
-  static_assert(std::is_trivially_copyable_v<value_class>,       \
-                #value_class " must be trivially copyable");     \
   static_assert(std::is_trivially_destructible_v<value_class>,   \
                 #value_class " must be trivially destructible"); \
                                                                  \
diff --git a/tools/flatbuffers_backed_impl.cc b/tools/flatbuffers_backed_impl.cc
index 10c0b1c..45ba72f 100644
--- a/tools/flatbuffers_backed_impl.cc
+++ b/tools/flatbuffers_backed_impl.cc
@@ -130,6 +130,7 @@ class ObjectStringIndexedMapImpl : public CelMap {
     return absl::nullopt;
   }
 
+  using CelMap::ListKeys;
   absl::StatusOr<const CelList*> ListKeys() const override { return &keys_; }
 
  private:
