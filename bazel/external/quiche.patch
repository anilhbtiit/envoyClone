diff --git a/http2/adapter/nghttp2_test_utils.h b/http2/adapter/nghttp2_test_utils.h
--- quiche/http2/adapter/nghttp2_test_utils.h
+++ quiche/http2/adapter/nghttp2_test_utils.h
@@ -31,8 +31,10 @@ class QUICHE_NO_EXPORT TestDataSource {
   }
 
   nghttp2_data_provider MakeDataProvider() {
+    nghttp2_data_source s;
+    s.ptr = this;
     return nghttp2_data_provider{
-        .source = {.ptr = this},
-        .read_callback = [](nghttp2_session*, int32_t, uint8_t*, size_t length,
-                            uint32_t* data_flags, nghttp2_data_source* source,
-                            void*) -> ssize_t {
+        s,
+        [](nghttp2_session*, int32_t, uint8_t*, size_t length,
+           uint32_t* data_flags, nghttp2_data_source* source,
+           void*) -> ssize_t {

diff --git a/http2/adapter/adapter_impl_comparison_test.cc b/http2/adapter/adapter_impl_comparison_test.cc
--- quiche/http2/adapter/adapter_impl_comparison_test.cc
+++ quiche/http2/adapter/adapter_impl_comparison_test.cc
@@ -17,7 +17,8 @@ TEST(AdapterImplComparisonTest, ClientHa
       NgHttp2Adapter::CreateClientAdapter(nghttp2_visitor);
 
   RecordingHttp2Visitor oghttp2_visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   std::unique_ptr<OgHttp2Adapter> oghttp2_adapter =
       OgHttp2Adapter::Create(oghttp2_visitor, options);
 
@@ -43,6 +44,7 @@ TEST(AdapterImplComparisonTest, ServerHa
       NgHttp2Adapter::CreateServerAdapter(nghttp2_visitor);
 
   RecordingHttp2Visitor oghttp2_visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   std::unique_ptr<OgHttp2Adapter> oghttp2_adapter =
       OgHttp2Adapter::Create(oghttp2_visitor, options);

diff --git a/quiche/http2/adapter/nghttp2_adapter_test.cc b/quiche/http2/adapter/nghttp2_adapter_test.cc
--- quiche/http2/adapter/nghttp2_adapter_test.cc
+++ quiche/http2/adapter/nghttp2_adapter_test.cc
@@ -1778,7 +1778,7 @@ TEST(NgHttp2AdapterTest, ClientReceivesG
 
   const std::string initial_frames =
       TestFrameSequence()
-          .ServerPreface({{.id = MAX_CONCURRENT_STREAMS, .value = 1}})
+          .ServerPreface({{MAX_CONCURRENT_STREAMS, 1}})
           .Serialize();
 
   // Server preface (SETTINGS with MAX_CONCURRENT_STREAMS)
@@ -2612,7 +2612,7 @@ TEST(NgHttp2AdapterTest, ClientObeysMaxC
 
   const std::string initial_frames =
       TestFrameSequence()
-          .ServerPreface({{.id = MAX_CONCURRENT_STREAMS, .value = 1}})
+          .ServerPreface({{MAX_CONCURRENT_STREAMS, 1}})
           .Serialize();
   testing::InSequence s;

diff --git a/quiche/http2/adapter/oghttp2_adapter_test.cc b/quiche/http2/adapter/oghttp2_adapter_test.cc
--- quiche/http2/adapter/oghttp2_adapter_test.cc
+++ quiche/http2/adapter/oghttp2_adapter_test.cc
@@ -44,14 +44,16 @@ enum FrameFlag {
 
 TEST(OgHttp2AdapterTest, IsServerSession) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_TRUE(adapter->IsServerSession());
 }
 
 TEST(OgHttp2AdapterTest, ProcessBytes) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence seq;
@@ -66,14 +68,16 @@ TEST(OgHttp2AdapterTest, ProcessBytes) {
 
 TEST(OgHttp2AdapterTest, InitialSettingsNoExtendedConnect) {
   DataSavingVisitor client_visitor;
-  OgHttp2Adapter::Options client_options{.perspective = Perspective::kClient,
-                                         .max_header_list_bytes = 42,
-                                         .allow_extended_connect = false};
+  OgHttp2Adapter::Options client_options;
+  client_options.perspective = Perspective::kClient;
+  client_options.max_header_list_bytes = 42;
+  client_options.allow_extended_connect = false;
   auto client_adapter = OgHttp2Adapter::Create(client_visitor, client_options);
 
   DataSavingVisitor server_visitor;
-  OgHttp2Adapter::Options server_options{.perspective = Perspective::kServer,
-                                         .allow_extended_connect = false};
+  OgHttp2Adapter::Options server_options;
+  server_options.perspective = Perspective::kServer;
+  server_options.allow_extended_connect = false;
   auto server_adapter = OgHttp2Adapter::Create(server_visitor, server_options);
 
   testing::InSequence s;
@@ -126,13 +130,15 @@ TEST(OgHttp2AdapterTest, InitialSettings
 
 TEST(OgHttp2AdapterTest, InitialSettings) {
   DataSavingVisitor client_visitor;
-  OgHttp2Adapter::Options client_options{.perspective = Perspective::kClient,
-                                         .max_header_list_bytes = 42};
+  OgHttp2Adapter::Options client_options;
+  client_options.perspective = Perspective::kClient;
+  client_options.max_header_list_bytes = 42;
   ASSERT_TRUE(client_options.allow_extended_connect);
   auto client_adapter = OgHttp2Adapter::Create(client_visitor, client_options);
 
   DataSavingVisitor server_visitor;
-  OgHttp2Adapter::Options server_options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options server_options;
+  server_options.perspective = Perspective::kServer;
   ASSERT_TRUE(server_options.allow_extended_connect);
   auto server_adapter = OgHttp2Adapter::Create(server_visitor, server_options);
 
@@ -189,7 +195,8 @@ TEST(OgHttp2AdapterTest, InitialSettings
 
 TEST(OgHttp2AdapterTest, AutomaticSettingsAndPingAcks) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames =
@@ -228,8 +235,9 @@ TEST(OgHttp2AdapterTest, AutomaticSettin
 
 TEST(OgHttp2AdapterTest, AutomaticPingAcksDisabled) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .auto_ping_ack = false};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.auto_ping_ack = false;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames =
@@ -265,7 +273,8 @@ TEST(OgHttp2AdapterTest, AutomaticPingAc
 
 TEST(OgHttp2AdapterTest, ClientHandles100Headers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -342,7 +351,8 @@ TEST(OgHttp2AdapterTest, ClientHandles10
 
 TEST(OgHttp2AdapterTest, QueuingWindowUpdateAffectsWindow) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_EQ(adapter->GetReceiveWindowSize(), kInitialFlowControlWindowSize);
@@ -376,7 +386,8 @@ TEST(OgHttp2AdapterTest, QueuingWindowUp
 
 TEST(OgHttp2AdapterTest, AckOfSettingInitialWindowSizeAffectsWindow) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -461,7 +472,8 @@ TEST(OgHttp2AdapterTest, AckOfSettingIni
 
 TEST(OgHttp2AdapterTest, ClientRejects100HeadersWithFin) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -527,7 +539,8 @@ TEST(OgHttp2AdapterTest, ClientRejects10
 
 TEST(OgHttp2AdapterTest, ClientRejects100HeadersWithContent) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -590,7 +603,8 @@ TEST(OgHttp2AdapterTest, ClientRejects10
 
 TEST(OgHttp2AdapterTest, ClientRejects100HeadersWithContentLength) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -657,7 +671,8 @@ TEST(OgHttp2AdapterTest, ClientRejects10
 
 TEST(OgHttp2AdapterTest, ClientHandles204WithContent) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -745,7 +760,8 @@ TEST(OgHttp2AdapterTest, ClientHandles20
 
 TEST(OgHttp2AdapterTest, ClientHandles304WithContent) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -809,7 +825,8 @@ TEST(OgHttp2AdapterTest, ClientHandles30
 
 TEST(OgHttp2AdapterTest, ClientHandles304WithContentLength) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -866,7 +883,8 @@ TEST(OgHttp2AdapterTest, ClientHandles30
 
 TEST(OgHttp2AdapterTest, ClientHandlesTrailers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -946,7 +964,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesTr
 
 TEST(OgHttp2AdapterTest, ClientSendsTrailers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -997,7 +1016,8 @@ TEST(OgHttp2AdapterTest, ClientSendsTrai
 
 TEST(OgHttp2AdapterTest, ClientHandlesMetadata) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1081,7 +1101,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesMe
 
 TEST(OgHttp2AdapterTest, ClientHandlesMetadataWithEmptyPayload) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1145,7 +1166,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesMe
 
 TEST(OgHttp2AdapterTest, ClientHandlesMetadataWithPayloadError) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1219,7 +1241,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesMe
 
 TEST(OgHttp2AdapterTest, ClientHandlesMetadataWithCompletionError) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1294,7 +1317,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesMe
 
 TEST(OgHttp2AdapterTest, ClientRstStreamWhileHandlingHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1373,7 +1397,8 @@ TEST(OgHttp2AdapterTest, ClientRstStream
 
 TEST(OgHttp2AdapterTest, ClientConnectionErrorWhileHandlingHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1446,7 +1471,8 @@ TEST(OgHttp2AdapterTest, ClientConnectio
 
 TEST(OgHttp2AdapterTest, ClientConnectionErrorWhileHandlingHeadersOnly) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1518,7 +1544,8 @@ TEST(OgHttp2AdapterTest, ClientConnectio
 
 TEST(OgHttp2AdapterTest, ClientRejectsHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1587,7 +1614,8 @@ TEST(OgHttp2AdapterTest, ClientRejectsHe
 
 TEST(OgHttp2AdapterTest, ClientHandlesSmallerHpackHeaderTableSetting) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1634,7 +1662,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesSm
 
 TEST(OgHttp2AdapterTest, ClientHandlesLargerHpackHeaderTableSetting) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1675,7 +1704,8 @@ TEST(OgHttp2AdapterTest, ClientHandlesLa
 
 TEST(OgHttp2AdapterTest, ClientSendsHpackHeaderTableSetting) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1810,7 +1840,8 @@ TEST(OgHttp2AdapterTest, ClientSendsHpac
 // library should also invoke OnInvalidFrame() for the invalid HEADERS frame.
 TEST(OgHttp2AdapterTest, DISABLED_ClientHandlesInvalidTrailers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1891,7 +1922,8 @@ TEST(OgHttp2AdapterTest, DISABLED_Client
 
 TEST(OgHttp2AdapterTest, ClientStartsShutdown) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_FALSE(adapter->want_write());
@@ -1915,7 +1947,8 @@ TEST(OgHttp2AdapterTest, ClientStartsShu
 
 TEST(OgHttp2AdapterTest, ClientReceivesGoAway) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -1996,7 +2029,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesG
 
 TEST(OgHttp2AdapterTest, ClientReceivesMultipleGoAways) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -2078,7 +2112,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesM
 
 TEST(OgHttp2AdapterTest, ClientReceivesGoAwayWithPendingStreams) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -2260,7 +2296,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesG
 
 TEST(OgHttp2AdapterTest, ClientFailsOnGoAway) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -2337,7 +2374,8 @@ TEST(OgHttp2AdapterTest, ClientFailsOnGo
 
 TEST(OgHttp2AdapterTest, ClientRejects101Response) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -2408,7 +2446,8 @@ TEST(OgHttp2AdapterTest, ClientRejects10
 
 TEST(OgHttp2AdapterTest, ClientObeysMaxConcurrentStreams) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_FALSE(adapter->want_write());
@@ -2536,7 +2575,8 @@ TEST(OgHttp2AdapterTest, ClientObeysMaxC
 
 TEST(OgHttp2AdapterTest, ClientReceivesInitialWindowSetting) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string initial_frames =
@@ -2602,7 +2642,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesI
 
 TEST(OgHttp2AdapterTest, ClientReceivesInitialWindowSettingAfterStreamStart) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string initial_frames =
@@ -2686,7 +2727,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesI
 
 TEST(OgHttp2AdapterTest, InvalidInitialWindowSetting) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const uint32_t kTooLargeInitialWindow = 1u << 31;
@@ -2729,7 +2771,8 @@ TEST(OgHttp2AdapterTest, InvalidInitialW
 
 TEST(OggHttp2AdapterClientTest, InitialWindowSettingCausesOverflow) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -2810,7 +2853,8 @@ TEST(OggHttp2AdapterClientTest, InitialW
 
 TEST(OgHttp2AdapterTest, FailureSendingConnectionPreface) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   visitor.set_has_write_error();
@@ -2822,7 +2866,8 @@ TEST(OgHttp2AdapterTest, FailureSendingC
 
 TEST(OgHttp2AdapterTest, MaxFrameSizeSettingNotAppliedBeforeAck) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const uint32_t large_frame_size = kDefaultFramePayloadSizeLimit + 42;
@@ -2892,7 +2937,8 @@ TEST(OgHttp2AdapterTest, MaxFrameSizeSet
 
 TEST(OgHttp2AdapterTest, MaxFrameSizeSettingAppliedAfterAck) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const uint32_t large_frame_size = kDefaultFramePayloadSizeLimit + 42;
@@ -2963,7 +3009,8 @@ TEST(OgHttp2AdapterTest, MaxFrameSizeSet
 
 TEST(OgHttp2AdapterTest, ClientForbidsPushPromise) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3036,7 +3083,8 @@ TEST(OgHttp2AdapterTest, ClientForbidsPu
 
 TEST(OgHttp2AdapterTest, ClientForbidsPushStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3109,7 +3157,8 @@ TEST(OgHttp2AdapterTest, ClientForbidsPu
 
 TEST(OgHttp2AdapterTest, ClientReceivesDataOnClosedStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_CALL(visitor, OnBeforeFrameSent(SETTINGS, 0, _, 0x0));
@@ -3201,7 +3250,8 @@ TEST(OgHttp2AdapterTest, ClientReceivesD
 
 TEST(OgHttp2AdapterTest, ClientEncountersFlowControlBlock) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3283,7 +3333,8 @@ TEST(OgHttp2AdapterTest, ClientEncounter
 
 TEST(OgHttp2AdapterTest, ClientSendsTrailersAfterFlowControlBlock) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3346,7 +3397,8 @@ TEST(OgHttp2AdapterTest, ClientSendsTrai
 
 TEST(OgHttp2AdapterTest, ClientSendsMetadataAfterFlowControlBlock) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3391,7 +3443,8 @@ TEST(OgHttp2AdapterTest, ClientSendsMeta
 
 TEST(OgHttp2AdapterTest, ClientQueuesRequests) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kClient;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -3472,7 +3525,8 @@ TEST(OgHttp2AdapterTest, ClientQueuesReq
 
 TEST(OgHttp2AdapterTest, SubmitMetadata) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   auto source = absl::make_unique<TestMetadataSource>(ToHeaderBlock(ToHeaders(
@@ -3495,7 +3549,8 @@ TEST(OgHttp2AdapterTest, SubmitMetadata)
 
 TEST(OgHttp2AdapterTest, SubmitMetadataMultipleFrames) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const auto kLargeValue = std::string(63 * 1024, 'a');
@@ -3530,7 +3585,8 @@ TEST(OgHttp2AdapterTest, SubmitMetadataM
 
 TEST(OgHttp2AdapterTest, SubmitConnectionMetadata) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   auto source = absl::make_unique<TestMetadataSource>(ToHeaderBlock(ToHeaders(
@@ -3553,7 +3609,8 @@ TEST(OgHttp2AdapterTest, SubmitConnectio
 
 TEST(OgHttp2AdapterTest, GetSendWindowSize) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const int peer_window = adapter->GetSendWindowSize();
@@ -3562,7 +3619,8 @@ TEST(OgHttp2AdapterTest, GetSendWindowSi
 
 TEST(OgHttp2AdapterTest, MarkDataConsumedForNonexistentStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   // Send some data on stream 1 so the connection window manager doesn't
@@ -3599,7 +3657,8 @@ TEST(OgHttp2AdapterTest, MarkDataConsume
 
 TEST(OgHttp2AdapterTest, TestSerialize) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_TRUE(adapter->want_read());
@@ -3644,7 +3703,8 @@ TEST(OgHttp2AdapterTest, TestSerialize) 
 
 TEST(OgHttp2AdapterTest, TestPartialSerialize) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_FALSE(adapter->want_write());
@@ -3679,7 +3739,8 @@ TEST(OgHttp2AdapterTest, TestPartialSeri
 
 TEST(OgHttp2AdapterTest, TestStreamInitialWindowSizeUpdates) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   adapter->SubmitSettings({{INITIAL_WINDOW_SIZE, 80000}});
@@ -3752,7 +3813,8 @@ TEST(OgHttp2AdapterTest, TestStreamIniti
 
 TEST(OgHttp2AdapterTest, ConnectionErrorOnControlFrameSent) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames =
@@ -3792,7 +3854,8 @@ TEST(OgHttp2AdapterTest, ConnectionError
 
 TEST(OgHttp2AdapterTest, ConnectionErrorOnDataFrameSent) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -3855,7 +3918,8 @@ TEST(OgHttp2AdapterTest, ConnectionError
 
 TEST(OgHttp2AdapterTest, ClientSendsContinuation) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -3892,7 +3956,8 @@ TEST(OgHttp2AdapterTest, ClientSendsCont
 
 TEST(OgHttp2AdapterTest, ClientSendsMetadataWithContinuation) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -3954,7 +4019,8 @@ TEST(OgHttp2AdapterTest, ClientSendsMeta
 
 TEST(OgHttp2AdapterTest, RepeatedHeaderNames) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4018,7 +4084,8 @@ TEST(OgHttp2AdapterTest, RepeatedHeaderN
 
 TEST(OgHttp2AdapterTest, ServerRespondsToRequestWithTrailers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4103,8 +4170,9 @@ TEST(OgHttp2AdapterTest, ServerRespondsT
 
 TEST(OgHttp2AdapterTest, ServerReceivesMoreHeaderBytesThanConfigured) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .max_header_list_bytes = 42};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.max_header_list_bytes = 42;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4155,7 +4223,8 @@ TEST(OgHttp2AdapterTest, ServerReceivesM
 
 TEST(OgHttp2AdapterTest, ServerSubmitsResponseWithDataSourceError) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4222,7 +4291,8 @@ TEST(OgHttp2AdapterTest, ServerSubmitsRe
 
 TEST(OgHttp2AdapterTest, CompleteRequestWithServerResponse) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4279,7 +4349,8 @@ TEST(OgHttp2AdapterTest, CompleteRequest
 
 TEST(OgHttp2AdapterTest, IncompleteRequestWithServerResponse) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4330,8 +4401,9 @@ TEST(OgHttp2AdapterTest, IncompleteReque
 
 TEST(OgHttp2AdapterTest, IncompleteRequestWithServerResponseRstStreamEnabled) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .rst_stream_no_error_when_incomplete = true};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.rst_stream_no_error_when_incomplete = true;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4385,7 +4457,8 @@ TEST(OgHttp2AdapterTest, IncompleteReque
 
 TEST(OgHttp2AdapterTest, ServerSendsInvalidTrailers) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   EXPECT_FALSE(adapter->want_write());
 
@@ -4464,7 +4537,8 @@ TEST(OgHttp2AdapterTest, ServerSendsInva
 
 TEST(OgHttp2AdapterTest, ServerHandlesDataWithPadding) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -4525,7 +4599,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesDa
 
 TEST(OgHttp2AdapterTest, ServerHandlesHostHeader) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -4603,9 +4678,9 @@ TEST(OgHttp2AdapterTest, ServerHandlesHo
 TEST(OgHttp2AdapterTest, ServerSubmitsTrailersWhileDataDeferred) {
   DataSavingVisitor visitor;
   for (const bool queue_trailers : {true, false}) {
-    OgHttp2Adapter::Options options{
-        .perspective = Perspective::kServer,
-        .trailers_require_end_data = queue_trailers};
+    OgHttp2Adapter::Options options;
+    options.perspective = Perspective::kServer;
+    options.trailers_require_end_data = queue_trailers;
     auto adapter = OgHttp2Adapter::Create(visitor, options);
 
     const std::string frames = TestFrameSequence()
@@ -4709,7 +4784,8 @@ TEST(OgHttp2AdapterTest, ServerSubmitsTr
 
 TEST(OgHttp2AdapterTest, ClientDisobeysConnectionFlowControl) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -4773,7 +4849,8 @@ TEST(OgHttp2AdapterTest, ClientDisobeysC
 
 TEST(OgHttp2AdapterTest, ClientDisobeysConnectionFlowControlWithOneDataFrame) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   // Allow the client to send a DATA frame that exceeds the connection flow
@@ -4853,7 +4930,8 @@ TEST(OgHttp2AdapterTest, ClientDisobeysC
 
 TEST(OgHttp2AdapterTest, ClientDisobeysConnectionFlowControlAcrossReads) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   // Allow the client to send a DATA frame that exceeds the connection flow
@@ -4935,7 +5013,8 @@ TEST(OgHttp2AdapterTest, ClientDisobeysC
 
 TEST(OgHttp2AdapterTest, ClientDisobeysStreamFlowControl) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5017,7 +5096,8 @@ TEST(OgHttp2AdapterTest, ClientDisobeysS
 
 TEST(OgHttp2AdapterTest, ServerErrorWhileHandlingHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5078,7 +5158,8 @@ TEST(OgHttp2AdapterTest, ServerErrorWhil
 
 TEST(OgHttp2AdapterTest, ServerErrorWhileHandlingHeadersDropsFrames) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5166,7 +5247,8 @@ TEST(OgHttp2AdapterTest, ServerErrorWhil
 
 TEST(OgHttp2AdapterTest, ServerConnectionErrorWhileHandlingHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5228,7 +5310,8 @@ TEST(OgHttp2AdapterTest, ServerConnectio
 
 TEST(OgHttp2AdapterTest, ServerErrorAfterHandlingHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5283,7 +5366,8 @@ TEST(OgHttp2AdapterTest, ServerErrorAfte
 // the frame header, which is a fatal error for the connection.
 TEST(OgHttp2AdapterTest, ServerRejectsFrameHeader) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5331,7 +5415,8 @@ TEST(OgHttp2AdapterTest, ServerRejectsFr
 
 TEST(OgHttp2AdapterTest, ServerRejectsBeginningOfData) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5392,9 +5477,10 @@ TEST(OgHttp2AdapterTest, ServerRejectsBe
 
 TEST(OgHttp2AdapterTest, ServerReceivesTooLargeHeader) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .max_header_list_bytes = 64 * 1024,
-                                  .max_header_field_size = 64 * 1024};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.max_header_list_bytes = 64 * 1024;
+  options.max_header_field_size = 64 * 1024;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   // Due to configuration, the library will accept a maximum of 64kB of huffman
@@ -5463,7 +5549,8 @@ TEST(OgHttp2AdapterTest, ServerReceivesT
 
 TEST(OgHttp2AdapterTest, ServerReceivesInvalidAuthority) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5514,7 +5601,8 @@ TEST(OgHttp2AdapterTest, ServerReceivesI
 
 TEST(OgHttpAdapterTest, ServerReceivesGoAway) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5571,7 +5659,8 @@ TEST(OgHttpAdapterTest, ServerReceivesGo
 
 TEST(OgHttp2AdapterTest, ServerRejectsStreamData) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
@@ -5695,7 +5784,8 @@ TEST(OgHttp2AdapterInteractionTest, Clie
 TEST(OgHttp2AdapterInteractionTest,
      ClientServerInteractionRepeatedHeaderNames) {
   DataSavingVisitor client_visitor;
-  OgHttp2Adapter::Options client_options{.perspective = Perspective::kClient};
+  OgHttp2Adapter::Options client_options;
+  client_options.perspective = Perspective::kClient;
   auto client_adapter = OgHttp2Adapter::Create(client_visitor, client_options);
 
   const std::vector<Header> headers1 =
@@ -5718,7 +5808,8 @@ TEST(OgHttp2AdapterInteractionTest,
   EXPECT_EQ(0, send_result);
 
   DataSavingVisitor server_visitor;
-  OgHttp2Adapter::Options server_options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options server_options;
+  server_options.perspective = Perspective::kServer;
   auto server_adapter = OgHttp2Adapter::Create(server_visitor, server_options);
 
   testing::InSequence s;
@@ -5748,7 +5839,8 @@ TEST(OgHttp2AdapterInteractionTest,
 
 TEST(OgHttp2AdapterTest, ServerForbidsNewStreamBelowWatermark) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_EQ(0, adapter->GetHighestReceivedStreamId());
@@ -5812,7 +5904,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsNe
 
 TEST(OgHttp2AdapterTest, ServerForbidsWindowUpdateOnIdleStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_EQ(0, adapter->GetHighestReceivedStreamId());
@@ -5853,7 +5946,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsWi
 
 TEST(OgHttp2AdapterTest, ServerForbidsDataOnIdleStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_EQ(0, adapter->GetHighestReceivedStreamId());
@@ -5896,7 +5990,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsDa
 
 TEST(OgHttp2AdapterTest, ServerForbidsRstStreamOnIdleStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_EQ(0, adapter->GetHighestReceivedStreamId());
@@ -5940,7 +6035,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsRs
 
 TEST(OgHttp2AdapterTest, ServerForbidsNewStreamAboveStreamLimit) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   adapter->SubmitSettings({{MAX_CONCURRENT_STREAMS, 1}});
 
@@ -6023,7 +6119,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsNe
 
 TEST(OgHttp2AdapterTest, ServerRstStreamsNewStreamAboveStreamLimitBeforeAck) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   adapter->SubmitSettings({{MAX_CONCURRENT_STREAMS, 1}});
 
@@ -6100,8 +6197,9 @@ TEST(OgHttp2AdapterTest, ServerRstStream
 
 TEST(OgHttp2AdapterTest, ServerForbidsProtocolPseudoheaderBeforeAck) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .allow_extended_connect = false};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.allow_extended_connect = false;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string initial_frames =
@@ -6196,7 +6294,8 @@ TEST(OgHttp2AdapterTest, ServerForbidsPr
 
 TEST(OgHttp2AdapterTest, ServerAllowsProtocolPseudoheaderAfterAck) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
   adapter->SubmitSettings({{ENABLE_CONNECT_PROTOCOL, 1}});
 
@@ -6253,7 +6352,8 @@ TEST(OgHttp2AdapterTest, ServerAllowsPro
 
 TEST(OgHttp2AdapterTest, SkipsSendingFramesForRejectedStream) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string initial_frames =
@@ -6319,7 +6419,8 @@ TEST(OgHttp2AdapterTest, SkipsSendingFra
 
 TEST(OgHttpAdapterServerTest, ServerStartsShutdown) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_FALSE(adapter->want_write());
@@ -6340,7 +6441,8 @@ TEST(OgHttpAdapterServerTest, ServerStar
 
 TEST(OgHttp2AdapterTest, ServerStartsShutdownAfterGoaway) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   EXPECT_FALSE(adapter->want_write());
@@ -6369,8 +6471,9 @@ TEST(OgHttp2AdapterTest, ServerStartsShu
 // when the blackhole option is enabled.
 TEST(OgHttp2AdapterTest, ConnectionErrorWithBlackholingData) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .blackhole_data_on_connection_error = true};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.blackhole_data_on_connection_error = true;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames =
@@ -6400,8 +6503,9 @@ TEST(OgHttp2AdapterTest, ConnectionError
 // negative value for ProcessBytes() when the blackhole option is disabled.
 TEST(OgHttp2AdapterTest, ConnectionErrorWithoutBlackholingData) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer,
-                                  .blackhole_data_on_connection_error = false};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
+  options.blackhole_data_on_connection_error = false;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames =
@@ -6429,7 +6533,8 @@ TEST(OgHttp2AdapterTest, ConnectionError
 
 TEST(OgHttp2AdapterTest, ServerDoesNotSendFramesAfterImmediateGoAway) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   // Submit a custom initial SETTINGS frame with one setting.
@@ -6517,7 +6622,8 @@ TEST(OgHttp2AdapterTest, ServerDoesNotSe
 
 TEST(OgHttp2AdapterTest, ServerHandlesContentLength) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -6586,7 +6692,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesCo
 
 TEST(OgHttp2AdapterTest, ServerHandlesContentLengthMismatch) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -6714,7 +6821,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesCo
 
 TEST(OgHttp2AdapterTest, ServerHandlesAsteriskPathForOptions) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -6757,7 +6865,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesAs
 
 TEST(OgHttp2AdapterTest, ServerHandlesInvalidPath) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -6846,7 +6955,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesIn
 
 TEST(OgHttp2AdapterTest, ServerHandlesTeHeader) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
@@ -6912,7 +7022,8 @@ TEST(OgHttp2AdapterTest, ServerHandlesTe
 
 TEST(OgHttp2AdapterTest, ServerHandlesConnectionSpecificHeaders) {
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{.perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   testing::InSequence s;
diff --git a/quiche/http2/adapter/oghttp2_adapter_test.cc b/quiche/http2/adapter/oghttp2_adapter_test.cc
--- quiche/http2/adapter/oghttp2_adapter_test.cc
+++ quiche/http2/adapter/oghttp2_adapter_test.cc
@@ -2199,7 +2199,7 @@ TEST(OgHttp2AdapterTest, ClientReceivesG
 
   const std::string initial_frames =
       TestFrameSequence()
-          .ServerPreface({{.id = MAX_CONCURRENT_STREAMS, .value = 1}})
+          .ServerPreface({{MAX_CONCURRENT_STREAMS, 1}})
           .Serialize();
 
   // Server preface (SETTINGS with MAX_CONCURRENT_STREAMS)
@@ -2469,7 +2469,7 @@ TEST(OgHttp2AdapterTest, ClientObeysMaxC
 
   const std::string initial_frames =
       TestFrameSequence()
-          .ServerPreface({{.id = MAX_CONCURRENT_STREAMS, .value = 1}})
+          .ServerPreface({{MAX_CONCURRENT_STREAMS, 1}})
           .Serialize();
   testing::InSequence s;
 
diff --git a/quiche/http2/adapter/oghttp2_adapter_test.cc b/quiche/http2/adapter/oghttp2_adapter_test.cc
--- quiche/http2/adapter/oghttp2_adapter_test.cc
+++ quiche/http2/adapter/oghttp2_adapter_test.cc
@@ -5723,11 +5723,15 @@ TEST(OgHttp2AdapterTest, ServerRejectsSt
 // without recursion guards in OgHttp2Session.
 TEST(OgHttp2AdapterInteractionTest, ClientServerInteractionTest) {
   MockHttp2Visitor client_visitor;
+  OgHttp2Adapter::Options client_options;
+  client_options.perspective = Perspective::kClient;
   auto client_adapter = OgHttp2Adapter::Create(
-      client_visitor, {.perspective = Perspective::kClient});
+      client_visitor, client_options);
   MockHttp2Visitor server_visitor;
+  OgHttp2Adapter::Options server_options;
+  server_options.perspective = Perspective::kServer;
   auto server_adapter = OgHttp2Adapter::Create(
-      server_visitor, {.perspective = Perspective::kServer});
+      server_visitor, server_options);
 
   // Feeds bytes sent from the client into the server's ProcessBytes.
   EXPECT_CALL(client_visitor, OnReadyToSend(_))
@@ -7152,10 +7156,10 @@ TEST(OgHttp2AdapterTest, ServerHandlesCo
 TEST(OgHttp2AdapterTest, ServerUsesCustomWindowUpdateStrategy) {
   // Test the use of a custom WINDOW_UPDATE strategy.
   DataSavingVisitor visitor;
-  OgHttp2Adapter::Options options{
-      .should_window_update_fn = [](int64_t /*limit*/, int64_t /*size*/,
-                                    int64_t /*delta*/) { return true; },
-      .perspective = Perspective::kServer};
+  OgHttp2Adapter::Options options;
+  options.should_window_update_fn = [](int64_t /*limit*/, int64_t /*size*/,
+                                       int64_t /*delta*/) { return true; };
+  options.perspective = Perspective::kServer;
   auto adapter = OgHttp2Adapter::Create(visitor, options);
 
   const std::string frames = TestFrameSequence()
diff --git a/quiche/http2/adapter/oghttp2_adapter_test.cc b/quiche/http2/adapter/oghttp2_adapter_test.cc
--- quiche/http2/adapter/oghttp2_adapter_test.cc
+++ quiche/http2/adapter/oghttp2_adapter_test.cc
@@ -5653,13 +5653,13 @@ TEST(OgHttp2AdapterTest, ServerRejectsSt
 // Exercises a naive mutually recursive test client and server. This test fails
 // without recursion guards in OgHttp2Session.
 TEST(OgHttp2AdapterInteractionTest, ClientServerInteractionTest) {
-  MockHttp2Visitor client_visitor;
+  testing::NiceMock<MockHttp2Visitor> client_visitor;
   OgHttp2Adapter::Options client_options;
   client_options.perspective = Perspective::kClient;
   auto client_adapter = OgHttp2Adapter::Create(
       client_visitor, client_options);
-  MockHttp2Visitor server_visitor;
+  testing::NiceMock<MockHttp2Visitor> server_visitor;
   OgHttp2Adapter::Options server_options;
   server_options.perspective = Perspective::kServer;
   auto server_adapter = OgHttp2Adapter::Create(
       server_visitor, server_options);
diff --git a/quiche/http2/adapter/recording_http2_visitor_test.cc b/quiche/http2/adapter/recording_http2_visitor_test.cc
--- quiche/http2/adapter/recording_http2_visitor_test.cc
+++ quiche/http2/adapter/recording_http2_visitor_test.cc
@@ -51,8 +51,7 @@ TEST(RecordingHttp2VisitorTest, SameEven
   const uint8_t flags = random.Rand8();
   const Http2ErrorCode error_code = static_cast<Http2ErrorCode>(
       random.Uniform(static_cast<int>(Http2ErrorCode::MAX_ERROR_CODE)));
-  const Http2Setting setting = {.id = random.Rand16(),
-                                .value = random.Rand32()};
+  const Http2Setting setting = {random.Rand16(), random.Rand32()};
   const absl::string_view alphabet = "abcdefghijklmnopqrstuvwxyz0123456789-";
   const std::string some_string =
       random.RandStringWithAlphabet(random.Rand8(), alphabet);
