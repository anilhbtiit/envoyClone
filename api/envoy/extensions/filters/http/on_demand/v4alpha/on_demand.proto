syntax = "proto3";

package envoy.extensions.filters.http.on_demand.v4alpha;

import "envoy/config/core/v4alpha/config_source.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.on_demand.v4alpha";
option java_outer_classname = "OnDemandProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: On Demand Discovery]
// On Demand Discovery :ref:`configuration overview <config_http_filters_on_demand>`.
// [#extension: envoy.filters.http.on_demand]

// On Demand Discovery filter config.
message OnDemand {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.filters.http.on_demand.v3.OnDemand";

  // An optional configuration for on-demand cluster discovery
  // service. If not specified, the on-demand cluster discovery will
  // be disabled. When it's specified, the filter will pause a request
  // to an unknown cluster and will begin a cluster discovery
  // process. When the discovery is finished (successfully or not),
  // the request will be resumed for further processing.
  config.core.v4alpha.ConfigSource odcds_config = 1;
}

// Per-route configuration for On Demand Discovery.
message PerRouteConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.filters.http.on_demand.v3.PerRouteConfig";

  // An optional configuration for on-demand cluster discovery
  // service. If not specified, the on-demand cluster discovery will
  // be disabled. When it's specified, the filter will pause a request
  // to an unknown cluster and will begin a cluster discovery
  // process. When the discovery is finished (successfully or not),
  // the request will be resumed for further processing.
  config.core.v4alpha.ConfigSource odcds_config = 1;
}
