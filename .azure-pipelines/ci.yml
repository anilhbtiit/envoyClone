parameters:
- name: ciTarget
  displayName: "CI target"
  type: string
  default: release
- name: artifactSuffix
  displayName: "Suffix of artifact"
  type: string
  default: ""

# caching
- name: cacheKeyDocker
  type: string
  default: ".bazelrc"
- name: cacheKeyVersion
  type: string
  default: $(cacheKeyVersion)
- name: pathCacheTemp
  type: string
  default: $(pathCacheTemp)
- name: cacheName
  type: string
  default:

- name: tmpfsCacheDisabled
  type: string
  default: ''
- name: tmpfsDockerDisabled
  type: string
  default: ''

- name: bazelConfigRBE
  type: string
  default: --config=remote-ci --config=rbe-google --jobs=$(RbeJobs)
- name: cacheKeyBazel
  type: string
  default: $(cacheKeyBazel)
- name: cacheVersion
  type: string
  default: $(cacheKeyVersion)

- name: pathDockerBind
  type: string
  default: $(pathDockerBind)

- name: rbe
  displayName: "Enable RBE"
  type: boolean
  default: true
- name: managedAgent
  type: boolean
  default: true
- name: bazelBuildExtraOptions
  type: string
  default: ""
- name: bazelStartupExtraOptions
  type: string
  default: ""
- name: bazelUseBES
  displayName: "Upload bazel run data to BES"
  type: boolean
  default: true
- name: envoyBuildFilterExample
  type: string
  default: ""
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true
# Unfortunately, AZP is an unmittigated and undocumented disaster.
# The definition of primitive types is close to pointless, as depending
# on where things are set, azp just turns them into strings anyway.
- name: repoFetchDepth
  type: string
  default: 1
- name: repoFetchTags
  type: string
  default: false
# Auth
- name: authGithub
  type: string
  default: ""
# Publishing
- name: publishEnvoy
  type: string
  default: true
- name: publishTestResults
  type: string
  default: true

- name: diskspaceHack
  type: boolean
  default: false

- name: stepsPre
  type: stepList
  default: []
- name: stepsPost
  type: stepList
  default: []

- name: env
  type: object
  default: {}

steps:
- checkout: self
  fetchDepth: ${{ parameters.repoFetchDepth }}
  fetchTags: ${{ parameters.repoFetchTags }}

- bash: ./.azure-pipelines/cleanup.sh
  displayName: "Free disk space"
  condition: and(succeeded(), eq('${{ parameters.diskspaceHack }}', true))

# Set up tmpfs directories for self-hosted agents which have a surplus of mem.
#
# NB: Do not add any directory that grow larger than spare memory capacity!
- bash: |
    TMPDIRS=(
        # This is used as the final delivery directory for the binaries
        "$(Build.StagingDirectory)/envoy"
        # Bazel repository_cache which is cached by AZP (this speeds up cache load/save)
        "$(Build.StagingDirectory)/repository_cache"
        "$(Build.StagingDirectory)/bazel"
        "$(Build.StagingDirectory)/.cache"
        "$(Build.StagingDirectory)/bazel_root/install"
        "$(Build.StagingDirectory)/tmp"
        "$(Build.StagingDirectory)/bazel_root/base/external")
    if [[ "${{ parameters.artifactSuffix }}" == ".arm64" ]]; then
        TMPDIRS+=(
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/aarch64-fastbuild/testlogs"
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/aarch64-opt/testlogs")
    else
        TMPDIRS+=(
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/k8-fastbuild/testlogs"
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/k8-opt/testlogs")
    fi
    for tmpdir in "${TMPDIRS[@]}"; do
        echo "Mount(tmpfs): ${tmpdir}"
        sudo mkdir -p "$tmpdir"
        sudo mount -t tmpfs none "$tmpdir"
        sudo chown azure-pipelines "$tmpdir"
    done
    sudo chown -R azure-pipelines:azure-pipelines $(Build.StagingDirectory)/bazel_root/
  displayName: "Mount/tmpfs bazel directories"
  condition: and(succeeded(), eq('${{ parameters.managedAgent }}', false), ne('${{ parameters.tmpfsDockerDisabled }}', true))

- bash: |
    set -e
    CACHE_DIRS=(
        "$(Build.StagingDirectory)/envoy"
        "$(Build.StagingDirectory)/.cache/"
        "$(Build.StagingDirectory)/bazel_root/install/"
        "$(Build.StagingDirectory)/repository_cache/"
        "$(Build.StagingDirectory)/bazel_root/base/external")
    sudo mkdir -p "${CACHE_DIRS[@]}"
    if id -u vsts &> /dev/null; then
        sudo chown -R vsts:vsts "${CACHE_DIRS[@]}" $(Build.StagingDirectory)/bazel_root/
    else
        sudo chown -R azure-pipelines:azure-pipelines "${CACHE_DIRS[@]}" $(Build.StagingDirectory)/bazel_root/
    fi
    echo "Created bazel directories: "${CACHE_DIRS[*]}""
  displayName: "Create bazel directories"
  condition: and(succeeded(), eq('${{ parameters.tmpfsDockerDisabled }}', true))

# Caching
- template: cached.yml
  parameters:
    cacheName: "${{ parameters.cacheName }}"
    keyBazel: "${{ parameters.cacheKeyBazel }}"
    keyDocker: "${{ parameters.cacheKeyDocker }}"
    pathDockerBind: "${{ parameters.pathDockerBind }}"
    arch: "${{ parameters.artifactSuffix }}"
    pathTemp: "${{ parameters.pathCacheTemp }}"
    tmpfsDisabled: "${{ parameters.tmpfsCacheDisabled }}"
    tmpfsDockerDisabled: "${{ parameters.tmpfsDockerDisabled }}"

# Fetch for ci target
- template: bazel.yml
  parameters:
    authGithub: "${{ parameters.authGithub }}"
    bazelConfigRBE: "${{ parameters.bazelConfigRBE }}"
    bazelBuildExtraOptions: "${{ parameters.bazelBuildExtraOptions }}"
    bazelStartupExtraOptions: "${{ parameters.bazelStartupExtraOptions }}"
    bazelUseBES: ${{ parameters.bazelUseBES }}
    cacheTestResults: ${{ parameters.cacheTestResults }}
    ciTarget: fetch-${{ parameters.ciTarget }}
    env: ${{ parameters.env }}
    envoyBuildFilterExample: ${{ parameters.envoyBuildFilterExample }}
    rbe: ${{ parameters.rbe }}
    runStep: ${{ parameters.cacheName }}

- ${{ each step in parameters.stepsPre }}:
  - ${{ each pair in step }}:
      ${{ pair.key }}: ${{ pair.value }}

- bash: |
    sudo mkdir -p /etc/docker
    echo '{
      "ipv6": true,
      "fixed-cidr-v6": "2001:db8:1::/64"
    }' | sudo tee /etc/docker/daemon.json
    sudo service docker restart
  displayName: "Enable IPv6"
  condition: ${{ parameters.managedAgent }}

- template: bazel.yml
  parameters:
    authGithub: "${{ parameters.authGithub }}"
    bazelConfigRBE: "${{ parameters.bazelConfigRBE }}"
    bazelBuildExtraOptions: "${{ parameters.bazelBuildExtraOptions }}"
    bazelStartupExtraOptions: "${{ parameters.bazelStartupExtraOptions }}"
    bazelUseBES: ${{ parameters.bazelUseBES }}
    cacheTestResults: ${{ parameters.cacheTestResults }}
    ciTarget: ${{ parameters.ciTarget }}
    env: ${{ parameters.env }}
    envoyBuildFilterExample: ${{ parameters.envoyBuildFilterExample }}
    rbe: ${{ parameters.rbe }}
    runStep: yes

- ${{ each step in parameters.stepsPost }}:
  - ${{ each pair in step }}:
      ${{ pair.key }}: ${{ pair.value }}

- script: |
    set -e
    sudo .azure-pipelines/docker/save_cache.sh "$(Build.StagingDirectory)" /mnt/cache/all true true
    if id -u vsts &> /dev/null; then
        sudo chown -R vsts:vsts /mnt/cache/all
    else
        sudo chown -R azure-pipelines:azure-pipelines /mnt/cache/all
    fi

  displayName: "Cache/save (${{ parameters.cacheName}})"
  condition: and(succeeded(), ne('${{ parameters.cacheName }}', ''), ne(variables.CACHE_RESTORED, 'true'))

- task: PublishTestResults@2
  inputs:
    publishRunAttachments: false
    testResultsFiles: "**/bazel-out/**/testlogs/**/test.xml"
    testRunTitle: "${{ parameters.ciTarget }}"
    searchFolder: $(Build.StagingDirectory)/bazel_root
  timeoutInMinutes: 10
  condition: eq(${{ parameters.publishTestResults }}, 'true')
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: "$(Build.StagingDirectory)/envoy"
    artifactName: ${{ parameters.ciTarget }}
  timeoutInMinutes: 10
  condition: eq(${{ parameters.publishEnvoy }}, 'true')
