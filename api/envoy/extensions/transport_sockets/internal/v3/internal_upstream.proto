syntax = "proto3";

package envoy.extensions.transport_sockets.internal.v3;

import "envoy/config/core/v3/base.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.internal.v3";
option java_outer_classname = "InternalUpstreamProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/internal/v3;internalv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Internal Upstream]
// [#extension: envoy.transport_sockets.internal_upstream]

// Configuration for the internal upstream address. An internal address is a
// loopback user space socket residing in the same proxy instance.
message InternalUpstreamTransport {
  // Describes the location of the metadata value in the upstream cluster context.
  message MetadataValueSource {
    enum MetadataType {
      // Represents metadata from :ref:`the endpoint<envoy_api_field_endpoint.LbEndpoint.metadata>`.
      ENDPOINT = 0;

      // Represents metadata from :ref:`the upstream cluster<envoy_api_field_Cluster.metadata>`.
      CLUSTER = 1;
    }

    // Name is the filter namespace used in the dynamic metadata.
    string name = 1 [(validate.rules).string = {min_len: 1}];

    // Optional lookup path segments in the namespace struct for a nested struct.
    repeated string path_segments = 2;
  }

  // Specifies the metadata namespaces and values to insert into the downstream
  // internal connection dynamic metadata when an internal address is used as a host.
  map<string, MetadataValueSource> passthrough_metadata = 1;

  // The underlying transport socket being wrapped.
  config.core.v3.TransportSocket transport_socket = 2 [(validate.rules).message = {required: true}];
}
