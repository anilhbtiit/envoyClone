syntax = "proto3";

package envoy.config.core.v4alpha;

import "google/protobuf/struct.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.config.core.v4alpha";
option java_outer_classname = "SubstitutionFormatStringProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Substitution format string]

// Configuration to use multiple :ref:`command operators <config_access_log_command_operators>`
// to generate a new string in either plain text or JSON format.
message SubstitutionFormatString {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.core.v3.SubstitutionFormatString";

  oneof format {
    // Text access log  :ref:`format string<config_access_log_format_strings>`.
    // This field specifies :ref:`custom access log formats <config_access_log_format>`.
    //
    // .. code-block::
    //
    //   text_format: %RESP_BODY%:%RESPONSE_CODE%
    //
    // The following plain text will be created:
    //
    // .. code-block::
    //
    //   upstream connect error:204
    //
    string text_format = 1;

    // JSON access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
    // rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
    // be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA). See the
    // documentation for a specific command operator for details.
    //
    // .. code-block::
    //
    //  typed_json_format:
    //    status: %RESPONSE_CODE%
    //    message: %RESP_BODY%
    //
    // The following JSON object would be created:
    //
    // .. code-block:: json
    //
    //  {
    //    "status": 500,
    //    "message": "My error message"
    //  }
    //
    google.protobuf.Struct json_format = 2;
  }
}
