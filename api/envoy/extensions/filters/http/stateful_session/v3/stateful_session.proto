syntax = "proto3";

package envoy.extensions.filters.http.stateful_session.v3;

import "envoy/config/core/v3/extension.proto";
import "envoy/config/core/v3/health_check.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3";
option java_outer_classname = "StatefulSessionProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Stateful Session Filter]
//
// This filter sets an override host based on the extensible session state and updates the
// session state based on the final selected upstream host.
//
// [#extension: envoy.filters.http.stateful_session]
// [#comment:TODO(wbpcode): To support global feature enabled or disabled flag.]
message StatefulSession {
  // The expected health status of the host. Suppose a session is assigned to the host X.
  // However, if the health status of host X does not meet expectations, Envoy will select
  // new host for the session according to the load balancing algorithm. In other words,
  // the status of the target host must be in this list for session sticky to take effect.
  //
  // .. note::
  //
  //    The *DRAINING* and *TIMEOUT* will be interpreted as *UNHEALTHY* and *UNKNOWN* will
  //    be interpreted as *HEALTHY*.
  repeated config.core.v3.HealthStatus host_statuses = 1
      [(validate.rules).repeated = {min_items: 1}];

  // Specific implementation of session state. This session state will be used to store and
  // get address of the upstream host to which the session is assigned.
  //
  // [#extension-category: envoy.http.stateful_session]
  config.core.v3.TypedExtensionConfig session_state = 2
      [(validate.rules).message = {required: true}];
}

message StatefulSessionPerRoute {
  oneof override {
    option (validate.required) = true;

    // Disable the Lua filter for this particular vhost or route. If disabled is specified in
    // multiple per-filter-configs, the most specific one will be used.
    bool disabled = 1 [(validate.rules).bool = {const: true}];

    // Per-route stateful session configuration that can be served by RDS or static route table.
    StatefulSession stateful_session = 2;
  }
}
