syntax = "proto3";

package envoy.service.mutation.v3alpha;

import "envoy/config/core/v3/base.proto";
import "envoy/extensions/filters/http/mutation/v3alpha/processing_mode.proto";
import "envoy/service/auth/v3/attribute_context.proto";
import "envoy/type/v3/http_status.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.service.mutation.v3alpha";
option java_outer_classname = "MutationProto";
option java_multiple_files = true;
option java_generic_services = true;
option (udpa.annotations.file_status).work_in_progress = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: External Mutation Service]

// A service that can mutate HTTP requests and responses.
// The overall mutation protocol works like this:
//
// 1. Envoy sends to the service information about the HTTP request.
// 2. The service sends back a MutationResponse message that directs Envoy
//    to either stop processing, continue without it, or send it the
//    next chunk of the message body.
// 3. If so requested, Envoy sends the server chunks of the message body,
//    or the entire body at once. In either case, the server sends back
//    a MutationResponse after each message it receives.
// 4. If so requested, Envoy sends the server the HTTP trailers,
//    and the server sends back a MutationResponse.
// 5. At this point, request processing is done, and we pick up again
//    at step 1 when Envoy receives a response from the upstream server.
// 6. At any point above, if the server closes the gRPC stream cleanly,
//    then Envoy proceeds without consulting the server.
// 7. At any point above, if the server closes the gRPC stream with an error,
//    then Envoy returns a 500 error to the client, unless the filter
//    was configured to ignore errors.
//
// In other words, the process is a request/response conversation, but
// using a gRPC stream to make it easier for the server to
// maintain state.

service Mutation {
  // This begins the bidirectional stream that Envoy will use to
  // give the server control over what the filter does. The actual
  // protocol is described by the MutationRequest and MutationResponse
  // messages below.
  rpc Mutate(stream MutationRequest) returns (stream MutationResponse) {
  }
}

// This represents the different types of messages that Envoy can send
// to a mutation server.
// [#next-free-field: 8]
message MutationRequest {
  // If true, then the server must either respond with exactly one MutationResponse
  // message or close the stream. If false, the server must not respond with
  // an additional message, although it may still close the stream.
  // How this is set depends on how the ProcessingMode is configured, or if
  // the server requests a change in the processing mode.
  bool response_required = 1;

  oneof request {
    option (validate.required) = true;

    // Information about the HTTP request headers, as well as peer info and additional
    // properties. If "response_required" is set, the server must send back a
    // HeaderResponse message, an ImmediateResponse message, or close the stream.
    HttpHeaders request_headers = 2;

    // Information about the HTTP response headers, as well as peer info and additional
    // properties. If "response_required" is set, the server must send back a
    // HeaderResponse message or close the stream.
    HttpHeaders response_headers = 3;

    // A chunk of the HTTP request body. This is only sent if the server
    // requested it. If "response_required" is set, the server must send back
    // a BodyResponse message, an ImmediateResponse message, or close the stream.
    HttpBody request_body = 4;

    // A chunk of the HTTP request body. This is only sent if the server
    // requested it. If "response_required" is set, the server must send back
    // a BodyResponse message or close the stream.
    HttpBody response_body = 5;

    // The HTTP trailers for the request path. These are only sent if
    // the server requested them. If "response_required" is set, the server
    // must send back a TrailerResponse message or close the stream.
    HttpTrailers request_trailers = 6;

    // The HTTP trailers for the response path. These are only sent if
    // the server requested them. If "response_required" is set, the server
    // must send back a TrailerResponse message or close the stream.
    HttpTrailers response_trailers = 7;
  }
}

// For every MutationRequest received by the server with the "response_required" field
// set, the server must send back exactly one MutationResponse message.
// In addition, the server may send back a message with the "async_mode_change"
// message at any time.
// [#next-free-field: 11]
message MutationResponse {
  oneof response {
    // The server must send back this message in response to a message with the
    // "request_headers" field set.
    HeaderResponse request_header_response = 1;

    // The server must send back this message in response to a message with the
    // "response_headers" field set.
    HeaderResponse response_header_response = 2;

    // The server must send back this message in response to a message with
    // the "request_body" field set.
    BodyResponse request_body_response = 3;

    // The server must send back this message in response to a message with
    // the "response_body" field set.
    BodyResponse response_body_response = 4;

    // The server must send back this message in response to a message with
    // the "request_trailers" field set.
    HeaderResponse request_trailer_response = 5;

    // The server must send back this message in response to a message with
    // the "response_trailers" field set.
    HeaderResponse response_trailer_response = 6;

    // The server can respond with this message instead of one of the above
    // after a "request_headers" or "request_body" message. It causes an error
    // to be immediately sent to the client. It is ignored after
    // other message types.
    ImmediateResponse immediate_response = 7;
  }

  // Add new metadata to the Envoy context
  google.protobuf.Struct new_metadata = 8;

  // Override how parts of the HTTP request and response are processed
  // for the duration of this particular request/response only. Servers
  // may use this to intelligently control how requests are processed
  // based on the headers and other metadata that they see.
  envoy.extensions.filters.http.mutation.v3alpha.ProcessingMode mode_override = 9;

  // Change how and if the filter waits for responses from the server
  // for future messages. Servers may use this to switch between
  // synchronous and asynchronous processing modes based on what they see.
  // A message with this field may be sent even if none of the "oneof" fields
  // have been sent, and it may be sent out-of-band with respect to
  // the other messages if desired.
  ProcessingModeChange mode_change = 10;
}

// The following are messages that are sent to the server.

// This message is sent to the mutation server when the HTTP request and responses
// are first received.
message HttpHeaders {
  // The HTTP request headers. If multiple headers share the same key, they
  // must be merged according to the HTTP spec. All header keys must be
  // lower-cased, because HTTP header keys are case-insensitive.
  config.core.v3.HeaderMap headers = 1;

  // Information about the client's connection -- downstream if this is
  // a request and upstream if it is a response.
  auth.v3.AttributeContext.Peer client_info = 2;

  // The values of properties selected by the "request_properties"
  // list in the configuration. Each entry in the map is the
  // value of the specified property.
  map<string, google.protobuf.Struct> properties = 3;

  // If true, then there is no message body associated with this
  // request or response.
  bool no_body = 4;
}

// This message contains the message body that Envoy sends to the mutation service.
message HttpBody {
  bytes body = 1;

  bool end_of_stream = 2;
}

// This message contains the trailers.
message HttpTrailers {
  config.core.v3.HeaderMap trailers = 1;
}

// The following are messages that may be sent back by the server.

// This message must be sent in response to a RequestHeaders or ResponseHeaders
// message.
message HeaderResponse {
  // Add or replace HTTP headers.
  repeated config.core.v3.HeaderValueOption set_headers = 1;

  // Remove these HTTP headers.
  repeated string remove_headers = 2;
}

message BodyResponse {
  // Add or replace HTTP headers.
  repeated config.core.v3.HeaderValueOption set_headers = 1;

  // Remove these HTTP headers.
  repeated string remove_headers = 2;

  // Request that the last body chunk delivered be modified.
  BodyMutation body_mutation = 3;
}

// This message completely replaces the response.
// It will immediately return the data specified here to the downstream
// system and stop further filter processing.
message ImmediateResponse {
  type.v3.HttpStatus status = 1 [(validate.rules).message = {required: true}];

  repeated config.core.v3.HeaderValue headers = 2;

  bytes body = 3;

  repeated config.core.v3.HeaderValue trailers = 4;
}

// Change all or part of the message body by replacing the portion
// of the last chunk received denoted by "offset" and "length" with "body."
message BodyMutation {
  uint32 offset = 1;

  uint32 length = 2;

  bytes body = 3;
}

// Change the processing mode of the filter. If "duration" is set,
// then the change is a temporary change that will be un-done after the specified
// timeout. (If multiple requests arrive after a timer has been set, then the results
// may or may not reflect the last one received.)
message ProcessingModeChange {
  envoy.extensions.filters.http.mutation.v3alpha.ProcessingMode async_mode = 1;

  // If set, then the change will be reverted back to the configured async_mode
  // after this time. If not set, then the mode change request will be
  // permanent.
  google.protobuf.Duration duration = 2;
}
