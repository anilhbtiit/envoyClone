syntax = "proto3";

package envoy.type.metadata.v2;

option java_outer_classname = "MetadataProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.type.metadata.v2";

import "validate/validate.proto";

// [#protodoc-title: Metadata]

// MetadataKey provides a general interface using `filter` and `path` to retrieve value from
// :ref:`Metadata <envoy_api_msg_core.Metadata>`.
//
// For example, for the following Metadata:
//
// .. code-block:: yaml
//
//    filter_metadata:
//      envoy.filters.http.rbac:
//        path:
//          to:
//            foo: bar
//            people:
//              name: bob
//
// The following MetadataKey is matched as the path ``[path, to, foo]``
// will retrieve a string value "bar" from the Metadata.
//
// .. code-block:: yaml
//
//    filter: envoy.filters.http.rbac
//    path:
//    - key: path
//    - key: to
//    - key: foo
//
message MetadataKey {
  // Specifies the segment in a path to retrieve value from Metadata.
  // Currently it is only supported to specify the key, i.e. field name, as one segment of a path.
  message PathSegment {
    oneof segment {
      option (validate.required) = true;

      // If specified, use the key to retrieve the value in a Struct.
      string key = 1 [(validate.rules).string = {min_bytes: 1}];
    }
  }

  // The filter name to retrieve the Struct from the Metadata.
  string filter = 1 [(validate.rules).string = {min_bytes: 1}];

  // The path to retrieve the Value from the Struct. It can be a prefix or a full path,
  // e.g. ``[path, to, people]`` for a struct or ``[path, to, foo]`` for a string in the example,
  // which depends on the particular scenario.
  //
  // Note: Due to that only the key type segment is supported, the path can not specify a list
  // unless the list is the last segment.
  repeated PathSegment path = 2 [(validate.rules).repeated = {min_items: 1}];
}
