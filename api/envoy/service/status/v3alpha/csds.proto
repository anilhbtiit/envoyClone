syntax = "proto3";

package envoy.service.status.v3alpha;

import "envoy/admin/v3alpha/config_dump.proto";
import "envoy/config/core/v3alpha/base.proto";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

import "udpa/annotations/versioning.proto";

import "envoy/annotations/resource.proto";

option java_package = "io.envoyproxy.envoy.service.status.v3alpha";
option java_outer_classname = "CsdsProto";
option java_multiple_files = true;
option java_generic_services = true;

// CSDS is Client Status Discovery Service. It can be used to get the status of
// xDS-compliant client from the management server's point of view. It can also
// be used as an interface to get the current state of the client.
service ClientStatusService {
  option (envoy.annotations.resource).type = "envoy.service.status.v2.ClientStatus";

  rpc StreamClientStatus(stream ClientStatusRequest) returns (stream ClientStatusResponse) {
  }

  rpc FetchClientStatus(ClientStatusRequest) returns (ClientStatusResponse) {
    option (google.api.http).post = "/v3alpha/discovery:client_status";
    option (google.api.http).body = "*";
  }
}

// Status of a config.
enum ConfigStatus {
  // Status info is not available/unknown.
  UNKNOWN = 0;

  // Management server has sent the config to client and received ACK.
  SYNCED = 1;

  // Config is not sent.
  NOT_SENT = 2;

  // Management server has sent the config to client but hasnâ€™t received
  // ACK/NACK.
  STALE = 3;

  // Management server has sent the config to client but received NACK.
  ERROR = 4;
}

// Request for client status for a list of clients identified by Node identifier.
message ClientStatusRequest {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.status.v2.ClientStatusRequest";

  // Node identifier for a list of clients.
  repeated config.core.v3alpha.Node nodes = 1;

  // Metadata is used to give extra information to the management server.
  // For example, management server can choose to only send config status if
  // there is a metadata CONFIG_STATUS_ONLY: true.
  google.protobuf.Struct metadata = 2;
}

// Detailed config (per xDS) with status.
// [#next-free-field: 6]
message PerXdsConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.status.v2.PerXdsConfig";

  ConfigStatus status = 1;

  oneof per_xds_config {
    admin.v3alpha.ListenersConfigDump listener_config = 2;

    admin.v3alpha.ClustersConfigDump cluster_config = 3;

    admin.v3alpha.RoutesConfigDump route_config = 4;

    admin.v3alpha.ScopedRoutesConfigDump scoped_route_config = 5;
  }
}

// All xds configs for a particular client.
message ClientConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.status.v2.ClientConfig";

  // Node identifier for a particular client.
  config.core.v3alpha.Node node = 1;

  repeated PerXdsConfig xds_config = 2;
}

message ClientStatusResponse {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.status.v2.ClientStatusResponse";

  // Client configs for the clients specified in the ClientStatusRequest.
  repeated ClientConfig config = 1;
}
