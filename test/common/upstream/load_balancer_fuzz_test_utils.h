#include "envoy/config/cluster/v3/cluster.pb.h"

#include "common/upstream/load_balancer_impl.h"

#include "test/mocks/common.h"
#include "test/mocks/runtime/mocks.h"
#include "test/mocks/upstream/cluster_info.h"
#include "test/mocks/upstream/host_set.h"
#include "test/mocks/upstream/load_balancer_context.h"
#include "test/mocks/upstream/priority_set.h"

namespace Envoy {

namespace Random {
class FakeRandomGenerator : public RandomGenerator {
public:
  FakeRandomGenerator() = default;
  ~FakeRandomGenerator() override = default;

  // RandomGenerator
  uint64_t random() override; // returns a part of the generated bytestring
  std::string uuid() override { return ""; }
  uint32_t counter = 0; // Will get modded against byte string length for byte string index
  std::vector<uint64_t> bytestring_; // String of bytes that returns on random() calls
};
} // namespace Random

namespace Upstream {
namespace {

class LoadBalancerFuzzTestBase {
protected:
  LoadBalancerFuzzTestBase() : stats_(ClusterInfoImpl::generateStats(stats_store_)) {}

  Stats::IsolatedStoreImpl stats_store_;
  ClusterStats stats_;
  NiceMock<Runtime::MockLoader> runtime_;
  Random::FakeRandomGenerator random_;
  NiceMock<MockPrioritySet> priority_set_;
  MockHostSet& host_set_ = *priority_set_.getMockHostSet(0);
  MockHostSet& failover_host_set_ = *priority_set_.getMockHostSet(1);
  std::shared_ptr<MockClusterInfo> info_{new NiceMock<MockClusterInfo>()};
  envoy::config::cluster::v3::Cluster::CommonLbConfig common_config_;
};

} // namespace
} // namespace Upstream
} // namespace Envoy
