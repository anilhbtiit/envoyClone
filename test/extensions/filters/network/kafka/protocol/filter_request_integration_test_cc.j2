#include "common/common/utility.h"
#include "common/stats/isolated_store_impl.h"

#include "extensions/filters/network/kafka/broker/filter.h"
#include "extensions/filters/network/kafka/external/requests.h"

#include "test/extensions/filters/network/kafka/buffer_based_test.h"
#include "test/test_common/test_time.h"

#include "gtest/gtest.h"

namespace Envoy {
namespace Extensions {
namespace NetworkFilters {
namespace Kafka {
namespace Broker {

using RequestB = MessageBasedTest<RequestEncoder>;

class KafkaBrokerFilterRequestIntegrationTest : public testing::Test, protected RequestB {
protected:
  Stats::IsolatedStoreImpl scope_;
  Event::TestRealTimeSystem time_source_;
  KafkaBrokerFilter testee_{scope_, time_source_, "prefix"};

  Network::FilterStatus consume() {
    return testee_.onData(buffer_, false);
  }
};

TEST_F(KafkaBrokerFilterRequestIntegrationTest, shouldProcessMessages) {
  // given
  int32_t correlation = 0;

  // For every message type & version, put a corresponding request into the buffer.
  {% for message_type in message_types %}
    {% for field_list in message_type.compute_field_lists() %}
  {
    const RequestHeader request_header =
        { {{ message_type.get_extra('api_key') }}, {{ field_list.version }}, correlation++, "id" };
    const {{ message_type.name }} request_data = { {{ field_list.example_value() }} };
    const Request<{{ message_type.name }}> request = {request_header, request_data};
    putMessageIntoBuffer(request);
  }
    {% endfor %}
  {% endfor %}

  // when
  const Network::FilterStatus result = consume();

  // then
  ASSERT_EQ(result, Network::FilterStatus::Continue);

  // Also, assert that every message type has been processed properly.
  {% for message_type in message_types %}
  {
    const Stats::Counter& counter =
          scope_.counter("kafka.prefix.request.{{message_type.name_in_c_case()}}");
    ASSERT_EQ(counter.value(), {{ message_type.compute_field_lists() | length }});
  }
  {% endfor %}
}

} // namespace Broker
} // namespace Kafka
} // namespace NetworkFilters
} // namespace Extensions
} // namespace Envoy
