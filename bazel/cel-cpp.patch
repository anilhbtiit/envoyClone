diff --git a/base/internal/value.h b/base/internal/value.h
index fb3e845..62962c7 100644
--- a/base/internal/value.h
+++ b/base/internal/value.h
@@ -55,13 +55,9 @@ NativeTypeId GetListValueTypeId(const ListValue& list_value);
 
 NativeTypeId GetMapValueTypeId(const MapValue& map_value);
 
-static_assert(std::is_trivially_copyable_v<absl::Duration>,
-              "absl::Duration must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Duration>,
               "absl::Duration must be trivially destructible.");
 
-static_assert(std::is_trivially_copyable_v<absl::Time>,
-              "absl::Time must be trivially copyable.");
 static_assert(std::is_trivially_destructible_v<absl::Time>,
               "absl::Time must be trivially destructible.");
 
@@ -102,7 +98,11 @@ static_assert(kValueInlineSize <= 32,
 static_assert(kValueInlineAlign <= alignof(std::max_align_t),
               "Alignment of an inline value should not be overaligned.");
 
+#ifdef WIN32
+using AnyValue = AnyData<64, kValueInlineAlign>;
+#else
 using AnyValue = AnyData<kValueInlineSize, kValueInlineAlign>;
+#endif
 
 // Metaprogramming utility for interacting with Value.
 //
diff --git a/base/memory.h b/base/memory.h
index 3552e19..492966d 100644
--- a/base/memory.h
+++ b/base/memory.h
@@ -165,9 +165,11 @@ std::enable_if_t<IsDerivedHeapDataV<F>, Handle<T>> HandleFactory<T>::Make(
   static_assert(std::is_base_of_v<T, F>, "F is not derived from T");
 #if defined(__cpp_lib_is_pointer_interconvertible) && \
     __cpp_lib_is_pointer_interconvertible >= 201907L
+#ifndef WIN32
   // Only available in C++20.
   static_assert(std::is_pointer_interconvertible_base_of_v<Data, F>,
                 "F must be pointer interconvertible to Data");
+#endif
 #endif
   if (memory_manager.memory_management() == MemoryManagement::kPooling) {
     void* addr;
diff --git a/base/value.h b/base/value.h
index 5d94d5e..d53370c 100644
--- a/base/value.h
+++ b/base/value.h
@@ -336,8 +336,6 @@ CEL_INTERNAL_VALUE_DECL(Value);
 }  // namespace cel
 
 #define CEL_INTERNAL_SIMPLE_VALUE_STANDALONES(value_class)       \
-  static_assert(std::is_trivially_copyable_v<value_class>,       \
-                #value_class " must be trivially copyable");     \
   static_assert(std::is_trivially_destructible_v<value_class>,   \
                 #value_class " must be trivially destructible"); \
                                                                  \
diff --git a/internal/strings.cc b/internal/strings.cc
index dc5a118..24457ab 100644
--- a/internal/strings.cc
+++ b/internal/strings.cc
@@ -53,12 +53,12 @@ bool CheckForClosingString(absl::string_view source,
   if (closing_str.empty()) return true;
 
   const char* p = source.data();
-  const char* end = source.end();
+  const char* end = p + source.size();
 
   bool is_closed = false;
   while (p + closing_str.length() <= end) {
     if (*p != '\\') {
-      size_t cur_pos = p - source.begin();
+      size_t cur_pos = p - source.data();
       bool is_closing =
           absl::StartsWith(absl::ClippedSubstr(source, cur_pos), closing_str);
       if (is_closing && p + closing_str.length() < end) {
@@ -132,7 +132,7 @@ bool UnescapeInternal(absl::string_view source, absl::string_view closing_str,
   dest->reserve(source.size());
 
   const char* p = source.data();
-  const char* end = source.end();
+  const char* end = p + source.size();
   const char* last_byte = end - 1;
 
   while (p < end) {
@@ -446,7 +446,9 @@ std::string EscapeInternal(absl::string_view src, bool escape_all_bytes,
   // byte.
   dest.reserve(src.size() * 4);
   bool last_hex_escape = false;  // true if last output char was \xNN.
-  for (const char* p = src.begin(); p < src.end(); ++p) {
+  const char* p = src.data();
+  const char* end = p + src.size();
+  for (; p < end; ++p) {
     unsigned char c = static_cast<unsigned char>(*p);
     bool is_hex_escape = false;
     switch (c) {
@@ -552,7 +554,9 @@ std::string EscapeString(absl::string_view str) {
 std::string EscapeBytes(absl::string_view str, bool escape_all_bytes,
                         char escape_quote_char) {
   std::string escaped_bytes;
-  for (const char* p = str.begin(); p < str.end(); ++p) {
+  const char* p = str.data();
+  const char* end = p + str.size();
+  for (; p < end; ++p) {
     unsigned char c = *p;
     if (escape_all_bytes || !absl::ascii_isprint(c)) {
       escaped_bytes += "\\x";
diff --git a/tools/flatbuffers_backed_impl.cc b/tools/flatbuffers_backed_impl.cc
index 10c0b1c..45ba72f 100644
--- a/tools/flatbuffers_backed_impl.cc
+++ b/tools/flatbuffers_backed_impl.cc
@@ -130,6 +130,7 @@ class ObjectStringIndexedMapImpl : public CelMap {
     return absl::nullopt;
   }
 
+  using CelMap::ListKeys;
   absl::StatusOr<const CelList*> ListKeys() const override { return &keys_; }
 
  private:
