load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load(":generate.bzl", "generate_jsonschema")
load(":protos.bzl", "PROTOS")

licenses(["notice"])  # Apache 2


genquery(
    name = "proto_targets_txt",
    expression = """filter(
        @envoy_api:*,
        kind(
            proto_library,
            filter(
                pkg$,
                deps(@envoy_api//:all_protos)
            )
        )
    )""",
    scope = ["@envoy_api//:all_protos"],
)

jq(
    name = "proto_targets",
    srcs = [
        ":proto_targets_txt",
    ],
    args = ["-rsR"],
    filter = """
    "# Generated by bazel run //tools/protojsonschema:proto_targets, DO NOT EDIT.\n\n"+
    "PROTOS = [\n\t" + (split("\n") | map(select(length>0)) | map("\\""+.+"\\"") | join(",\n\t")) + ",\n]"
    """,
)

# to generate the "protos.bzl" file, use "bazel run //tools/protojsonschema:write_proto_targets"
# if file have differed from what already exist, "bazel run //tools/protojsonschema:write_proto_targets_tests" will throw an error
write_source_files(
    name = "write_proto_targets",
    files = {
        "protos.bzl": ":proto_targets",
    },
)

[
    # example: "@envoy_api//contrib/envoy/extensions/filters/http/dynamo/v3:pkg" => "contrib_envoy_extensions_filters_http_dynamo_v3_jsonschema"
    generate_jsonschema(
        proto.replace("@envoy_api//", "").replace("/", "_").replace(":pkg", "") + "_jsonschema",
        proto
    ) for proto in PROTOS
]
