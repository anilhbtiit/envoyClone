struct {{ complex_type.name }} {
	{% for field in complex_type.fields %}
	const {{ field.field_declaration() }}_;{% endfor %}
	{% for constructor in complex_type.compute_constructors() %}
	// constructor used in versions: {{ constructor['versions'] }}
	{{ constructor['full_declaration'] }}{% endfor %}

	{% if complex_type.fields|length > 0 %}
	size_t encode(Buffer::Instance& dst, EncodingContext& encoder) const {
		const int16_t api_version = encoder.apiVersion();
		size_t written{0};{% for field in complex_type.fields %}
		if (api_version >= {{ field.version_usage[0] }} && api_version < {{ field.version_usage[-1] + 1 }}) {
			written += encoder.encode({{ field.name }}_, dst);
		}{% endfor %}
		return written;
	}
	{% else %}
	size_t encode(Buffer::Instance&, EncodingContext&) const {
		return 0;
	}
	{% endif %}

	{% if complex_type.fields|length > 0 %}
	bool operator==(const {{ complex_type.name }}& rhs) const {
	{% else %}
	bool operator==(const {{ complex_type.name }}&) const {
	{% endif %}
		return true{% for field in complex_type.fields %}
		&& {{ field.name }}_ == rhs.{{ field.name }}_{% endfor %};
	};

};
{% for field_list in complex_type.compute_field_lists() %}
class {{ complex_type.name }}V{{ field_list.version }}Deserializer:
	public CompositeDeserializerWith{{ field_list.field_count() }}Delegates<{{ complex_type.name }}{% for field in field_list.used_fields() %}, {{ field.deserializer_name_in_version(field_list.version) }}{% endfor %}>{};
{% endfor %}

