syntax = "proto3";

package envoy.config.trace.v3;

import "envoy/config/core/v3/grpc_service.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/migrate.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.trace.v3";
option java_outer_classname = "SkywalkingProto";
option java_multiple_files = true;
option (udpa.annotations.file_migrate).move_to_package =
    "envoy.extensions.tracers.skywalking.v4alpha";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: SkyWalking tracer]

// Configuration for the SkyWalking tracer.
// [#extension: envoy.tracers.skywalking]
message SkyWalkingConfig {
  // SkyWalking collector service.
  core.v3.GrpcService grpc_service = 1 [(validate.rules).message = {required: true}];

  ClientConfig client_config = 2;
}

// Client config for SkyWalking tracer.
message ClientConfig {
  // Service name for SkyWalking tracer. If service_name is empty, then cluster name of Envoy will
  // be used as service name.
  string service_name = 1;

  // Service instance name for SkyWalking tracer. If instance_name is empty, the node name of Envoy
  // will be used as service instance name.
  string instance_name = 2;

  // Authentication token config for SkyWalking. Skywalking can use token authentication to secure
  // that monitoring application data can be trusted. In current version, Token is considered as a
  // simple string.
  // [#comment:TODO(wbpcode): Get authentication through the SDS API.]
  oneof authentication_specifier {
    // Inline authentication token string.
    string authentication = 3;
  }

  // Envoy caches the segment in memory when the backend service is temporarily unavailable. This
  // field specifies the maximum number of segments that can be cached. If not specified, the
  // default is 1024.
  google.protobuf.UInt32Value max_cache_size = 4;
}
