syntax = "proto3";

package envoy.extensions.filters.http.mutation.v3alpha;

import "envoy/config/core/v3/config_source.proto";
import "envoy/config/core/v3/grpc_service.proto";
import "envoy/extensions/filters/http/mutation/v3alpha/processing_mode.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.mutation.v3alpha";
option java_outer_classname = "MutationProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).work_in_progress = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Mutation Service]
// Mutation Service
// [#extension: envoy.filters.http.mutation]

// The Mutation filter allows an external service to act on HTTP traffic in a very flexible way.
// It communicates with an external gRPC service that can use it to do a variety of things
// with the request and response:
//
// * Access and modify the HTTP headers on the request, response, or both
// * Access and modify the HTTP request and response bodies
// * Access and modify the dynamic stream metadata
// * Immediately send an HTTP response downstream and terminate other processing
//
// The filter communicates with the server using a gRPC bidirectional stream. After the initial
// request, the external server is in control over what additional data is sent to it
// and how it should be processed.
//
// By implementing the protocol specified by the stream, the external server can choose:
//
// * Whether it receives the response message at all
// * Whether it receives the message body at all, in separate chunks, or as a single buffer
// * Whether subsequent HTTP requests are transmitted synchronously or whether they are
//   sent asynchronously.
//
// All of this together allows a server to process the filter traffic in fairly
// sophisticated ways. For example:
//
// * A server may choose to examine all or part of the HTTP message bodies depending
//   on the content of the headers.
// * A server may choose to immediately reject some messages based on their HTTP
//   headers (or other dynamic metadata) and more carefully examine others
// * A server may asynchronously monitor traffic coming through the filter by inspecting
//   headers, bodies, or both, and then decide to switch to a synchronous processing
//   mode, either permanently or temporarily.

// [#next-free-field: 7]
message Mutation {
  // Configuration for the gRPC service that the filter will communicate with.
  // The filter supports both the "Envoy" and "Google" gRPC clients.
  config.core.v3.GrpcService grpc_service = 1;

  // The version of the API supported by the gRPC service.
  config.core.v3.ApiVersion transport_api_version = 2
      [(validate.rules).enum = {defined_only: true}];

  // If true, then do nothing if the remote service RPC fails.
  // Otherwise, return a 500 error if the gRPC call fails.
  bool failure_mode_allow = 3;

  // If present, then select namespace keys from the dynamic metadata
  // to send the server along with the request message.
  repeated string request_metadata_context_namespaces = 4;

  // If present, then select namespace keys from the dynamic metadata
  // to send the server along with the response message.
  repeated string response_metadata_context_namespaces = 5;

  // Specifies whether the filter waits for a response from the server after
  // sending each part of the HTTP request and response data. By default,
  // the filter runs in "SYNC" mode.
  ProcessingMode processing_mode = 6;
}
