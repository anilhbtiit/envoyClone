---
{% import 'routing_helper_v2.template.yaml' as helper -%}
{% import 'access_log_format_helper_v2.template.yaml' as access_log_helper -%}
{% macro ingress_listener(protocol, address, port_value) -%}
- address:
    socket_address:
      protocol: {{ protocol }}
      address: {{ address }}
      port_value: {{ port_value }}
  filter_chains:
    - filters:
        - name: envoy.http_connection_manager
          config:
            codec_type: AUTO
            tracing:
              operation_name: INGRESS
            idle_timeout: 0.84s
            access_log:
              - name: envoy.file_access_log
                filter:
                  not_health_check_filter: {}
            #need to call access_log_helper
                config:
                  path: /var/log/envoy/ingress_http.log
              - name: envoy.file_access_log
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparision:
                            op: GE
                            value: 400
                      - status_code_filter:
                          comparision:
                            op: EQ
                            value: 0
                      - duration_filter:
                          comparision:
                            op: GE
                            value: 2000
                      - traceable_filter: {}
                      - not_health_check_filter: {}
                config:
                  path: /var/log/envoy/ingress_http_error.log
              - name: envoy.file_access_log
                filter:
                  and_filter:
                    filters:
                      - not_health_check_filter: {}
                      - runtime_filter:
                          runtime_key: access_log.ingress_http
                config:
                  path: /var/log/envoy/ingress_http_sampled.log
            stat_prefix: ingress_http
            route_config:
              virtual_hosts:
                - name: local_service
                  domains:
                    - "*"
                  routes:
                    - match:
                        prefix: "/"
                        headers:
                          - name: content-type
                            value: application/grpc
                      route:
                        cluster: local_service_grpc
                        timeout: 0s

                    - match:
                        prefix: "/"
                      route:
                        cluster: local_service
                        timeout:  0s
            http_filters:
              - name: envoy.health_check
                config:
                  pass_through_mode: true
                  endpoint: /healthcheck
                  cache_time: 2.5s
              - name: envoy.buffer
                config:
                  max_request_bytes: 5242880
                  max_request_time: 120s
{% endmacro -%}
static_resources:
  listeners:
  {{ ingress_listener("TCP", "0.0.0.0", 9211)| indent(2)}}
  - address:
      socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 9001
    filter_chains:
      - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: AUTO
              tracing:
                operation_name: EGRESS
              add_user_agent: true
              idle_timeout: 0.84s
              access_log:
                - name: envoy.file_access_log
                  filter:
                    not_health_check_filter: {}
                  #add access_log format helper ingress call here
                  config:
                    path: /var/log/envoy/egress_http_error.log
                - name: envoy.file_access_log
                  filter:
                    or_filter:
                      filters:
                        - status_code_filter:
                            comparision:
                              op: GE
                              value: 400
                        - duration_filter:
                            comparision:
                              op: GE
                              value: 2000
                        - traceable_filter: {}
                        - not_health_check_filter: {}
          #call access_log_helper.egress_error_log() here
              stat_prefix: egress_http
              use_remote_address: true
              route_config:
                virtual_hosts:
                {% for service, options in internal_virtual_hosts.iteritems() %}
                - name: "{{ service }}"
                  domains:
                  - "{{ service }}"
                  routes:
                  - match:
                      prefix: "/"
                    #this is configs for route
                    route:
                      {{ helper.make_route_internal(service, options)|indent(10) }}
                  {% if options.get('service_to_service_rate_limit', False) %}
                  rate_limits:
                    - actions:
                        destination_cluster: rate_limit_on_this_destination
                    - actions:
                        source_cluster: rate_limit_on_this_source
                  {% endif -%}  
                {% if not loop.last %}{% endif %}
                {% endfor %} 

          #please check here
              rds:
                config_source:
                  ads: {}
                route_config_name: rds

              http_filters:
                - name: envoy.ratelimit
                  config:
                    domain: envoy_service_to_service

                - name: envoy.grpc_http1_bridge
                  config: {}

                - name: envoy.router
                  config: {}

  - address:
      socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 9002
    filter_chains:
      - filters:
        - name: envoy.http_connection_manager
          config:
            codec_type: AUTO
            tracing:
              operation_name: EGRESS
            add_user_agent: TRUE
            idle_timeout: 0.84s
            access_log:
              - name: envoy.file_access_log
                filter:
                  not_health_check_filter: {}
                #add access_log format helper ingress call here
                config:
                  path: /var/log/envoy/egress_http_error.log
              - name: envoy.file_access_log
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparision:
                            op: GE
                            value: 400
                      - duration_filter:
                          comparision:
                            op: GE
                            value: 2000
                      - traceable_filter: {}
                      - not_health_check_filter: {}
        #call access_log_helper.egress_error_log() here
            stat_prefix: EGRESS_HTTP
            use_remote_address: TRUE
            rds:
              config_source:
                api_config_source:
                  cluster_names:
                    - rds
              route_config_name: 9002_http_conn_man
            http_filters:
              - name: envoy.ratelimit
                config:
                  domain: envoy_service_to_service

              - name: envoy.grpc_http1_bridge
                config: {}

              - name: envoy.router
                config: {}

#why do we have this line?
{% if external_virtual_hosts|length > 0 or mongos_servers|length > 0 %}{% endif -%}
{% for mapping in external_virtual_hosts %}
  - address: 
      socket_address:
        address: "{{ mapping['address'] }}"
        protocol: "{{ mapping['protocol'] }}"
        port_value: "{{ mapping['port_value'] }}"
    filter_chains:
      - filters:
        - name: envoy.http_connection_manager
          config:
            codec_type: AUTO
            idle_timeout: 0.84s
            access_log:
              - name: envoy.file_access_log
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparision:
                            op: GE
                            value: 400
                      - status_code_filter:
                          comparision:
                            op: EQ
                            value: 0
                      {% if mapping.get('log_high_latency_requests', True) %}
                      - duration_filter:
                          comparision:
                            op: GE
                            value: 2000
                      {% endif %}

                config:
                  path: "/var/log/envoy/egress_{{ mapping['name'] }}_http_error.log" 

              #{% if mapping.get('is_amzn_service', False) -%}
              #{{ access_log_helper.egress_error_amazon_service()|indent(6) }}
              #{% else -%}
              #{{ access_log_helper.egress_error_log()|indent(6) }}
              #{% endif %}              
            stat_prefix: EGRESS_{{ mapping['name'] }}
            route_config:
              virtual_hosts:
              {% for host in mapping['hosts'] %}
              - name: egress_{{ host['name'] }}
                domains:
                - "{{ host['domain'] }}"
                routes:
                - match:
                    prefix: "/"
                  route:
                    cluster: egress_{{ host['name'] }}
                    retry_policy:
                      retry_on: connect-failure
                    {% if host.get('host_rewrite', False) %}
                    host_rewrite: "{{host['host_rewrite']}}"
                    {% endif %}
              {% if not loop.last %}{% endif %}
              {% endfor %}

            http_filters:
            {% if mapping['name'] in ['dynamodb_iad', 'dynamodb_legacy'] -%}
            - name: envoy.http_dynamo_filter
              config: {}
            {% endif -%}
            - name: envoy.router
              config: {}
{% if (mongos_servers|length > 0) or (mongos_servers|length == 0 and not loop.last ) %}{% endif -%}
{% endfor -%}

{% for key, value in mongos_servers.iteritems() %}
  - address: 
      socket_address:
        address: "{{ value['address'] }}"
        protocol: "{{ value['protocol'] }}"
        port_value: "{{ value['port_value'] }}"
    filter_chains:
      - filters:
        {% if value.get('ratelimit', False) %}
        - name: envoy.ratelimit
          config:
            stat_prefix: "{{ key }}"
            domain: envoy_mongo_cps
            descriptors:
              - key: database
                value: "{{ key }}"
        {% endif %}
        - name: mongo_proxy
          config:
            stat_prefix: "{{ key }}"
            access_log: "/var/log/envoy/mongo_{{ key }}.log"
        - name: tcp_proxy
          config:
            stat_prefix: mongo_{{ key }}
            cluster: mongo_{{ key }}
{% if not loop.last %}{% endif -%}
{% endfor -%}





  clusters:
    {% for service, options in internal_virtual_hosts.iteritems() -%}
    - {{ helper.internal_cluster_definition(service, options)|indent(4)}}
    {% endfor -%}
  

    {% for mapping in external_virtual_hosts -%}
    {% for host in mapping['hosts'] -%}
    - name: egress_{{ host['name'] }}
      #need to update tls and timeout accordingly
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_type: ROUND_ROBIN
      hosts:
        - socket_address:
            address: {{ host['remote_address'] }}
            port_value: {{ host['port_value'] }}
            protocol: {{ host['protocol'] }}
    {% endfor -%}
    {% endfor -%}


    {% for key, value in mongos_servers.iteritems() -%}
    - name: mongo_{{ key }}
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_type: RANDOM
      hosts:
      {% for server in value['hosts'] -%}
        - socket_address:
            protocol: {{ server['protocol'] }}
            port_value: {{ server['port_value'] }}
            address: {{ server['address'] }}
      {% if not loop.last -%}{% endif -%}
      {% endfor -%}
    {% endfor %}



    - name: local_service
      connect_timeout: 0.25s
      type: STATIC
      lb_type: ROUND_ROBIN
      hosts:
        - socket_address:
            protocol: TCP
            address: 127.0.0.1
            port_value: 8080
#need to check here
      circuit_breakers:
        thresholds:
          max_pending_requests: 30
          max_connections: 100

    - name: local_service_grpc
      connect_timeout: 0.25s
      type: STATIC
      lb_type: ROUND_ROBIN
#      features: http2
      circuit_breakers:
        thresholds:
          max_requests: 200
      hosts:
        - socket_address:
            protocol: TCP
            address: 127.0.0.1
            port_value: 8081

    - name: rds
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_type: ROUND_ROBIN
      hosts:
        - socket_address:
            protocol: TCP
            address: rds.yourcompany.net
            port_value: 80

    - name: statsd
      connect_timeout: 0.25s
      type: STATIC
      lb_type: ROUND_ROBIN
      hosts:
        - socket_address:
            protocol: TCP
            address: 127.0.0.1
            port_value: 8125
  
    - name: lightstep_saas
      connect_timeout: 1s
      type: LOGICAL_DNS
      lb_type: ROUND_ROBIN
#need to add tls context here
      hosts:
        - url: tcp://collector-grpc.lightstep.com:443
        - socket_address:
            protocol: TCP
            address: collector-grpc.lightstep.com
            port_value: 443

admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
flags_path: /etc/envoy/flags
stats_sinks:
  - name: envoy.statsd
    config:
      tcp_cluster_name: statsd
tracing:
  http:
    - name: envoy.lightstep
      config:
        collector_cluster: lightstep_saas
        access_token_file: /etc/envoy/lightstep_access_token
#read more about this
rate_limit_service:
  grpc_service:
    envoy_grpc:
      cluster_name: ratelimit
runtime:
  symlink_root: "srv/runtime_data/current"
  subdirectory: envoy
  override_subdirectory: envoy_override

dynamic_resources:
#need to add eds/sds_config here
  cds_config:
