diff --git a/eval/public/message_wrapper.h b/eval/public/message_wrapper.h
index ffa8648..bd83b17 100644
--- a/eval/public/message_wrapper.h
+++ b/eval/public/message_wrapper.h
@@ -45,12 +45,12 @@ class MessageWrapper {
    public:
     explicit Builder(google::protobuf::MessageLite* message)
         : message_ptr_(reinterpret_cast<uintptr_t>(message)) {
-      ABSL_ASSERT(absl::countr_zero(reinterpret_cast<uintptr_t>(message)) >=
+      ABSL_ASSERT(static_cast<uintptr_t>(absl::countr_zero(reinterpret_cast<uintptr_t>(message))) >=
                   kTagSize);
     }
     explicit Builder(google::protobuf::Message* message)
         : message_ptr_(reinterpret_cast<uintptr_t>(message) | kMessageTag) {
-      ABSL_ASSERT(absl::countr_zero(reinterpret_cast<uintptr_t>(message)) >=
+      ABSL_ASSERT(static_cast<uintptr_t>(absl::countr_zero(reinterpret_cast<uintptr_t>(message))) >=
                   kTagSize);
     }
 
@@ -82,7 +82,7 @@ class MessageWrapper {
                  const LegacyTypeInfoApis* legacy_type_info)
       : message_ptr_(reinterpret_cast<uintptr_t>(message)),
         legacy_type_info_(legacy_type_info) {
-    ABSL_ASSERT(absl::countr_zero(reinterpret_cast<uintptr_t>(message)) >=
+    ABSL_ASSERT(static_cast<uintptr_t>(absl::countr_zero(reinterpret_cast<uintptr_t>(message))) >=
                 kTagSize);
   }
 
@@ -90,7 +90,7 @@ class MessageWrapper {
                  const LegacyTypeInfoApis* legacy_type_info)
       : message_ptr_(reinterpret_cast<uintptr_t>(message) | kMessageTag),
         legacy_type_info_(legacy_type_info) {
-    ABSL_ASSERT(absl::countr_zero(reinterpret_cast<uintptr_t>(message)) >=
+    ABSL_ASSERT(static_cast<uintptr_t>(absl::countr_zero(reinterpret_cast<uintptr_t>(message))) >=
                 kTagSize);
   }
 
diff --git a/eval/public/structs/cel_proto_lite_wrap_util.cc b/eval/public/structs/cel_proto_lite_wrap_util.cc
index 4cb21e5..b25921b 100644
--- a/eval/public/structs/cel_proto_lite_wrap_util.cc
+++ b/eval/public/structs/cel_proto_lite_wrap_util.cc
@@ -698,7 +698,7 @@ absl::StatusOr<BytesValue*> CreateMessageFromValue(
   if (wrapper == nullptr) {
     wrapper = google::protobuf::Arena::CreateMessage<BytesValue>(arena);
   }
-  wrapper->set_value(view_val.value());
+  wrapper->set_value(view_val.value().value(), view_val.value().size());
   return wrapper;
 }
 
@@ -782,7 +782,7 @@ absl::StatusOr<StringValue*> CreateMessageFromValue(
   if (wrapper == nullptr) {
     wrapper = google::protobuf::Arena::CreateMessage<StringValue>(arena);
   }
-  wrapper->set_value(view_val.value());
+  wrapper->set_value(view_val.value().value(), view_val.value().size());
   return wrapper;
 }
 
@@ -950,7 +950,7 @@ absl::StatusOr<Value*> CreateMessageFromValue(
     case CelValue::Type::kString: {
       CelValue::StringHolder val;
       if (cel_value.GetValue(&val)) {
-        wrapper->set_string_value(val.value());
+        wrapper->set_string_value(val.value().value(), val.value().size());
       }
     } break;
     case CelValue::Type::kTimestamp: {
diff --git a/eval/public/structs/cel_proto_wrap_util.cc b/eval/public/structs/cel_proto_wrap_util.cc
index 9df9c00..1f077a9 100644
--- a/eval/public/structs/cel_proto_wrap_util.cc
+++ b/eval/public/structs/cel_proto_wrap_util.cc
@@ -468,7 +468,7 @@ google::protobuf::Message* MessageFromValue(
   if (!value.GetValue(&view_val)) {
     return nullptr;
   }
-  wrapper->set_value(view_val.value());
+  wrapper->set_value(view_val.value().data(), view_val.value().size());
   return wrapper;
 }
 
@@ -536,7 +536,7 @@ google::protobuf::Message* MessageFromValue(
   if (!value.GetValue(&view_val)) {
     return nullptr;
   }
-  wrapper->set_value(view_val.value());
+  wrapper->set_value(view_val.value().data(), view_val.value().size());
   return wrapper;
 }
 
@@ -682,7 +682,7 @@ google::protobuf::Message* MessageFromValue(const CelValue& value, Value* json,
     case CelValue::Type::kString: {
       CelValue::StringHolder val;
       if (value.GetValue(&val)) {
-        json->set_string_value(val.value());
+        json->set_string_value(val.value().data(), val.value().size());
         return json;
       }
     } break;
diff --git a/eval/public/structs/proto_message_type_adapter.cc b/eval/public/structs/proto_message_type_adapter.cc
index 74b32f6..4fef472 100644
--- a/eval/public/structs/proto_message_type_adapter.cc
+++ b/eval/public/structs/proto_message_type_adapter.cc
@@ -86,10 +86,10 @@ absl::StatusOr<bool> HasFieldImpl(const google::protobuf::Message* message,
                                   absl::string_view field_name) {
   ABSL_ASSERT(descriptor == message->GetDescriptor());
   const Reflection* reflection = message->GetReflection();
-  const FieldDescriptor* field_desc = descriptor->FindFieldByName(field_name);
+  const FieldDescriptor* field_desc = descriptor->FindFieldByName(std::string(field_name));
   if (field_desc == nullptr && reflection != nullptr) {
     // Search to see whether the field name is referring to an extension.
-    field_desc = reflection->FindKnownExtensionByName(field_name);
+    field_desc = reflection->FindKnownExtensionByName(std::string(field_name));
   }
   if (field_desc == nullptr) {
     return absl::NotFoundError(absl::StrCat("no_such_field : ", field_name));
@@ -122,7 +122,7 @@ absl::StatusOr<CelValue> GetFieldImpl(const google::protobuf::Message* message,
                                       cel::MemoryManager& memory_manager) {
   ABSL_ASSERT(descriptor == message->GetDescriptor());
   const Reflection* reflection = message->GetReflection();
-  const FieldDescriptor* field_desc = descriptor->FindFieldByName(field_name);
+  const FieldDescriptor* field_desc = descriptor->FindFieldByName(std::string(field_name));
   if (field_desc == nullptr && reflection != nullptr) {
     std::string ext_name(field_name);
     field_desc = reflection->FindKnownExtensionByName(ext_name);
@@ -360,7 +360,7 @@ ProtoMessageTypeAdapter::NewInstance(cel::MemoryManager& memory_manager) const {
 }
 
 bool ProtoMessageTypeAdapter::DefinesField(absl::string_view field_name) const {
-  return descriptor_->FindFieldByName(field_name) != nullptr;
+  return descriptor_->FindFieldByName(std::string(field_name)) != nullptr;
 }
 
 absl::StatusOr<bool> ProtoMessageTypeAdapter::HasField(
@@ -393,7 +393,7 @@ absl::Status ProtoMessageTypeAdapter::SetField(
                        UnwrapMessage(instance, "SetField"));
 
   const google::protobuf::FieldDescriptor* field_descriptor =
-      descriptor_->FindFieldByName(field_name);
+      descriptor_->FindFieldByName(std::string(field_name));
   CEL_RETURN_IF_ERROR(
       ValidateSetFieldOp(field_descriptor != nullptr, field_name, "not found"));
 
diff --git a/eval/public/structs/protobuf_descriptor_type_provider.cc b/eval/public/structs/protobuf_descriptor_type_provider.cc
index 5c18ce3..77839ea 100644
--- a/eval/public/structs/protobuf_descriptor_type_provider.cc
+++ b/eval/public/structs/protobuf_descriptor_type_provider.cc
@@ -42,7 +42,7 @@ ProtobufDescriptorProvider::ProvideLegacyTypeInfo(
 std::unique_ptr<ProtoMessageTypeAdapter>
 ProtobufDescriptorProvider::CreateTypeAdapter(absl::string_view name) const {
   const google::protobuf::Descriptor* descriptor =
-      descriptor_pool_->FindMessageTypeByName(name);
+      descriptor_pool_->FindMessageTypeByName(std::string(name));
   if (descriptor == nullptr) {
     return nullptr;
   }
