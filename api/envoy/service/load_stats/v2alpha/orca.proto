syntax = "proto3";

package envoy.service.load_stats.v2alpha;

option java_outer_classname = "OpenRCAProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.service.load_stats.v2alpha";
option go_package = "v2alpha";

import "google/protobuf/duration.proto";

import "validate/validate.proto";

// Out-of-band (OOB) load reporting service for frontends to periodically get
// load information from backends.
service OpenRCAService {
  rpc StreamCoreMetrics(stream LoadReportRequest) returns (stream LoadReport);
}

message LoadReportRequest {
  // Interval for generating Open RCA core metric responses.
  google.protobuf.Duration report_interval = 1;
  // Request costs to collect. If this is empty, all known requests costs tracked by
  // the load reporting agent will be returned. This provides an opportunity for
  // the client to selectively obtain a subset of tracked costs.
  repeated string request_cost_names = 2;
}

message LoadReport {
  // CPU utilization expressed as a fraction of available CPU resources. This
  // should be derived from a sample or measurement taken during the request.
  double cpu_utilization = 1 [(validate.rules).double.gte = 0, (validate.rules).double.lte = 1];

  // Memory utilization expressed as a fraction of available memory
  // resources. This should be derived from a sample or measurement taken
  // during the request.
  double mem_utilization = 2 [(validate.rules).double.gte = 0, (validate.rules).double.lte = 1];

  // NIC inbound/outbound utilization expressed as a fraction of available NIC
  // bandwidth. The request in/out bytes can be inferred by Envoy, but not the
  // NIC availability at the endpoint, hence reporting
  double nic_in_utilization = 3 [(validate.rules).double.gte = 0, (validate.rules).double.lte = 1];

  double nic_out_utilization = 4 [(validate.rules).double.gte = 0, (validate.rules).double.lte = 1];

  // Application specific requests costs. Values may be absolute costs (e.g.
  // 3487 bytes of storage) associated with the cost or utilization,
  // expressed as a fraction of total resources available. Utilization
  // metrics should be derived from a sample or measurement taken
  // during the request.
  map<string, double> request_cost_or_utilization = 5;
}