syntax = "proto3";

package envoy.extensions.filters.http.custom_response.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/substitution_format_string.proto";
import "envoy/config/core/v3/extension.proto";

import "google/protobuf/wrappers.proto";

import "xds/annotations/v3/status.proto";
import "xds/type/matcher/v3/matcher.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.custom_response.v3";
option java_outer_classname = "CustomResponseProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/custom_response/v3;custom_responsev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Custom Response Filter]
// [#extension: envoy.filters.http.custom_response]

// The Custom Response Filter allows for replacing upstream responses.

// The filter configuration is a collection of custom response
// policies in a matcher tree. The configuration can be defined at the filter,
// virtual host or route level. The most specific configuration will apply.
message CustomResponse {
  // [#next-free-field: 2]

  // Custom response policy to redirect the original response to a different
  // upstream.
  message RedirectPolicy {
    // The host that will serve the custom response.
    //
    // Example:
    //
    // .. code-block:: yaml
    //
    //    uri: https://www.mydomain.com
    //
    string host = 1 [(validate.rules).string = {min_len: 1}];

    // The path for the custom response.
    //
    // Example:
    //
    //  .. code-block:: yaml
    //
    //  path: /path/to/503_response.txt
    string path = 2 [(validate.rules).string = {min_len: 1}];

    // The new response status code if specified. This is used to override the
    // status code of the redirect response if it is not an error status.
    google.protobuf.UInt32Value status_code = 3 [(validate.rules).uint32 = {lt: 600 gte: 200}];

    // HTTP headers to add to the response. This allows the
    // response policy to append, to add or to override headers of
    // the original response for local body, or the custom response from the
    // remote body, before it is sent to a downstream client.
    // Note that these are not applied if the redirected response is an error
    // response.
    repeated config.core.v3.HeaderValueOption response_headers_to_add = 4
        [(validate.rules).repeated = {max_items: 1000}];

    // HTTP headers to add to the request before it is redirected.
    repeated config.core.v3.HeaderValueOption request_headers_to_add = 5
        [(validate.rules).repeated = {max_items: 1000}];

    // Custom action to modify request headers before selection of the
    // redirected route.
    config.core.v3.TypedExtensionConfig modify_request_headers_action = 6;
  }

  // Custom response policy to serve a locally stored response to the
  // downstream.
  message LocalResponsePolicy {
    // Optional new local reply body text. It will be used
    // in the `%LOCAL_REPLY_BODY%` command operator in the `body_format`.
    config.core.v3.DataSource body = 1;

    // Optional body format to be used for this response.
    config.core.v3.SubstitutionFormatString body_format = 2;

    // The new response status code if specified.
    google.protobuf.UInt32Value status_code = 3 [(validate.rules).uint32 = {lt: 600 gte: 200}];

    // HTTP headers to add to the response. This allows the
    // response policy to append, to add or to override headers of
    // the original response for local body, or the custom response from the
    // remote body, before it is sent to a downstream client.
    repeated config.core.v3.HeaderValueOption response_headers_to_add = 4
        [(validate.rules).repeated = {max_items: 1000}];
  }

  // Matcher to match against the original response.
  // Example:
  //
  // .. validated-code-block:: yaml
  //   :type-name: xds.type.matcher.v3.Matcher
  //
  //   matcher_list:
  //     matchers:
  //       # Apply a locally stored custom response to any 4xx response.
  //     - predicate:
  //         single_predicate:
  //           input:
  //             name: 4xx_response
  //             typed_config:
  //               "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
  //           value_match:
  //             exact: "4xx"
  //       on_match:
  //         action:
  //           name: action
  //           typed_config:
  //             "@type": type.googleapis.com/envoy.config.core.v3.TypedExtensionConfig
  //             name: local_response
  //             typed_config:
  //               "@type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.CustomResponse.LocalResponsePolicy
  //               status_code: 499
  //               body:
  //                 inline_string: "not allowed"
  //               body_format:
  //                 json_format:
  //                   status: "%RESPONSE_CODE%"
  //                   message: "%LOCAL_REPLY_BODY%"
  //               response_headers_to_add:
  //               - header:
  //                   key: "foo"
  //                   value: "x-bar"
  //       # Redirect to different upstream if the status code is one of 502, 503 or 504.
  //     - predicate:
  //         or_matcher:
  //           predicate:
  //           - single_predicate:
  //               input:
  //                 name: "502_response"
  //                 typed_config:
  //                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
  //               value_match:
  //                 exact: "502"
  //           - single_predicate:
  //               input:
  //                 name: "503_response"
  //                 typed_config:
  //                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
  //               value_match:
  //                 exact: "503"
  //           - single_predicate:
  //               input:
  //                 name: "504_response"
  //                 typed_config:
  //                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
  //               value_match:
  //                 exact: "504"
  //       on_match:
  //         action:
  //           name: action
  //           typed_config:
  //             "@type": type.googleapis.com/envoy.config.core.v3.TypedExtensionConfig
  //             name: redirect_response
  //             typed_config:
  //               "@type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.CustomResponse.RedirectPolicy
  //               status_code: 299
  //               uri: "https://foo.example/gateway_error"
  //               response_headers_to_add:
  //               - header:
  //                   key: "foo2"
  //                   value: "x-bar2"
  //
  // -- attention::
  //  The first matched policy wins. Once the response is matched, matcher
  //  evaluations ends.
  //
  // Refer to :ref:`Unified Matcher API <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>`
  // documentation for more information on the matcher trees.
  xds.type.matcher.v3.Matcher custom_response_matcher = 1;
}
